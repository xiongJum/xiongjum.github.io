<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lain</title>
  
  <subtitle>好奇 记录 进步</subtitle>
  <link href="https://blog.lain.buzz/atom.xml" rel="self"/>
  
  <link href="https://blog.lain.buzz/"/>
  <updated>2023-05-01T12:48:59.795Z</updated>
  <id>https://blog.lain.buzz/</id>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>黄金之国伊拉OST</title>
    <link href="https://blog.lain.buzz/Kingdom_of_Torna_Original_Soundtrack/"/>
    <id>https://blog.lain.buzz/Kingdom_of_Torna_Original_Soundtrack/</id>
    <published>2023-05-01T11:42:31.000Z</published>
    <updated>2023-05-01T12:48:59.795Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>        <div id="aplayer-MVWmNudB" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;"></div>  <script>  var options = {"narrow":false,"autoplay":false,"showlrc":3,"mode":"order","mutex":true,"theme":"#e6d0b2","preload":"metadata","listmaxheight":"513px","music":[{"title":"A Moment of Eternity","url":"https://share.lain.buzz/api/raw/?path=/%F0%9F%8E%B5%20Music/ACG/Xenoblade/Xenoblade%20Chronicles%202%20-%20Kingdom%20of%20Torna%20Original%20Soundtrack/11%20A%20Moment%20of%20Eternity.flac","author":"光田康典","pic":"https://share.lain.buzz/api/raw/?path=/%F0%9F%8E%B5%20Music/ACG/Xenoblade/Xenoblade%20Chronicles%202%20-%20Kingdom%20of%20Torna%20Original%20Soundtrack/cover.jpg","lrc":"caffeine.txt"},{"title":"The Beginning of Our Memory","url":"https://share.lain.buzz/api/raw/?path=/%F0%9F%8E%B5%20Music/ACG/Xenoblade/Xenoblade%20Chronicles%202%20-%20Kingdom%20of%20Torna%20Original%20Soundtrack/01%20The%20Beginning%20of%20Our%20Memory.flac","author":"光田康典","pic":"https://share.lain.buzz/api/raw/?path=/%F0%9F%8E%B5%20Music/ACG/Xenoblade/Xenoblade%20Chronicles%202%20-%20Kingdom%20of%20Torna%20Original%20Soundtrack/cover.jpg"},{"title":"Lasaria Woodland","url":"https://share.lain.buzz/api/raw/?path=/%F0%9F%8E%B5%20Music/ACG/Xenoblade/Xenoblade%20Chronicles%202%20-%20Kingdom%20of%20Torna%20Original%20Soundtrack/02%20Lasaria%20Woodland.flac","author":"光田康典","pic":"https://share.lain.buzz/api/raw/?path=/%F0%9F%8E%B5%20Music/ACG/Xenoblade/Xenoblade%20Chronicles%202%20-%20Kingdom%20of%20Torna%20Original%20Soundtrack/cover.jpg"},{"title":"Battle!! (Torna)","url":"https://share.lain.buzz/api/raw/?path=/%F0%9F%8E%B5%20Music/ACG/Xenoblade/Xenoblade%20Chronicles%202%20-%20Kingdom%20of%20Torna%20Original%20Soundtrack/03%20Battle!!%20(Torna).flac","author":"光田康典","pic":"https://share.lain.buzz/api/raw/?path=/%F0%9F%8E%B5%20Music/ACG/Xenoblade/Xenoblade%20Chronicles%202%20-%20Kingdom%20of%20Torna%20Original%20Soundtrack/cover.jpg"},{"title":"Four-limbed Titan (Gormott)","url":"https://share.lain.buzz/api/raw/?path=/%F0%9F%8E%B5%20Music/ACG/Xenoblade/Xenoblade%20Chronicles%202%20-%20Kingdom%20of%20Torna%20Original%20Soundtrack/04%20Four-limbed%20Titan%20(Gormott).flac","author":"光田康典","pic":"https://share.lain.buzz/api/raw/?path=/%F0%9F%8E%B5%20Music/ACG/Xenoblade/Xenoblade%20Chronicles%202%20-%20Kingdom%20of%20Torna%20Original%20Soundtrack/cover.jpg"},{"title":"Kingdom of Torna","url":"https://share.lain.buzz/api/raw/?path=/%F0%9F%8E%B5%20Music/ACG/Xenoblade/Xenoblade%20Chronicles%202%20-%20Kingdom%20of%20Torna%20Original%20Soundtrack/05%20Kingdom%20of%20Torna.flac","author":"光田康典","pic":"https://share.lain.buzz/api/raw/?path=/%F0%9F%8E%B5%20Music/ACG/Xenoblade/Xenoblade%20Chronicles%202%20-%20Kingdom%20of%20Torna%20Original%20Soundtrack/cover.jpg"},{"title":"Auresco, Royal Capital (Night)","url":"https://share.lain.buzz/api/raw/?path=/%F0%9F%8E%B5%20Music/ACG/Xenoblade/Xenoblade%20Chronicles%202%20-%20Kingdom%20of%20Torna%20Original%20Soundtrack/08%20Auresco%2C%20Royal%20Capital%20(Night).flac","author":"光田康典","pic":"https://share.lain.buzz/api/raw/?path=/%F0%9F%8E%B5%20Music/ACG/Xenoblade/Xenoblade%20Chronicles%202%20-%20Kingdom%20of%20Torna%20Original%20Soundtrack/cover.jpg"},{"title":"Over Despair and Animus","url":"https://share.lain.buzz/api/raw/?path=/%F0%9F%8E%B5%20Music/ACG/Xenoblade/Xenoblade%20Chronicles%202%20-%20Kingdom%20of%20Torna%20Original%20Soundtrack/09%20Over%20Despair%20and%20Animus.flac","author":"光田康典","pic":"https://share.lain.buzz/api/raw/?path=/%F0%9F%8E%B5%20Music/ACG/Xenoblade/Xenoblade%20Chronicles%202%20-%20Kingdom%20of%20Torna%20Original%20Soundtrack/cover.jpg"},{"title":"Our Paths May Never Cross","url":"https://share.lain.buzz/api/raw/?path=/%F0%9F%8E%B5%20Music/ACG/Xenoblade/Xenoblade%20Chronicles%202%20-%20Kingdom%20of%20Torna%20Original%20Soundtrack/10%20Our%20Paths%20May%20Never%20Cross.flac","author":"光田康典","pic":"https://share.lain.buzz/api/raw/?path=/%F0%9F%8E%B5%20Music/ACG/Xenoblade/Xenoblade%20Chronicles%202%20-%20Kingdom%20of%20Torna%20Original%20Soundtrack/cover.jpg"}]};  options.element = document.getElementById("aplayer-MVWmNudB");  var ap = new APlayer(options);    window.aplayers || (window.aplayers = []);  window.aplayers.push(ap);  </script>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="Xenoblade Chronicles 2" scheme="https://blog.lain.buzz/tags/Xenoblade-Chronicles-2/"/>
    
    <category term="Xenoblade" scheme="https://blog.lain.buzz/tags/Xenoblade/"/>
    
    <category term="OST" scheme="https://blog.lain.buzz/tags/OST/"/>
    
    <category term="music" scheme="https://blog.lain.buzz/tags/music/"/>
    
    <category term="异度之刃" scheme="https://blog.lain.buzz/tags/%E5%BC%82%E5%BA%A6%E4%B9%8B%E5%88%83/"/>
    
    <category term="异度神剑" scheme="https://blog.lain.buzz/tags/%E5%BC%82%E5%BA%A6%E7%A5%9E%E5%89%91/"/>
    
    <category term="黄金之国" scheme="https://blog.lain.buzz/tags/%E9%BB%84%E9%87%91%E4%B9%8B%E5%9B%BD/"/>
    
  </entry>
  
  <entry>
    <title>install nodejs and npm</title>
    <link href="https://blog.lain.buzz/tech/tools-install-nodejs/"/>
    <id>https://blog.lain.buzz/tech/tools-install-nodejs/</id>
    <published>2023-04-26T13:16:04.000Z</published>
    <updated>2023-05-01T12:48:59.815Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="Ubuntu-下安装-nodejs"><a href="#Ubuntu-下安装-nodejs" class="headerlink" title="Ubuntu 下安装 nodejs"></a>Ubuntu 下安装 nodejs</h2><p>下载并执行 NodeSource 安装脚本</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">sudo curl -sL https://deb.nodesource.com/setup_14.x | sudo -E bash <br></code></pre></td></tr></table></figure><p>安装</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">sudo apt install nodejs<br></code></pre></td></tr></table></figure><h2 id="Arch-下安装-nodejs"><a href="#Arch-下安装-nodejs" class="headerlink" title="Arch 下安装 nodejs"></a>Arch 下安装 nodejs</h2><p>安装长期支持版</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">sudo pacman -S nodejs-lts-gallium<br></code></pre></td></tr></table></figure><h2 id="检验是否安装成功"><a href="#检验是否安装成功" class="headerlink" title="检验是否安装成功"></a>检验是否安装成功</h2><p>打印他们的版本号, 验证是否安装正确</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">npm --version<br>node --version<br></code></pre></td></tr></table></figure><h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><ol><li><p><a href="https://nodejs.org/zh-cn/">Node.js</a>® 是一个基于 Chrome V8 引擎 的 JavaScript 运行时环境。</p></li><li><p>Ubuntu 软件软件源中安装 Node.js 和 npm，但是此方法安装的 node.js 版本过低, 不建进行包管理器安装</p></li></ol><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>[1] <a href="https://zzz.buzz/zh/">zzz.buzz</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="node" scheme="https://blog.lain.buzz/tags/node/"/>
    
    <category term="npm" scheme="https://blog.lain.buzz/tags/npm/"/>
    
  </entry>
  
  <entry>
    <title>心情_20230422</title>
    <link href="https://blog.lain.buzz/diary/dairy_20230422/"/>
    <id>https://blog.lain.buzz/diary/dairy_20230422/</id>
    <published>2023-04-22T13:00:50.000Z</published>
    <updated>2023-05-01T12:48:59.795Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>伤心桥下春波绿，曾是惊鸿照影来。<br>                          — 陆游&lt;重过沉圆作&gt;</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="碎碎念" scheme="https://blog.lain.buzz/tags/%E7%A2%8E%E7%A2%8E%E5%BF%B5/"/>
    
    <category term="diary" scheme="https://blog.lain.buzz/tags/diary/"/>
    
  </entry>
  
  <entry>
    <title>JupyterLab</title>
    <link href="https://blog.lain.buzz/tech/tools_jupyter/"/>
    <id>https://blog.lain.buzz/tech/tools_jupyter/</id>
    <published>2022-01-18T16:00:00.000Z</published>
    <updated>2023-04-26T13:07:08.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>JupyterLab 是 Project Jupyter 的下一代基于 Web 的用户界面。<br>JupyterLab 使您能够以灵活、集成和可扩展的方式处理文档和活动，例如 Jupyter 笔记本、文本编辑器、终端和自定义组件.</p><p>以下适用于 jupyter3.0 </p><span id="more"></span><h1 id="Install-Jupyter-Lab"><a href="#Install-Jupyter-Lab" class="headerlink" title="Install Jupyter Lab"></a><center>Install Jupyter Lab</h1><h2 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h2><p>准备隔离的环境(可选)<br>使用 pip 进行安装</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 创建虚拟环境</span><br>python3 -m venv jupyter<br><span class="hljs-comment"># 进入虚拟环境</span><br><span class="hljs-built_in">source</span> jupyter/bin/activate<br><span class="hljs-comment"># 使用 pip 安装 JupyterLab</span><br>pip install jupyterlab<br><span class="hljs-comment"># 为当前用户安装</span><br><span class="hljs-comment">## 需要将jupyter 添加至环境变量中去</span><br>pip install --user jupyterlab<br><span class="hljs-built_in">export</span> PATH=~/.local/bin/jupyterlab:PATH<br></code></pre></td></tr></table></figure><h2 id="Localization"><a href="#Localization" class="headerlink" title="Localization"></a>Localization</h2><blockquote><p>从 3.0 版本开始，JupyterLab 提供了设置用户界面显示语言的能力。</p></blockquote><h3 id="安装语言包"><a href="#安装语言包" class="headerlink" title="安装语言包"></a>安装语言包</h3><p>显示新的语言，您需要安装语言包，访问<a href="https://github.com/jupyterlab/language-packs/tree/master/language-packs">语言包列表</a> </p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">pip install jupyterlab-language-pack-zh-CN<br></code></pre></td></tr></table></figure><p>点击 Settings &gt;&gt; Language 更改显示语言, 并点击 Ok 确认更改语言，重新载入或者刷新页面即可显示此示例中的简体中文。</p><h1 id="Install-jupyterLab-extend"><a href="#Install-jupyterLab-extend" class="headerlink" title="Install jupyterLab extend"></a><center>Install jupyterLab extend</h1><h2 id="1-install-nodejs-and-npm"><a href="#1-install-nodejs-and-npm" class="headerlink" title="1. install nodejs and npm"></a>1. <a href="../tools-install-nodejs">install nodejs and npm</a></h2><h2 id="2-安装-jupyterlab-扩展"><a href="#2-安装-jupyterlab-扩展" class="headerlink" title="2. 安装 jupyterlab 扩展"></a>2. 安装 jupyterlab 扩展</h2><h3 id="jupyterlab-lsp"><a href="#jupyterlab-lsp" class="headerlink" title="jupyterlab-lsp"></a><a href="https://github.com/jupyter-lsp/jupyterlab-lsp">jupyterlab-lsp</a></h3><blockquote><p>提供语言的自动补全功能 </p></blockquote><p>功能</p><ol><li>将鼠标悬停在任何一段代码上， 如果出现下滑线，您可以按下 Ctrl 以获取带有函数&#x2F;类签名、模块文档或语言服务器（或其他信息工具）的提示信息</li><li>严重错误带有红色下滑线，警告为橙色。将鼠标悬停在带有下滑线上可以查看更加详细的信息</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 安装</span><br>pip install <span class="hljs-string">&#x27;jupyterlab&gt;=3.0.0,&lt;4.0.0a0&#x27;</span> jupyterlab-lsp<br><span class="hljs-comment"># 为选择的语言安装 LSP 服务器</span><br>pip install <span class="hljs-string">&#x27;python-lsp-server[all]&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="jupyterlab-kite"><a href="#jupyterlab-kite" class="headerlink" title="jupyterlab-kite"></a><a href="https://github.com/kiteco/jupyterlab-kite">jupyterlab-kite</a></h3><blockquote><p>Kite 是一个 AI 驱动的编程助手，可帮助您在 JupyterLab 中编写 Python 代码。Kite 通过节省击键并在正确的时间向您显示正确的信息来帮助您更快地编写代码。在<a href="https://kite.com/integrations/jupyter/%E4%BA%86%E8%A7%A3%E6%9B%B4%E5%A4%9A%E5%85%B3%E4%BA%8E">https://kite.com/integrations/jupyter/了解更多关于</a> Kite 如何增强 JupyterLab 编辑器功能的信息。</p></blockquote><p><strong>安装 Kite 需要 CPU 支持 AVX</strong>， 详情请参考 <a href="https://help.kite.com/article/101-kite-requires-avx-support">https://help.kite.com/article/101-kite-requires-avx-support</a></p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 安装</span><br><span class="hljs-comment"># linux</span><br>bash -c <span class="hljs-string">&quot;<span class="hljs-subst">$(wget -q -O - https://linux.kite.com/dls/linux/current)</span>&quot;</span><br>pip install <span class="hljs-string">&quot;jupyterlab-kite&gt;=2.0.2&quot;</span><br></code></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>[1] <a href="https://developer.aliyun.com/article/760687">阿里云社区</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;JupyterLab 是 Project Jupyter 的下一代基于 Web 的用户界面。&lt;br&gt;JupyterLab 使您能够以灵活、集成和可扩展的方式处理文档和活动，例如 Jupyter 笔记本、文本编辑器、终端和自定义组件.&lt;/p&gt;
&lt;p&gt;以下适用于 jupyter3.0 &lt;/p&gt;</summary>
    
    
    
    
    <category term="Python" scheme="https://blog.lain.buzz/tags/Python/"/>
    
    <category term="ide" scheme="https://blog.lain.buzz/tags/ide/"/>
    
    <category term="jupyter" scheme="https://blog.lain.buzz/tags/jupyter/"/>
    
    <category term="tools" scheme="https://blog.lain.buzz/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>接口自动化测试</title>
    <link href="https://blog.lain.buzz/tech/code_%E6%8E%A5%E5%8F%A3%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    <id>https://blog.lain.buzz/tech/code_%E6%8E%A5%E5%8F%A3%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/</id>
    <published>2021-12-25T16:00:00.000Z</published>
    <updated>2023-04-21T05:06:54.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><p>准备库 <a href="https://docs.python-requests.org/zh_CN/latest/">requests</a> 和 <a href="https://docs.python.org/zh-cn/3/library/unittest.html">unittest</a></p><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">pip install requests<br></code></pre></td></tr></table></figure><h1 id="编写测试脚本"><a href="#编写测试脚本" class="headerlink" title="编写测试脚本"></a>编写测试脚本</h1><h2 id="封装公共参数"><a href="#封装公共参数" class="headerlink" title="封装公共参数"></a>封装公共参数</h2><p>封装公共参数，重复调取结果，减少代码的编写量，降低理解难度。</p><p>设置接口的必填参数，并使用 *args 传入接口的非必填参数；使用 **kwargs 设置一些条件。<br>可以将一些公共参数写入到单独的文件中，使用时引用即可；一些隐私的数据可以写入到<a href="/tags/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F">#环境变量中</a>中，如测试 api 或者测试账号。</p><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> unittest<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">RequestTest</span>(unittest.TestCase):<br><br> <span class="hljs-comment"># 封装公共参数</span><br> <span class="hljs-keyword">def</span> <span class="hljs-title function_">common</span>(<span class="hljs-params">self, name, password, *args, **kwargs</span>):<br>url = <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;config.ENVIRONMENT&#125;</span>/auth/login&quot;</span><br>param = &#123;<span class="hljs-string">&quot;name&quot;</span>:name, <span class="hljs-string">&quot;password&quot;</span>:password,&#125;<br><br><span class="hljs-keyword">if</span> args: <span class="hljs-comment"># 如果 args 不为空 则将参数传入添加到请求参数中</span><br> <span class="hljs-keyword">for</span> arg <span class="hljs-keyword">in</span> args:<br> param.update(**arg)<br>self.response = requests.post(url, headers=self.headers, json=param, <br>  verify=<span class="hljs-literal">False</span>,)<br><br> <span class="hljs-comment"># 如果 kwargs 不为 False 则进行相应的操作</span><br><span class="hljs-keyword">if</span> kwargs:<br><span class="hljs-keyword">for</span> key, value <span class="hljs-keyword">in</span> kwargs.items():<br><span class="hljs-keyword">if</span> key == <span class="hljs-string">&#x27;del_&#x27;</span> <span class="hljs-keyword">and</span> value : <span class="hljs-comment"># 如果 key 为 del_ 则删除本次测试所产生的数据</span><br>self.db.commit_data(<span class="hljs-string">f&quot;delete from mp_org where phone=&#x27;<span class="hljs-subst">&#123;phone&#125;</span>&#x27;&quot;</span>)<br><br><span class="hljs-keyword">return</span> self.response<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>unittest.main(verbosity=<span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure><p>调取公共参数，请求项目的外部接口获取请求结果, 并根据结果进行断言</p><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">RequestTest</span>(unittest.TestCase):<br><br>... skip<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_login</span>(<span class="hljs-params">self</span>):<br>self.common(name=<span class="hljs-string">&#x27;admin&#x27;</span>, password=<span class="hljs-string">&#x27;passwd&#x27;</span>)<br><br><span class="hljs-comment"># 断言</span><br>self.assertEqual(self.response.status_code, <span class="hljs-number">200</span>)<br> self.assertEqual(self.response.json()[<span class="hljs-string">&#x27;code&#x27;</span>], <span class="hljs-number">0</span>, msg=<span class="hljs-string">&#x27;返回的状态码不为0&#x27;</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>unittest.main(verbosity=<span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure><h2 id="编写装饰器"><a href="#编写装饰器" class="headerlink" title="编写装饰器"></a>编写装饰器</h2><p>将相同的断言放入 <a href="https://docs.python.org/zh-cn/3/library/typing.html#functions-and-decorators">#装饰器</a>中，以供重复使用</p><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># decorators.py</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">lsgot_success</span>(<span class="hljs-params">f</span>):<br><br><span class="hljs-meta">@wraps(<span class="hljs-params">f</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decorator</span>(<span class="hljs-params">self, *args, **kwargs</span>):<br>f(self, *args, **kwargs)<br>responseJSON = self.response.json()<br><span class="hljs-built_in">print</span>(responseJSON)<br>self.assertEqual(self.response.status_code, <span class="hljs-number">200</span>,)<br>self.assertEqual(responseJSON[<span class="hljs-string">&#x27;code&#x27;</span>], <span class="hljs-number">0</span>, msg=<span class="hljs-string">&#x27;返回的状态码不为0&#x27;</span>)<br><span class="hljs-keyword">return</span> f(self, *args, **kwargs)<br><span class="hljs-keyword">return</span> decorator<br></code></pre></td></tr></table></figure><p>修改测试方法</p><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> decorators <span class="hljs-keyword">import</span> lsgot_success<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">RequestTest</span>(unittest.TestCase):<br><br>... skip<br><br><span class="hljs-meta">@lsgot_success</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_login</span>(<span class="hljs-params">self</span>):<br>self.common(name=<span class="hljs-string">&#x27;admin&#x27;</span>, password=<span class="hljs-string">&#x27;passwd&#x27;</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>unittest.main(verbosity=<span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure><p>若接口需要 cookie 之类的凭证，可以编写单独的方法，在运行测试之前写入到 cookie 或者 headers 中。</p><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">login</span>():<br><br>response = requests.post(url=url, headers=config.CONFING.LOGIN_HEADERS, <br> data=param, verify=<span class="hljs-literal">False</span>)<br><br><span class="hljs-comment"># 获取登录结果返回的响应， 并将 Authorization 写入到 headers 中。</span><br>headers = &#123;<br><span class="hljs-string">&quot;Authorization&quot;</span>: <span class="hljs-string">f&quot;Bearer <span class="hljs-subst">&#123;response.json()[<span class="hljs-string">&#x27;access_token&#x27;</span>]&#125;</span>&quot;</span>,<br><span class="hljs-string">&quot;Content-Type&quot;</span>: <span class="hljs-string">&quot;application/json;charset=UTF-8&quot;</span><br>&#125;<br><span class="hljs-keyword">return</span> headers<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">RequestTest</span>(unittest.TestCase):<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">setUp</span>(<span class="hljs-params">self</span>):<br>self.headers = login()<br><br><span class="hljs-meta">... </span>skip<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br><br>unittest.main(verbosity=<span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure><p>如果在测试过程中需要访问数据库，访问这篇文章<a href="">在 Python 中访问 SQL</a></p><p>谢谢</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>[1] 由于链接消失，暂时无法展示，以后找到后补上</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="Python" scheme="https://blog.lain.buzz/tags/Python/"/>
    
    <category term="自动化测试" scheme="https://blog.lain.buzz/tags/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
    <category term="接口自动化测试" scheme="https://blog.lain.buzz/tags/%E6%8E%A5%E5%8F%A3%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>pip</title>
    <link href="https://blog.lain.buzz/tech/code_PyPi/"/>
    <id>https://blog.lain.buzz/tech/code_PyPi/</id>
    <published>2021-12-24T16:00:00.000Z</published>
    <updated>2022-01-21T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>由于某些发行版（如 pacman）会去除 pip 包管理器，则需要以下方法进行 pip的安装。<br>国内的下载速度过于缓慢，所以需要将下载源更换为国内源，来提升pip的下载速度，这里首先推荐豆瓣源。</p><p>安装详情请见 <a href="https://pip.pypa.io/en/stable/installation/">pip 文档</a></p><span id="more"></span><h1 id="1-安装pip"><a href="#1-安装pip" class="headerlink" title="1. 安装pip"></a>1. 安装pip</h1><p>从以下途径安装 python，则会自动安装 pip。</p><ul><li>在虚拟环境中工作</li><li>从 (python.org)[<a href="https://www.python.org/]">https://www.python.org/]</a> 中下载的 Python</li></ul><p>否则使用以下方法进行 pip 的安装</p><h2 id="1-1-ensurepip"><a href="#1-1-ensurepip" class="headerlink" title="1.1 ensurepip"></a>1.1 ensurepip</h2><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># Linux</span><br>python -m ensurepip --upgrade<br><span class="hljs-comment"># Windows</span><br>py -m ensurepip --upgrade<br></code></pre></td></tr></table></figure><h2 id="1-2-get-pip-py"><a href="#1-2-get-pip-py" class="headerlink" title="1.2 get-pip.py"></a>1.2 get-pip.py</h2><p>从 <a href="https://bootstrap.pypa.io/get-pip.py">https://bootstrap.pypa.io/get-pip.py</a> 下载脚本。<br>若从linux 的命令行模式下下载，则需执行以下语句</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">wget https://bootstrap.pypa.io/get-pip.py<br></code></pre></td></tr></table></figure><p>请参阅 <a href="https://docs.python.org/3/library/ensurepip.html#module-ensurepip">ensurepip</a> 获取更详细的信息。</p><h3 id="Linux-下安装"><a href="#Linux-下安装" class="headerlink" title="Linux 下安装"></a>Linux 下安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># (**如果需要全局安装，请执行下一条语句**)安装到当前用户下</span><br>python get-pip.py<br><span class="hljs-comment"># 全局安装pip</span><br>sudo python get-pip.py<br></code></pre></td></tr></table></figure><p>若不是全局安装 pip ，则需要将 pip 添加到环境变量中</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vi"># ~/.bashrc 或 ~/.zshrc<br>export PATH=&quot;$HOME/.local/:$PATH&quot;<br></code></pre></td></tr></table></figure><p>重新进入环境变量</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">source</span> ~/.bashrc<br><span class="hljs-comment"># 或</span><br><span class="hljs-built_in">source</span> ~/.zshrc<br></code></pre></td></tr></table></figure><h3 id="Windows-下安装"><a href="#Windows-下安装" class="headerlink" title="Windows 下安装"></a>Windows 下安装</h3><figure class="highlight cmd"><table><tr><td class="code"><pre><code class="hljs cmd">py get-pip.py<br></code></pre></td></tr></table></figure><p>更多请参考文档 <a href="https://github.com/pypa/get-pip">pypa&#x2F;get-pip</a></p><blockquote><p>此链接为 github，若需要良好的访问体验，请魔法上网或者其余方式</p></blockquote><h1 id="2-更新-pip"><a href="#2-更新-pip" class="headerlink" title="2. 更新 pip"></a>2. 更新 pip</h1><p>Linux</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">python -m pip install --upgrade pip<br></code></pre></td></tr></table></figure><p>Windows</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">py -m pip install --upgrade pip<br></code></pre></td></tr></table></figure><p>若需要下载速度过慢可参考下文，更换为国内源</p><h1 id="3-更换-pip-的下载源"><a href="#3-更换-pip-的下载源" class="headerlink" title="3. 更换 pip 的下载源"></a>3. 更换 pip 的下载源</h1><h2 id="3-1-国内源"><a href="#3-1-国内源" class="headerlink" title="3.1 国内源"></a>3.1 国内源</h2><ul><li>豆瓣:：<a href="https://pypi.douban.com/simple/">https://pypi.douban.com/simple/</a></li><li>清华：<a href="https://pypi.tuna.tsinghua.edu.cn/simple">https://pypi.tuna.tsinghua.edu.cn/simple</a></li></ul><blockquote><p>建议使用豆瓣源</p></blockquote><h2 id="3-2-更换-pipy-源"><a href="#3-2-更换-pipy-源" class="headerlink" title="3.2 更换 pipy 源"></a>3.2 更换 pipy 源</h2><h3 id="临时使用"><a href="#临时使用" class="headerlink" title="临时使用"></a>临时使用</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">pip install -i https://pypi.tuna.tsinghua.edu.cn/simple some-package<br></code></pre></td></tr></table></figure><h3 id="设置为默认值"><a href="#设置为默认值" class="headerlink" title="设置为默认值"></a>设置为默认值</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext"># 更换 pip 源<br>pip config set global.index-url https://pypi.douban.com/simple/<br></code></pre></td></tr></table></figure><h5 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h5><p>[1] <a href="https://mirror.tuna.tsinghua.edu.cn/help/pypi/">清华大学开源软件镜像站</a><br>[2] <a href="https://pip.pypa.io/en/stable/installation/">pip 文档</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;由于某些发行版（如 pacman）会去除 pip 包管理器，则需要以下方法进行 pip的安装。&lt;br&gt;国内的下载速度过于缓慢，所以需要将下载源更换为国内源，来提升pip的下载速度，这里首先推荐豆瓣源。&lt;/p&gt;
&lt;p&gt;安装详情请见 &lt;a href=&quot;https://pip.pypa.io/en/stable/installation/&quot;&gt;pip 文档&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="Python" scheme="https://blog.lain.buzz/tags/Python/"/>
    
    <category term="pip" scheme="https://blog.lain.buzz/tags/pip/"/>
    
    <category term="code" scheme="https://blog.lain.buzz/tags/code/"/>
    
  </entry>
  
  <entry>
    <title>VIM 插件管理器-Vundle</title>
    <link href="https://blog.lain.buzz/tech/tools_vim01/"/>
    <id>https://blog.lain.buzz/tech/tools_vim01/</id>
    <published>2021-11-27T05:03:33.000Z</published>
    <updated>2022-01-08T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Vim 是一个高度可配置的文本编辑器，旨在高效地创建和更改任何类型的文本。它作为“vi”和“vim”包含在大多数 类UNIX 和Linux 中。</p><span id="more"></span><h1 id="1-安装插件管理器"><a href="#1-安装插件管理器" class="headerlink" title="1. 安装插件管理器"></a>1. 安装插件管理器</h1><h2 id="1-1-下载-Vundle"><a href="#1-1-下载-Vundle" class="headerlink" title="1.1 下载 Vundle"></a>1.1 下载 Vundle</h2><ol><li>Vundle插件也是提供一个Vundle.vim文件，其下载地址为 <a href="https://github.com/VundleVim/Vundle.vim.git">Vim bundle</a> 然后将下载后的文件存放到 ~&#x2F;.vim&#x2F;bundle </li><li>或者可以直接从 Github 上拉取文件<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim<br></code></pre></td></tr></table></figure></li></ol><h2 id="1-2-配置-Vundle"><a href="#1-2-配置-Vundle" class="headerlink" title="1.2 配置 Vundle"></a>1.2 配置 Vundle</h2><ol><li>修改 Vim 的配置文件 ~&#x2F;.vimrc, 若没有此文件可以直接进行创建， 以下是配置文件。</li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">set nocompatible               &quot;去除VIM一致性，必须<br>filetype off                   <br><br>set rtp+=~/.vim/bundle/Vundle.vim &quot;设置包括vundle和初始化相关的运行时路径<br><br>call vundle#begin()<br>&quot;在此增加其他插件，安装的插件需要放在vundle#begin和vundle#end之间&quot;<br>&quot;安装github上的插件格式为 Plugin &#x27;用户名/插件仓库名&#x27;&quot;<br><br>Plugin &#x27;VundleVim/Vundle.vim&#x27;  &quot;启用vundle管理插件，必须&quot;<br><br>call vundle#end()           <br><br>filetype plugin indent on     &quot;加载vim自带和插件相应的语法和文件类型相关脚本，必须<br></code></pre></td></tr></table></figure><h2 id="1-3-安装-Vundle"><a href="#1-3-安装-Vundle" class="headerlink" title="1.3 安装 Vundle"></a>1.3 安装 Vundle</h2><ol><li>需要打开配置文件 ~&#x2F;.vimrc， 在命令模式下输入 <strong>:PluginInstall</strong></li><li>或者在终端命令行下通过命令 <strong>vim + PluginInstall + qall(用户名&#x2F;插件仓库名)</strong> 直接安装</li></ol><h2 id="1-4-使用-Vundle-修改插件"><a href="#1-4-使用-Vundle-修改插件" class="headerlink" title="1.4 使用 Vundle 修改插件"></a>1.4 使用 Vundle 修改插件</h2><ol><li>安装插件， 同1.3</li><li>删除插件，编辑 Vim 配置文件 .vimrc, 删除想要移除插件所对应的 Plugin 一行， 然后打开 vim 在 vim命令行模式中执行命令 <strong>:BundleClean</strong></li><li>其余操作方法可以见<a href="https://github.com/VundleVim/Vundle.vim/blob/v0.10.2/doc/vundle.txt#L319-L360">原文档</a></li></ol><h1 id="2-Markdown-扩展插件"><a href="#2-Markdown-扩展插件" class="headerlink" title="2. Markdown 扩展插件"></a>2. Markdown 扩展插件</h1><h2 id="2-1-vim-markdown"><a href="#2-1-vim-markdown" class="headerlink" title="2.1 vim-markdown"></a>2.1 vim-markdown</h2><p>原始 Markdown 的语法高亮、匹配规则和映射, 项目地址<a href="https://github.com/plasticboy/vim-markdown">vim-markdown</a></p><h3 id="2-1-1-安装"><a href="#2-1-1-安装" class="headerlink" title="2.1.1 安装"></a>2.1.1 安装</h3><ol><li>使用 Vundle 安装，将以下两行添加至您的 .vimrc 文件中<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">&#x27; 安装 vim-markdown<br>Plugin &#x27;godlygeek/tabular&#x27;         &#x27;依赖<br>Plugin &#x27;plasticboy/vim-markdown&#x27;   &#x27;本体<br></code></pre></td></tr></table></figure>保存后，直接在 .vimrc 文件的命令行模式键入命令 :PluginInstall</li></ol><h3 id="2-1-2-基本用法"><a href="#2-1-2-基本用法" class="headerlink" title="2.1.2 基本用法"></a>2.1.2 基本用法</h3><ol><li>使用 :help fold-expr 和 :help fold-commands 了解详情</li><li>默认情况下为标题启用折叠</li></ol><ul><li>zr 降低整个缓冲区的折叠级别 1~6，即六级标题</li><li>zR 打开所有的折叠</li><li>zm 增加折叠级别</li><li>zM 折叠所有</li><li>za 展开当前光标所在的位置</li><li>zc 折叠光标所在的位置</li><li>zA 递归展开</li><li>zC 递归折叠</li></ul><h2 id="2-2-markdown-preview"><a href="#2-2-markdown-preview" class="headerlink" title="2.2 markdown-preview"></a>2.2 markdown-preview</h2><p>通过浏览器实时预览 Markdown 文件</p><h3 id="2-2-1-安装"><a href="#2-2-1-安装" class="headerlink" title="2.2.1 安装"></a>2.2.1 安装</h3><ol><li>打开 .vimrc 添加以下几行文本<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">Plugin &#x27;iamcco/markdown-preview.nvim&#x27;<br></code></pre></td></tr></table></figure></li><li>然后在命令行模式中运行<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">:source %<br>:PluginInstall<br>:call mkdp#util#install()<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;Vim 是一个高度可配置的文本编辑器，旨在高效地创建和更改任何类型的文本。它作为“vi”和“vim”包含在大多数 类UNIX 和Linux 中。&lt;/p&gt;</summary>
    
    
    
    
    <category term="tools" scheme="https://blog.lain.buzz/tags/tools/"/>
    
    <category term="vim" scheme="https://blog.lain.buzz/tags/vim/"/>
    
    <category term="编辑器" scheme="https://blog.lain.buzz/tags/%E7%BC%96%E8%BE%91%E5%99%A8/"/>
    
    <category term="插件" scheme="https://blog.lain.buzz/tags/%E6%8F%92%E4%BB%B6/"/>
    
    <category term="Vundle" scheme="https://blog.lain.buzz/tags/Vundle/"/>
    
  </entry>
  
  <entry>
    <title>Ocean 主題配置</title>
    <link href="https://blog.lain.buzz/tech/blog_Hexo%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE/"/>
    <id>https://blog.lain.buzz/tech/blog_Hexo%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE/</id>
    <published>2021-10-29T16:00:00.000Z</published>
    <updated>2021-11-01T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Ocean 是基于 Hexo 默认主题 landscape 的功能，设计的一款支持移动设备的主题，并且集成了 Gitalk 与 Valine 评论功能。</p><p>如果你喜欢 Ocean 可以从 <a href="https://github.com/zhwangart/hexo-theme-ocean">GitHub</a> 下载，主题默认使用 Logo 是 Hexo 的 Logo，更换 Logo 路径在 ocean&#x2F;source&#x2F;images&#x2F;hexo.svg ，注意它还有一个反色版 hexo-inverted.svg ，如果你更改了文件名，那么还需要在 ocean&#x2F;_config.yml 做对应的修改。</p><p>详细文档见 <a href="https://zhwangart.com/2018/11/30/Ocean/">Ocean 文档</a>，以下是个人的需要的配置</p><span id="more"></span><h1 id="1-安装"><a href="#1-安装" class="headerlink" title="1. 安装"></a>1. 安装</h1><p>下载安装</p><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">git <span class="hljs-built_in">clone</span> https://github.com/zhwangart/hexo-theme-ocean.git themes/ocean</span><br></code></pre></td></tr></table></figure><p>更新</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">$ cd themes/ocean<br>$ git pull<br></code></pre></td></tr></table></figure><h1 id="2-配置"><a href="#2-配置" class="headerlink" title="2. 配置"></a>2. 配置</h1><h2 id="2-1-添加页面"><a href="#2-1-添加页面" class="headerlink" title="2.1 添加页面"></a>2.1 添加页面</h2><p>Ocean 默认在主题配置文件中配置相册和关于的链接， 但是主题中实际上并没有此页面，点击会提示 404 。可以按照需要进行删除和安装。</p><h3 id="2-1-1-安装存在格式的页面"><a href="#2-1-1-安装存在格式的页面" class="headerlink" title="2.1.1 安装存在格式的页面"></a>2.1.1 安装存在格式的页面</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">hexo new page gallery    // 创建相册页面<br>hexo new page about      // 创建关于页面<br>hexo new page tags       // 创建标签页面<br>hexo new page categories // 创建分类页面<br>hexo new page favorites  // 创建收藏页面<br></code></pre></td></tr></table></figure><p>主题会根据不同的页面定义不同的模板(theme&#x2F;layout&#x2F;), 需要在 index.md 文件中的 Front-matter 区域标注 layout， 以 Tags 页面为例：</p><p>1，位置处在 source&#x2F;tag&#x2F;index.md</p><p>2，Markdown</p><figure class="highlight markdown"><table><tr><td class="code"><pre><code class="hljs Markdown">---<br>title: 标签<br>date: 2021-10-31<br>type: tags<br><span class="hljs-section">layout: &quot;tags&quot;</span><br><span class="hljs-section">---</span><br></code></pre></td></tr></table></figure><p>3，配置后需要在 themes&#x2F;ocean&#x2F;_config.yml 文件中的 menu 下新增页面， 如 about 。</p><figure class="highlight markdown"><table><tr><td class="code"><pre><code class="hljs Markdown">menu:<br><span class="hljs-code">    关于: about/</span><br></code></pre></td></tr></table></figure><h4 id="2-1-1-1-增加收藏页面"><a href="#2-1-1-1-增加收藏页面" class="headerlink" title="2.1.1.1 增加收藏页面"></a>2.1.1.1 增加收藏页面</h4><ol><li><p>新增一个收藏页面</p></li><li><p>修改 navbar.styl 文件中的 favorites 展示图标，注意顺序。</p></li><li><p>编辑 favorites&#x2F;index.md 文件</p></li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">### 样机 Mockups<br><br>&lt;div class=&quot;card-quote&quot;&gt;<br><br>![Graphics](/images/logos/lstoreLogo.svg)<br>#### Graphics<br>高质量的样机素材<br>[https://www.ls.graphics](https://www.ls.graphics)<br><br>![sketchsheets](/images/logos/sketchLogo.svg)<br>#### Sketchsheets<br>Sketch 稿件的样机素材<br>[https://sketchsheets.com](https://sketchsheets.com)<br><br>&lt;/div&gt;<br><br></code></pre></td></tr></table></figure><h2 id="2-2-插件"><a href="#2-2-插件" class="headerlink" title="2.2  插件"></a>2.2  插件</h2><h3 id="2-2-1-开启插件"><a href="#2-2-1-开启插件" class="headerlink" title="2.2.1 开启插件"></a>2.2.1 开启插件</h3><h4 id="2-2-1-1-本地检索-hexo-generator-search"><a href="#2-2-1-1-本地检索-hexo-generator-search" class="headerlink" title="2.2.1.1  本地检索 hexo-generator-search"></a>2.2.1.1  本地检索 <a href="https://github.com/wzpan/hexo-generator-search">hexo-generator-search</a></h4><p>1，安装</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">npm install hexo-generator-searchdb --save<br></code></pre></td></tr></table></figure><p>2，配置</p><p>2.1，Hexo 的配置文件 _config.yml 添加插件配置</p><figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 本地搜索</span><br><span class="hljs-attr">search:</span><br>  <span class="hljs-attr">path:</span> <span class="hljs-string">search.xml</span><br>  <span class="hljs-attr">field:</span> <span class="hljs-string">post</span><br>  <span class="hljs-attr">content:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><h4 id="2-2-1-2-博客文章置顶-hexo-generator-index-pin-top"><a href="#2-2-1-2-博客文章置顶-hexo-generator-index-pin-top" class="headerlink" title="2.2.1.2 博客文章置顶 hexo-generator-index-pin-top"></a>2.2.1.2 博客文章置顶 <a href="https://github.com/netcan/hexo-generator-index-pin-top">hexo-generator-index-pin-top</a></h4><p>1，安装</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">npm uninstall hexo-generator-index --save<br>npm install hexo-generator-index-pin-top --save<br></code></pre></td></tr></table></figure><p>2，在需要置顶文章的 Front-matter 区域加上 top: ture， 即可开启文章置顶</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">---<br>title : Ocean 配置<br>top: ture<br>---<br></code></pre></td></tr></table></figure><h3 id="2-2-2-修改配置文件"><a href="#2-2-2-修改配置文件" class="headerlink" title="2.2.2 修改配置文件"></a>2.2.2 修改配置文件</h3><h4 id="2-2-2-1-文章封面图"><a href="#2-2-2-1-文章封面图" class="headerlink" title="2.2.2.1 文章封面图"></a>2.2.2.1 文章封面图</h4><p>1，添加</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">---<br>title:  Ocean 配置<br>photos: [<br>        [&quot;/images/相机.jpg&quot;], // themes/ocean/source/images 目录下<br>        [&quot;img_url&quot;] // 使用 http 链接<br>        ]<br>---<br></code></pre></td></tr></table></figure><p><em>设置 Hexo 博客的封面图，而不是博客的配图</em></p><h4 id="2-2-2-2-Toc-文章目录"><a href="#2-2-2-2-Toc-文章目录" class="headerlink" title="2.2.2.2 Toc 文章目录"></a>2.2.2.2 Toc 文章目录</h4><p>1，配置文件路径为 ocean&#x2F;_config.yml</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs ymal"># Toc 文章目录<br>toc: true<br></code></pre></td></tr></table></figure><p>2，開啓 Toc 后, 在文章 Front-matter 中設置 toc 進行部分關閉。</p><figure class="highlight markdown"><table><tr><td class="code"><pre><code class="hljs markdown">---<br>title: Toc 文章目录<br><span class="hljs-section">toc: false</span><br><span class="hljs-section">---</span><br></code></pre></td></tr></table></figure><p><em>使用 <a href="http://tscanlin.github.io/tocbot/">Tocbot</a> 解析内容中的标题标签（h1~h6）并插入目录。</em>  </p><h4 id="2-2-2-3-修改導航欄圖標"><a href="#2-2-2-3-修改導航欄圖標" class="headerlink" title="2.2.2.3 修改導航欄圖標"></a>2.2.2.3 修改導航欄圖標</h4><p>1，修改主页、相册等图标，需要修改 css 文件，其所在位置在目录 source&#x2F;css&#x2F;_partial&#x2F;navbar.styl 中， 修改时需要注意对应的顺序<br>2，修改 icon，需要替换 themes&#x2F;ocean&#x2F;source&#x2F;favicon.ico 图片文件</p><h4 id="2-2-2-4-刪除鏈接文字的下劃綫"><a href="#2-2-2-4-刪除鏈接文字的下劃綫" class="headerlink" title="2.2.2.4 刪除鏈接文字的下劃綫"></a>2.2.2.4 刪除鏈接文字的下劃綫</h4><p>1，配置文件的路勁為 ocean&#x2F;source&#x2F;css&#x2F;style.styl。</p><figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">a</span><br>  <span class="hljs-attribute">color</span> link-<span class="hljs-attribute">color</span><br>  &amp;<span class="hljs-selector-pseudo">:hover</span><br>    <span class="hljs-attribute">color</span> link-hover-<span class="hljs-attribute">color</span><br>  &amp;<span class="hljs-selector-pseudo">:active</span><br>    <span class="hljs-attribute">color</span> link-active-<span class="hljs-attribute">color</span><br>  &amp;<span class="hljs-selector-class">.disabled</span><br>    <span class="hljs-attribute">color</span> disabled-<span class="hljs-attribute">color</span><br><br>//  为<br><br><span class="hljs-selector-tag">a</span><br>  <span class="hljs-attribute">color</span> link-<span class="hljs-attribute">color</span><br>  <span class="hljs-attribute">text-decoration</span> <span class="hljs-attribute">none</span><br>  &amp;<span class="hljs-selector-pseudo">:hover</span><br>    <span class="hljs-attribute">color</span> link-hover-<span class="hljs-attribute">color</span><br>    <span class="hljs-attribute">text-decoration</span> <span class="hljs-attribute">none</span><br>  &amp;<span class="hljs-selector-pseudo">:active</span><br>    <span class="hljs-attribute">color</span> link-active-<span class="hljs-attribute">color</span><br>  &amp;<span class="hljs-selector-class">.disabled</span><br>    <span class="hljs-attribute">color</span> disabled-<span class="hljs-attribute">color</span><br><br></code></pre></td></tr></table></figure><h4 id="2-2-2-5-配置語言"><a href="#2-2-2-5-配置語言" class="headerlink" title="2.2.2.5 配置語言"></a>2.2.2.5 配置語言</h4><p>1，配置文件的目錄為 _config.yml。</p><ul><li>language 的值为空时默认为 en</li><li>language 的配置文件位置为 themes&#x2F;ocean&#x2F;languages&#x2F;</li></ul><p><em>若本主題的導航文字，需要直接修改主题配置文件（_config.yml）中的 menu</em></p><h4 id="2-2-2-6-取消文章的分享鏈接"><a href="#2-2-2-6-取消文章的分享鏈接" class="headerlink" title="2.2.2.6 取消文章的分享鏈接"></a>2.2.2.6 取消文章的分享鏈接</h4><p>1，配置文件的路勁為 themes\ocean\layout_partial\footer.ejs。注釋以下代碼</p><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 显示分享按钮</span><br><span class="hljs-comment">      &lt;a data-url=&quot;&lt;%- post.permalink %&gt;&quot; data-id=&quot;&lt;%= post._id %&gt;&quot; class=&quot;article-share-link&quot;&gt;</span><br><span class="hljs-comment">        &lt;%= __(&#x27;share&#x27;) %&gt;</span><br><span class="hljs-comment">      &lt;/a&gt;</span><br><span class="hljs-comment">--&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;Ocean 是基于 Hexo 默认主题 landscape 的功能，设计的一款支持移动设备的主题，并且集成了 Gitalk 与 Valine 评论功能。&lt;/p&gt;
&lt;p&gt;如果你喜欢 Ocean 可以从 &lt;a href=&quot;https://github.com/zhwangart/hexo-theme-ocean&quot;&gt;GitHub&lt;/a&gt; 下载，主题默认使用 Logo 是 Hexo 的 Logo，更换 Logo 路径在 ocean&amp;#x2F;source&amp;#x2F;images&amp;#x2F;hexo.svg ，注意它还有一个反色版 hexo-inverted.svg ，如果你更改了文件名，那么还需要在 ocean&amp;#x2F;_config.yml 做对应的修改。&lt;/p&gt;
&lt;p&gt;详细文档见 &lt;a href=&quot;https://zhwangart.com/2018/11/30/Ocean/&quot;&gt;Ocean 文档&lt;/a&gt;，以下是个人的需要的配置&lt;/p&gt;</summary>
    
    
    
    
    <category term="Hexo" scheme="https://blog.lain.buzz/tags/Hexo/"/>
    
    <category term="Ocean" scheme="https://blog.lain.buzz/tags/Ocean/"/>
    
    <category term="Theme" scheme="https://blog.lain.buzz/tags/Theme/"/>
    
    <category term="blog" scheme="https://blog.lain.buzz/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>【Linux】文件管理和帮助命令</title>
    <link href="https://blog.lain.buzz/tech/system_linux%E4%B9%8B%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/"/>
    <id>https://blog.lain.buzz/tech/system_linux%E4%B9%8B%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/</id>
    <published>2020-07-28T07:00:00.000Z</published>
    <updated>2023-05-01T12:48:59.815Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="帮助命令"><a href="#帮助命令" class="headerlink" title="帮助命令"></a>帮助命令</h3><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">man</span><br>man find # 查询命令的说明文档<br>man -f find # 显示更多的信息<br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt;&gt;</span> <br>find (1)             - search for files in a directory hierarchy<br>man -k find # 关键词查找<br></code></pre></td></tr></table></figure><span id="more"></span><h5 id="查找程序的安装路径"><a href="#查找程序的安装路径" class="headerlink" title="查找程序的安装路径"></a>查找程序的安装路径</h5><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">which</span></span><br>which mysql<br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt;&gt;</span><br>/usr/bin/mysql<br></code></pre></td></tr></table></figure><h5 id="查看程序的搜索路径"><a href="#查看程序的搜索路径" class="headerlink" title="查看程序的搜索路径"></a>查看程序的搜索路径</h5><ul><li>当系统中安装了同一软件的多个版本时，不确定使用的是哪个版本时，这个命令就能派上用场</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">whereis</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">whereis mysql</span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt;&gt;</span><br>mysql: /usr/bin/mysql /usr/lib64/mysql /usr/share/mysql /usr/share/man/man1/mysql.1.gz<br></code></pre></td></tr></table></figure><h3 id="文件管理"><a href="#文件管理" class="headerlink" title="文件管理"></a>文件管理</h3><h5 id="创建和删除文件"><a href="#创建和删除文件" class="headerlink" title="创建和删除文件"></a>创建和删除文件</h5><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">创建文件</span><br>mkdir # 创建文件夹文件<br>touch # 创建普通文件<br><span class="hljs-meta prompt_"># </span><span class="language-bash">删除 <span class="hljs-built_in">rm</span></span><br>rm #删除普通文件和空目录文件<br>rm -rf file # 删除非空目录文件<br><span class="hljs-meta prompt_"># </span><span class="language-bash">复制 <span class="hljs-built_in">cp</span></span><br>cp file ./path/ # 复制普通文件<br>cp -r file ./path # 复制目录文件<br><span class="hljs-meta prompt_"># </span><span class="language-bash">删除和移动文件</span><br>mv file # 删除文件<br>mv name newname # 文件重命名<br></code></pre></td></tr></table></figure><h5 id="查看当前目录文件下的文件个数"><a href="#查看当前目录文件下的文件个数" class="headerlink" title="查看当前目录文件下的文件个数"></a>查看当前目录文件下的文件个数</h5><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">find ./ | wc -l<br></code></pre></td></tr></table></figure><h5 id="目录切换"><a href="#目录切换" class="headerlink" title="目录切换"></a>目录切换</h5><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">cd</span></span><br>pwd # 显示当前路径<br>cd # 切换到home目录 或者cd ~<br>cd - # 切换到上一个工作目录<br>cd path # 切换到指定目录<br></code></pre></td></tr></table></figure><h5 id="列出文件"><a href="#列出文件" class="headerlink" title="列出文件"></a>列出文件</h5><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">ls</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">如果不写路径 则表示查看当前目录</span><br>ls path # 查看path路径下的文件<br>ls | cat -n path # 在每项文件前面增加一个编号<br>ls -a path # 查看隐藏的文件<br></code></pre></td></tr></table></figure><h5 id="查找文件"><a href="#查找文件" class="headerlink" title="查找文件"></a>查找文件</h5><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">find 实时查找</span><br>find / -name &#x27;*.o&#x27; # 查找所有以&quot;.o&quot;结尾的文件<br>find ./ -name &quot;core*&quot; | xargs file # 查找以&quot;core&quot;开头文件，并标注文件类型<br>find ./ -name &quot;*.o&quot; -exec rm &#123;&#125; \; # 递归当前目录及子目录并删除所有&quot;.o&quot;文件<br><span class="hljs-meta prompt_"># </span><span class="language-bash">locate 需要定时更新数据库</span><br>locate add # 寻找含有add文件的路径<br><span class="hljs-meta prompt_"># </span><span class="language-bash">centos安装locate</span><br>sudo yum -y install mlocate  # 安装mlocate<br>sudo updatedb # 初始化<br></code></pre></td></tr></table></figure><h5 id="查看文件内容"><a href="#查看文件内容" class="headerlink" title="查看文件内容"></a>查看文件内容</h5><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">cat</span></span><br>cat file # 显示文件内容，显示每行的行号 cat -n file<br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">head</span></span><br>head -2 /path/** # 显示指定路径下所有文件的前两行，若不指定路径则为当前工作路径<br>head -2 /path/file # 显示指定文件的前两行内容<br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">tail</span></span><br>tail -2 /path/file  # 显示文件倒数两行的内容<br>tail -f file # 动态显示当前文件内容<br>tail -fn 200 file # 动态显示最近200行的文件内容<br></code></pre></td></tr></table></figure><h5 id="查找文件内容"><a href="#查找文件内容" class="headerlink" title="查找文件内容"></a>查找文件内容</h5><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">diff</span><br>diff file1 file2 # 比较两个文件的差别<br><span class="hljs-meta prompt_"># </span><span class="language-bash">egrep</span><br>egrep &#x27;xion&#x27; file # 在file文件中查找&quot;xion&quot;<br><br></code></pre></td></tr></table></figure><h5 id="文件的权限修改"><a href="#文件的权限修改" class="headerlink" title="文件的权限修改"></a>文件的权限修改</h5><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">chown</span> 改变文件的拥有者</span><br>chown -R mysql@group /path # 将path文件修改为group组下的mysql用户<br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">chmod</span> 改变文件的读、写、执行权限</span><br>chmod 777 file<br>chmod a+x file # 增加文件的可执行权限<br></code></pre></td></tr></table></figure><h5 id="增加文件别名"><a href="#增加文件别名" class="headerlink" title="增加文件别名"></a>增加文件别名</h5><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">软链接</span><br>ln -s cc ccTo # 删除源文件，另一个将无法使用。cc为源文件<br><span class="hljs-meta prompt_"># </span><span class="language-bash">硬链接</span><br>ln cc ccAotu # 删除其中一个，另一个文件不受影响<br></code></pre></td></tr></table></figure><h5 id="设置命令别名"><a href="#设置命令别名" class="headerlink" title="设置命令别名"></a>设置命令别名</h5><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">alias</span></span><br>alias lsl=&#x27;ls -lrt&#x27;<br>alias lm=&#x27;ls -al | more&#x27;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;帮助命令&quot;&gt;&lt;a href=&quot;#帮助命令&quot; class=&quot;headerlink&quot; title=&quot;帮助命令&quot;&gt;&lt;/a&gt;帮助命令&lt;/h3&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs shell&quot;&gt;&lt;span class=&quot;hljs-meta prompt_&quot;&gt;# &lt;/span&gt;&lt;span class=&quot;language-bash&quot;&gt;man&lt;/span&gt;&lt;br&gt;man find # 查询命令的说明文档&lt;br&gt;man -f find # 显示更多的信息&lt;br&gt;&lt;span class=&quot;hljs-meta prompt_&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;language-bash&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;br&gt;find (1)             - search for files in a directory hierarchy&lt;br&gt;man -k find # 关键词查找&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    
    <category term="浅析" scheme="https://blog.lain.buzz/tags/%E6%B5%85%E6%9E%90/"/>
    
    <category term="linux" scheme="https://blog.lain.buzz/tags/linux/"/>
    
    <category term="system" scheme="https://blog.lain.buzz/tags/system/"/>
    
    <category term="文件管理" scheme="https://blog.lain.buzz/tags/%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://blog.lain.buzz/tech/code_SQL%E5%9F%BA%E7%A1%80-%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5/"/>
    <id>https://blog.lain.buzz/tech/code_SQL%E5%9F%BA%E7%A1%80-%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5/</id>
    <published>2020-07-22T07:24:00.000Z</published>
    <updated>2023-05-01T12:48:59.795Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><h5 id="基本查询语句"><a href="#基本查询语句" class="headerlink" title="基本查询语句"></a>基本查询语句</h5><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- select (列名1, 列名2 或 *) from 表名 where 条件</span><br><span class="hljs-keyword">select</span> order_no, trip_no <span class="hljs-keyword">from</span> trip_order <span class="hljs-keyword">where</span> order_no <span class="hljs-operator">&gt;</span> <span class="hljs-string">&#x27;20191009012100000013&#x27;</span>;<br></code></pre></td></tr></table></figure><span id="more"></span><ul><li>逻辑运算符 如 and、in 等</li></ul><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- select 列名1, 列名2 from 表名 where 条件 (and 或 or 或 in) 条件</span><br><span class="hljs-keyword">select</span> order_no, trip_no, trade_amount <span class="hljs-keyword">from</span> trip_order <span class="hljs-keyword">where</span> order_no <span class="hljs-operator">&gt;</span> <span class="hljs-string">&#x27;20191009012100000013&#x27;</span> <span class="hljs-keyword">and</span> trade_amount <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<br><span class="hljs-keyword">select</span> order_no, trip_no, trade_amount, state <span class="hljs-keyword">from</span> trip_order <span class="hljs-keyword">where</span> state <span class="hljs-operator">=</span> <span class="hljs-number">2</span> <span class="hljs-keyword">or</span> trade_amount <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<br><span class="hljs-keyword">select</span> order_no, trip_no, trade_amount, state <span class="hljs-keyword">from</span> trip_order <span class="hljs-keyword">where</span> order_no <span class="hljs-operator">&gt;</span> <span class="hljs-string">&#x27;2019100901&#x27;</span> <span class="hljs-keyword">and</span> (state <span class="hljs-operator">=</span> <span class="hljs-number">2</span> <span class="hljs-keyword">or</span> trade_amount <span class="hljs-operator">=</span> <span class="hljs-number">100</span>);<br><span class="hljs-comment">-- in</span><br><span class="hljs-keyword">select</span> order_no, trip_no, trade_amount, state <span class="hljs-keyword">from</span> trip_order <span class="hljs-keyword">where</span> state <span class="hljs-keyword">in</span> (<span class="hljs-number">2</span>, <span class="hljs-number">-3</span>);<br><span class="hljs-keyword">select</span> order_no, trip_no, trade_amount, state <span class="hljs-keyword">from</span> trip_order <span class="hljs-keyword">where</span> state <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> (<span class="hljs-number">2</span>, <span class="hljs-number">-3</span>); <span class="hljs-comment">-- 查找不包含 2,3的数据</span><br><span class="hljs-comment">-- like</span><br><span class="hljs-keyword">select</span> order_no, trip_no, trade_amount, state <span class="hljs-keyword">from</span> trip_order <span class="hljs-keyword">where</span> order_no <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;201906%&#x27;</span> <span class="hljs-comment">-- 匹配以201906开头的数据</span><br><span class="hljs-keyword">select</span> order_no, trip_no, trade_amount, state <span class="hljs-keyword">from</span> trip_order <span class="hljs-keyword">where</span> order_no <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;%201906%&#x27;</span> <span class="hljs-comment">-- 匹配中间包含201906的数据</span><br><span class="hljs-keyword">select</span> order_no, trip_no, trade_amount, state <span class="hljs-keyword">from</span> trip_order <span class="hljs-keyword">where</span> order_no <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;%201906&#x27;</span> <span class="hljs-comment">-- 匹配以201906结尾的数据</span><br></code></pre></td></tr></table></figure><ul><li>基本分组语句</li></ul><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- select 列名1 或 from 表名 group by 列名1;</span><br><span class="hljs-keyword">select</span> state <span class="hljs-keyword">from</span> trip_order <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> state;<br><span class="hljs-comment">-- 就结果而言和去重所查询的结果一致 distinct</span><br><span class="hljs-keyword">select</span> <span class="hljs-keyword">distinct</span> state <span class="hljs-keyword">from</span> trip_order;<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 统计每个分组的数据数量, count()</span><br><span class="hljs-keyword">select</span> state, <span class="hljs-built_in">count</span>(<span class="hljs-number">1</span>) <span class="hljs-keyword">from</span> trip_order <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> state;<br><span class="hljs-comment">-- 查看数量为某个区间的分组, having</span><br><span class="hljs-keyword">select</span> state, <span class="hljs-built_in">count</span>(<span class="hljs-number">1</span>) <span class="hljs-keyword">from</span> trip_order <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> state <span class="hljs-keyword">having</span> <span class="hljs-built_in">count</span>(<span class="hljs-number">1</span>) <span class="hljs-operator">&gt;</span> <span class="hljs-number">200</span>;<br></code></pre></td></tr></table></figure><h5 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h5><ul><li>嵌套在另一个查询中的查询<ul><li>放在括号内的查询成为子查询，也被称为内部查询或内部选择</li><li>包含子查询的查询称为外部查询或外部选择</li></ul></li></ul><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- select 列名3 from (select 列名2, 列名3 from 表名 where 条件) 别名 where 条件;</span><br><span class="hljs-comment">-- 一般子查询是跨表查询 本次示例展示的是相同表之间使用子查询</span><br><span class="hljs-keyword">select</span> state, out_order_no <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> order_no, state, out_order_no <span class="hljs-keyword">from</span> trip_order <span class="hljs-keyword">where</span> order_no <span class="hljs-operator">&gt;</span> <span class="hljs-string">&#x27;20191009012100000013&#x27;</span>) t <span class="hljs-keyword">where</span> state <span class="hljs-keyword">in</span> (<span class="hljs-number">2</span>, <span class="hljs-number">3</span>);<br><span class="hljs-keyword">select</span> state, trip_no <span class="hljs-keyword">from</span> trip_order state <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> (<span class="hljs-keyword">select</span> state <span class="hljs-keyword">from</span> trip_order <span class="hljs-keyword">where</span> state <span class="hljs-operator">=</span> <span class="hljs-number">2</span>);<br></code></pre></td></tr></table></figure><h5 id="表连接"><a href="#表连接" class="headerlink" title="表连接"></a>表连接</h5><ul><li>内连接<ul><li>关键词 inner join … on</li><li>只会关联并展示两张表中都存在的数据</li></ul></li></ul><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> tr.id, tr.merchant_no, trq.pos_transaction_bill_no <br><span class="hljs-keyword">from</span> ticket_user_driving_record <span class="hljs-keyword">as</span> tr<br><span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span> ticket_user_driving_record_detail_qrcode <span class="hljs-keyword">as</span> trq <br><span class="hljs-keyword">on</span> tr.id <span class="hljs-operator">=</span> trq.record_id;<br></code></pre></td></tr></table></figure><ul><li>左连接<ul><li>关键词 left join … on</li><li>以主表为主，展示所有主表的行数据，若关联的表没有匹配则展示null</li></ul></li></ul><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> tr.id, tr.merchant_no, trq.pos_transaction_bill_no <br><span class="hljs-keyword">from</span> ticket_user_driving_record <span class="hljs-keyword">as</span> tr<br><span class="hljs-keyword">left</span> <span class="hljs-keyword">join</span> ticket_user_driving_record_detail_qrcode <span class="hljs-keyword">as</span> trq <br><span class="hljs-keyword">on</span> tr.id <span class="hljs-operator">=</span> trq.record_id;<br></code></pre></td></tr></table></figure><ul><li>右连接<ul><li>关键词 right join … on </li><li>和左连接相反，以关联的表为主，会展示所有关联表中的行数据</li></ul></li><li>全外连接<ul><li>关键词 full join …on</li><li>展示全部的行数</li></ul></li><li>多表连接<ul><li>超过两张表的表连接</li></ul></li></ul><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> tr.id, tr.merchant_no, trq.pos_transaction_bill_no <br><span class="hljs-keyword">from</span> ticket_user_driving_record <span class="hljs-keyword">as</span> tr<br><span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span> ticket_user_driving_record_detail_qrcode <span class="hljs-keyword">as</span> trq <br><span class="hljs-keyword">on</span> tr.id <span class="hljs-operator">=</span> trq.record_id<br><span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span> ticket_user_driving_original_record_qrcode <span class="hljs-keyword">as</span> toq<br><span class="hljs-keyword">on</span> tr.id <span class="hljs-operator">=</span> toq.record_id<br></code></pre></td></tr></table></figure><h3 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h3><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- insert into 表名 (列名1, 列名2) values (插入的数据1, 插入的数据2)</span><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> trip_order (state trip_no) <span class="hljs-keyword">values</span> (<span class="hljs-number">3</span>, <span class="hljs-string">&#x27;20191009012100000013&#x27;</span>);<br></code></pre></td></tr></table></figure><h3 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h3><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- update 表名 set 更新的数据 where 条件</span><br><span class="hljs-keyword">update</span> trip_order <span class="hljs-keyword">set</span> state <span class="hljs-operator">=</span> <span class="hljs-number">2</span> <span class="hljs-keyword">where</span> trip_no <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;20191009012100000013&#x27;</span>;<br></code></pre></td></tr></table></figure><h3 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h3><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- delete from 表名 where 条件</span><br><span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> trip_order <span class="hljs-keyword">where</span> trip_no <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;20191009012100000013&#x27;</span>;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;查询&quot;&gt;&lt;a href=&quot;#查询&quot; class=&quot;headerlink&quot; title=&quot;查询&quot;&gt;&lt;/a&gt;查询&lt;/h3&gt;&lt;h5 id=&quot;基本查询语句&quot;&gt;&lt;a href=&quot;#基本查询语句&quot; class=&quot;headerlink&quot; title=&quot;基本查询语句&quot;&gt;&lt;/a&gt;基本查询语句&lt;/h5&gt;&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs sql&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;-- select (列名1, 列名2 或 *) from 表名 where 条件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; order_no, trip_no &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; trip_order &lt;span class=&quot;hljs-keyword&quot;&gt;where&lt;/span&gt; order_no &lt;span class=&quot;hljs-operator&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;#x27;20191009012100000013&amp;#x27;&lt;/span&gt;;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    
    <category term="code" scheme="https://blog.lain.buzz/tags/code/"/>
    
    <category term="SQL" scheme="https://blog.lain.buzz/tags/SQL/"/>
    
    <category term="浅析" scheme="https://blog.lain.buzz/tags/%E6%B5%85%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>枚举类</title>
    <link href="https://blog.lain.buzz/tech/code_Python%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%9E%9A%E4%B8%BE%E7%B1%BB/"/>
    <id>https://blog.lain.buzz/tech/code_Python%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%9E%9A%E4%B8%BE%E7%B1%BB/</id>
    <published>2020-07-15T13:00:00.000Z</published>
    <updated>2023-05-01T12:48:59.795Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h5 id="枚举类的使用"><a href="#枚举类的使用" class="headerlink" title="枚举类的使用"></a>枚举类的使用</h5><ul><li>当需要大量定于变量时，可以使用枚举类(Enum)来实现这个功能<ul><li>当我们定义一个Class类型时，每个常量都是class里面的唯一实例</li><li>方式： Enum(类名, (tuple参数))</li><li>枚举类通过 __ members __ 方法遍历所有的成员</li><li><font color=red>而且 Enum 的成员均为单例（Singleton），并且不可实例化，不可更改</font><span id="more"></span></li></ul></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> enum <span class="hljs-keyword">import</span> Enum<br><br>Month = Enum(<span class="hljs-string">&#x27;MONTH&#x27;</span>,(<span class="hljs-string">&#x27;Jan&#x27;</span>, <span class="hljs-string">&#x27;Feb&#x27;</span>,<span class="hljs-string">&#x27;Mar&#x27;</span>, <span class="hljs-string">&#x27;Apr&#x27;</span>, <span class="hljs-string">&#x27;May&#x27;</span>, <span class="hljs-string">&#x27;Jun&#x27;</span>, <span class="hljs-string">&#x27;Jul&#x27;</span>, <span class="hljs-string">&#x27;Aug&#x27;</span>, <span class="hljs-string">&#x27;Sep&#x27;</span>, <span class="hljs-string">&#x27;Oct&#x27;</span>, <span class="hljs-string">&#x27;Nov&#x27;</span>, <span class="hljs-string">&#x27;Dec&#x27;</span>))<br><br><span class="hljs-keyword">for</span> name, member <span class="hljs-keyword">in</span> Month.__members__.items():<br>    <span class="hljs-comment"># member.value 自动赋给成员的 int 类型的常量， 默认从1开始</span><br>    <span class="hljs-built_in">print</span>(name, <span class="hljs-string">&#x27;---------&#x27;</span>, member, <span class="hljs-string">&#x27;--------&#x27;</span>, member.value)<br>    <br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;\n&#x27;</span>, Month.Jan, <span class="hljs-string">&#x27;\n&#x27;</span>, Month.Nov.value)<br></code></pre></td></tr></table></figure><pre><code>Jan --------- MONTH.Jan -------- 1Feb --------- MONTH.Feb -------- 2Mar --------- MONTH.Mar -------- 3Apr --------- MONTH.Apr -------- 4May --------- MONTH.May -------- 5Jun --------- MONTH.Jun -------- 6Jul --------- MONTH.Jul -------- 7Aug --------- MONTH.Aug -------- 8Sep --------- MONTH.Sep -------- 9Oct --------- MONTH.Oct -------- 10Nov --------- MONTH.Nov -------- 11Dec --------- MONTH.Dec -------- 12 MONTH.Jan  11</code></pre><h5 id="自定义类型的枚举"><a href="#自定义类型的枚举" class="headerlink" title="自定义类型的枚举"></a>自定义类型的枚举</h5><ul><li>枚举模块定义了具有迭代和比较功能的枚举类型</li><li>可以用来为值创建明确定义的符号，而不是使用具体的整数或者字符串</li><li>在自定义类型的枚举中，可以使用装饰器@unique来检查有没有重复值</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> enum <span class="hljs-keyword">import</span> Enum, unique<br><br><span class="hljs-comment"># @unqiue 装饰器可以帮助我们用来检查有没有重复值，可选</span><br><span class="hljs-meta">@unique</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Month</span>(<span class="hljs-title class_ inherited__">Enum</span>):<br>    Jan = <span class="hljs-number">1</span><br>    Feb = <span class="hljs-string">&#x27;Ⅱ&#x27;</span><br>    Mar = <span class="hljs-string">&#x27;1&#x27;</span><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-built_in">print</span>(Month.Jan, <span class="hljs-string">&#x27;---&#x27;</span>, Month.Jan.name, <span class="hljs-string">&#x27;---&#x27;</span>, Month.Jan.value)<br>    <br>    <span class="hljs-keyword">for</span> name, member <span class="hljs-keyword">in</span> Month.__members__.items():<br>    <span class="hljs-comment"># member.value 自动赋给成员的 int 类型的常量， 默认从1开始</span><br>        <span class="hljs-built_in">print</span>(name, <span class="hljs-string">&#x27;---------&#x27;</span>, member, <span class="hljs-string">&#x27;--------&#x27;</span>, member.value)<br>    <br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(Month.Jan.value))<br></code></pre></td></tr></table></figure><pre><code>Month.Jan --- Jan --- 1Jan --------- Month.Jan -------- 1Feb --------- Month.Feb -------- ⅡMar --------- Month.Mar -------- 1&lt;class &#39;int&#39;&gt;</code></pre><h5 id="枚举的比较"><a href="#枚举的比较" class="headerlink" title="枚举的比较"></a>枚举的比较</h5><ul><li>枚举成员不是有序的即<ul><li>只能通过标识和相等性进行比较</li><li>如 &#x3D;&#x3D; 和 is</li></ul></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">Twowater = Month.Jan<br>XiongJum = Month.Mar<br><br><span class="hljs-built_in">print</span>(Twowater == XiongJum, Twowater == Month.Jan)<br><span class="hljs-built_in">print</span>(Twowater <span class="hljs-keyword">is</span> XiongJum, Twowater <span class="hljs-keyword">is</span> Month.Jan)<br><br><span class="hljs-keyword">try</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;\n&#x27;</span>.join(<span class="hljs-string">&#x27; &#x27;</span> + s.name <span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> <span class="hljs-built_in">sorted</span>(Month)))<br><span class="hljs-keyword">except</span> TypeError <span class="hljs-keyword">as</span> err:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27; Error: &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(err))<br></code></pre></td></tr></table></figure><pre><code>False TrueFalse True Error: &#39;&lt;&#39; not supported between instances of &#39;Month&#39; and &#39;Month&#39;</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">+ 可以使用 IntEnum 类进行枚举，进而支持比较功能<br>    + 但仅支持<span class="hljs-built_in">int</span>类型<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> enum <span class="hljs-keyword">import</span> IntEnum<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span>(<span class="hljs-title class_ inherited__">IntEnum</span>):<br>    Xiongjum = <span class="hljs-number">12</span><br>    Jumxiong = <span class="hljs-number">18</span><br>    Onetwoone = <span class="hljs-number">24</span><br><br><span class="hljs-keyword">try</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;\n&#x27;</span>.join(<span class="hljs-string">&#x27; &#x27;</span> + s.name <span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> <span class="hljs-built_in">sorted</span>(User)))<br><span class="hljs-keyword">except</span> TypeError <span class="hljs-keyword">as</span> err:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27; Error: &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(err))<br></code></pre></td></tr></table></figure><pre><code> Xiongjum Jumxiong Onetwoone</code></pre>]]></content>
    
    
    <summary type="html">&lt;h5 id=&quot;枚举类的使用&quot;&gt;&lt;a href=&quot;#枚举类的使用&quot; class=&quot;headerlink&quot; title=&quot;枚举类的使用&quot;&gt;&lt;/a&gt;枚举类的使用&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;当需要大量定于变量时，可以使用枚举类(Enum)来实现这个功能&lt;ul&gt;
&lt;li&gt;当我们定义一个Class类型时，每个常量都是class里面的唯一实例&lt;/li&gt;
&lt;li&gt;方式： Enum(类名, (tuple参数))&lt;/li&gt;
&lt;li&gt;枚举类通过 __ members __ 方法遍历所有的成员&lt;/li&gt;
&lt;li&gt;&lt;font color=red&gt;而且 Enum 的成员均为单例（Singleton），并且不可实例化，不可更改&lt;/font&gt;</summary>
    
    
    
    
    <category term="code" scheme="https://blog.lain.buzz/tags/code/"/>
    
    <category term="python" scheme="https://blog.lain.buzz/tags/python/"/>
    
    <category term="枚举类" scheme="https://blog.lain.buzz/tags/%E6%9E%9A%E4%B8%BE%E7%B1%BB/"/>
    
  </entry>
  
  <entry>
    <title>【浅析】Magic Method</title>
    <link href="https://blog.lain.buzz/tech/code_Python-for-MagicMethod/"/>
    <id>https://blog.lain.buzz/tech/code_Python-for-MagicMethod/</id>
    <published>2020-07-15T03:00:00.000Z</published>
    <updated>2023-05-01T12:48:59.795Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h5 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h5><p>本文基本摘自 两点水 的<a href="">草根学Python</a>,本文仅作记录备份或者本人查阅方便，</p><span id="more"></span><h5 id="了解Magic-Method-魔术方法"><a href="#了解Magic-Method-魔术方法" class="headerlink" title="了解Magic Method(魔术方法)"></a>了解Magic Method(魔术方法)</h5><ul><li>双下划线包起来的方法，都统称为”魔术方法”，如”<strong>init</strong>“</li><li>使用魔术方法可以构造出优美的代码，将复杂的逻辑封装成简单的方法</li><li>使用dir()列出类中所有的魔术方法，如下例</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">pass</span><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">dir</span>(User()))<br></code></pre></td></tr></table></figure><pre><code>[&#39;__class__&#39;, &#39;__delattr__&#39;, &#39;__dict__&#39;, &#39;__dir__&#39;, &#39;__doc__&#39;, &#39;__eq__&#39;, &#39;__format__&#39;, &#39;__ge__&#39;, &#39;__getattribute__&#39;, &#39;__gt__&#39;, &#39;__hash__&#39;, &#39;__init__&#39;, &#39;__init_subclass__&#39;, &#39;__le__&#39;, &#39;__lt__&#39;, &#39;__module__&#39;, &#39;__ne__&#39;, &#39;__new__&#39;, &#39;__reduce__&#39;, &#39;__reduce_ex__&#39;, &#39;__repr__&#39;, &#39;__setattr__&#39;, &#39;__sizeof__&#39;, &#39;__str__&#39;, &#39;__subclasshook__&#39;, &#39;__weakref__&#39;]</code></pre><h5 id="构造-new-和初始化-init"><a href="#构造-new-和初始化-init" class="headerlink" title="构造(new)和初始化(init)"></a>构造(<strong>new</strong>)和初始化(<strong>init</strong>)</h5><ul><li>实际上创建类的过程是分为两步的，一步是创建类的对象，还有一部就是对类进行初始化</li><li>下方的例子是对类进行初始化操作</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, age</span>):<br>        self.name = name<br>        self.age = age<br>user = User(<span class="hljs-string">&#x27;XiongJum&#x27;</span>, <span class="hljs-number">24</span>)<br></code></pre></td></tr></table></figure><ul><li><strong>new</strong> 是用来创建类并返回这个类的实例，而 <strong>init</strong> 只是将传入的参数来初始化该实例</li><li><strong>new</strong> 在创建一个实例的过程中必定会被调用， 但 <strong>init</strong> 就不一定</li><li>如通过 pickle.load 的方式反序化一个实例时就不会调用 <strong>init</strong> 方法 <font color=red>反序列化？</font></li><li>具体示例如下</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__new__</span>(<span class="hljs-params">cls, *args, **kwargs</span>):<br>        <span class="hljs-comment"># 打印 __new__ 方法中的相关信息</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;调用了 def __new__ 方法&#x27;</span>)<br>        <span class="hljs-built_in">print</span>(args)<br>        <span class="hljs-comment"># 最后返回父类的方法</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>(User, cls).__new__(cls)<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, age</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;调用了 def __init__ 方法&quot;</span>)<br>        self.name = name<br>        self.age = age<br>        <br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    user = User(<span class="hljs-string">&#x27;XiongJum&#x27;</span>, <span class="hljs-number">23</span>)<br></code></pre></td></tr></table></figure><pre><code>调用了 def __new__ 方法(&#39;XiongJum&#39;, 23)调用了 def __init__ 方法</code></pre><ul><li>通过上图示例可得知，创建一个类，先是调用了 <strong>new</strong> 方法来创建一个对象，把参数传给 __init__，并进行实例化</li><li>但是在实际的开发中，很少会用到__new__ 方法，除非希望能够控制类的创建。</li></ul><h5 id="属性的访问控制"><a href="#属性的访问控制" class="headerlink" title="属性的访问控制"></a>属性的访问控制</h5><ul><li>_<em>getattr</em>_(self, name): <ul><li>定义了试图访问不存在的属性时的行为</li><li>所以重载该方法可以实现捕获错误拼写然后进行重定向，或者对一些废弃的属性进行警告</li></ul></li><li>_<em>setattr</em>_(self, name, value):<ul><li>定义了对属性进行赋值和修改操作时的行为。</li><li>不管对象的某个属性是否存在，都允许为该属性进行赋值(如下例的attr1)，但要避免”无限递归”的错误</li></ul></li><li>_<em>delattr</em>_(self, name):<ul><li><strong>delattr</strong> 与 <strong>setattr</strong> 很像，但它只定义的时你删除属性时的行为</li><li>和 <strong>setattr</strong> 一样，要避免”无限递归”的错误</li></ul></li><li>_<em>getattribute</em>_(self, name):<ul><li>定义了你的属性被访问时的行为，相比与只有该属性不存在时才会起作用的 _<em>getattr__，在支持 <strong>getattribute</strong> 的Python版本中，调用 _<em>getattr</em></em> 前必定会调用 __getattribute__。</li><li>如果在 <strong>getattribute</strong>(self, name) 方法下存在通过self.name 访问属性, 则会出现无限递归错误，</li><li>所以和 <strong>setattr</strong> 一样，要避免”无限递归”的错误</li></ul></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># def __setattr__(self, name, value):</span><br><span class="hljs-comment">#     self.name = value</span><br>    <br><span class="hljs-comment"># def __setattr__(self, name, value):</span><br><span class="hljs-comment">#     self.__dict__[name] = value</span><br>    <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__getattr__</span>(<span class="hljs-params">self, name</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;调用了 __getattr__ 方法&quot;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>(User, self).__getattr__(name)<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__setattr__</span>(<span class="hljs-params">self, name, value</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;调用了 __setattr__ 方法&quot;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>(User, self).__setattr__(name, value)<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__delattr__</span>(<span class="hljs-params">self, name</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;调用了 __delattr__ 方法&quot;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>(User, self).__delattr__(name)<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__getattribute__</span>(<span class="hljs-params">self, name</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;调用了 __getattribute__ 方法&quot;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>(User, self).__getattribute__(name)<br>    <br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    user = User()<br>    <span class="hljs-comment"># 设置属性值，会调用 __setattr__</span><br>    user.attr1 = <span class="hljs-literal">True</span><br>    <span class="hljs-comment"># 属性存在，只有 __getattribute__ 调用</span><br>    user.attr1<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-comment"># 属性不存在 先调用 __getattribute__，后调用 __getattr__</span><br>        user.attr2<br>    <span class="hljs-keyword">except</span> AttributeError:<br>        <span class="hljs-keyword">pass</span><br>    <span class="hljs-comment"># 调用 __delattr__</span><br>    <span class="hljs-keyword">del</span> user.attr1<br></code></pre></td></tr></table></figure><pre><code>调用了 __setattr__ 方法调用了 __getattribute__ 方法调用了 __getattribute__ 方法调用了 __getattr__ 方法调用了 __delattr__ 方法</code></pre><h5 id="对象的描述器"><a href="#对象的描述器" class="headerlink" title="对象的描述器"></a>对象的描述器</h5><ul><li>定义和简介<ul><li>一般地，一个描述器是一个包含”绑定行为”的对象,对其属性的访问被描述器协议中定义的方法覆盖。</li><li>这些方法有: <strong>get</strong>(), <strong>set</strong>(), <strong>delete</strong>().</li><li>如果某个对象中定义了这些方法中的任意一个，那么这个对象就可以被称为一个描述器</li><li><font color=red>下例中 MyClass 是如何传入值的？</font></li></ul></li><li>描述器协议<ul><li>descr.<strong>get</strong>(self, obj, type&#x3D;None) –&gt; value</li><li>descr.<strong>set</strong>(self, obj, value) –&gt; None</li><li>descr.<strong>delete</strong>(self, obj) –&gt;None</li><li>定义这些方法中的任何一个对象被视为描述器，并在被作为属性时覆盖其默认行为</li></ul></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name=<span class="hljs-string">&#x27;XiongJum&#x27;</span>, sex=<span class="hljs-string">&#x27;男&#x27;</span></span>):<br>        self.sex = sex<br>        self.name = name<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__get__</span>(<span class="hljs-params">self, obj, objtype</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;获取 name 的值&#x27;</span>)<br>        <span class="hljs-keyword">return</span> self.name<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__set__</span>(<span class="hljs-params">self, obj, val</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;设置 name 的值&#x27;</span>)<br>        self.name = val<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyClass</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    x = User(<span class="hljs-string">&#x27;XiongJum&#x27;</span>, <span class="hljs-string">&#x27;男&#x27;</span>)<br>    y = <span class="hljs-number">5</span><br>    <br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    m = MyClass()<br>    <span class="hljs-built_in">print</span>(m.x, <span class="hljs-string">&#x27;\n&#x27;</span>)<br>    <br>    m.x = <span class="hljs-string">&#x27;酒明&#x27;</span><br>    <span class="hljs-built_in">print</span>(m.x, <span class="hljs-string">&#x27;\n&#x27;</span>)<br>    <br>    <span class="hljs-built_in">print</span>(m.x, <span class="hljs-string">&#x27;\n&#x27;</span>)<br>    <br>    <span class="hljs-built_in">print</span>(m.y)<br></code></pre></td></tr></table></figure><pre><code>获取 name 的值XiongJum 设置 name 的值获取 name 的值酒明 获取 name 的值酒明 5</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, value=<span class="hljs-number">0.0</span></span>):<br>        self.value = <span class="hljs-built_in">float</span>(value) <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__get__</span>(<span class="hljs-params">self, instance, owner</span>):<br>        <span class="hljs-keyword">return</span> self.value<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__set__</span>(<span class="hljs-params">self, instance, value</span>):<br>        self.value = <span class="hljs-built_in">float</span>(value)<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dis</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    user = User()<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br><br>    d = Dis()<br>    <span class="hljs-built_in">print</span>(d.user)<br></code></pre></td></tr></table></figure><h5 id="自定义容器"><a href="#自定义容器" class="headerlink" title="自定义容器"></a>自定义容器</h5><ul><li>常见的容器类型<ul><li>可变容器：dict，list</li><li>不可变容器：tuple， string</li></ul></li><li>可变容器和不可变容器的区别<ul><li>不可变容器一旦赋值后，就无法对某个元素进行修改</li><li>只能重新赋值或者重新覆盖全部的元素</li></ul></li><li>自定义容器<ul><li>自定义不可变容器类型： 需要定义 ‘_<em>len</em><em>‘ 和 ‘_<em>getitem</em></em>‘ 方法</li><li>自定义可变类型容器： 在不可以容器的基础上，增加定义 ‘_<em>setitem</em><em>‘ 和 ‘_<em>delitem</em></em>‘</li><li>自定义的数据类型需要迭代：需要定义 ‘_<em>iter</em>_’</li><li>返回自定义容器的长度：需要实现 ‘_<em>len</em>_’(self)</li><li>自定义容器可以调用 self(key)，如果 key 类型错误，抛出 TypeError, 如果没法返回 key 对应的数字时，则应该抛出 ValueError：<br>需要实现 ‘_<em>getitem</em>_(self, key)’</li><li>当执行 self[key] &#x3D; value 时 ： 调用 ‘_<em>setitem</em>_(self, key, value)’ 方法</li><li>当执行 del self[key] 方法：调用的方法时 ‘_<em>delitem</em>_’(self, key)</li><li>当你想你的容器可以执行 for x in container：或者使用 iter(container) 时：需实现 ‘_<em>iter</em>_(self)’,该方法返回的是一个迭代器</li></ul></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">FunctionalList</span>:<br>    <span class="hljs-string">&#x27;&#x27;&#x27;实现内置类型list的功能，并丰富了一些其余的方法：head, init, last, drop, take&#x27;&#x27;&#x27;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, values=<span class="hljs-literal">None</span></span>):<br>        <span class="hljs-keyword">if</span> values <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            self.values = []<br>        <span class="hljs-keyword">else</span>:<br>            self.values = values<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__len__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(self.values)<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__getitem__</span>(<span class="hljs-params">self, key</span>):<br>        <span class="hljs-keyword">return</span> self.values[key]<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__setitem__</span>(<span class="hljs-params">self, key, value</span>):<br>        self.values[key] = value<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__delitem__</span>(<span class="hljs-params">self, key</span>):<br>        <span class="hljs-keyword">del</span> self.values[key]<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__iter__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">iter</span>(self.values)<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__reversed__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> FunctionalList(<span class="hljs-built_in">reversed</span>(self.values))<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">append</span>(<span class="hljs-params">self, value</span>):<br>        self.values.append(value)<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">head</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-comment"># 获取第一个元素</span><br>        <span class="hljs-keyword">return</span> self.values[<span class="hljs-number">0</span>]<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">init</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-comment"># 获取最后一个元素之外的所有元素</span><br>        <span class="hljs-keyword">return</span> self.values[:-<span class="hljs-number">1</span>]<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">last</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-comment"># 获取最后一个元素</span><br>        <span class="hljs-keyword">return</span> self.values[-<span class="hljs-number">1</span>]<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">drop</span>(<span class="hljs-params">self, n</span>):<br>        <span class="hljs-comment"># 获取第n个元素之后的元素</span><br>        <span class="hljs-keyword">return</span> self.values[n:]<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">take</span>(<span class="hljs-params">self, n</span>):<br>        <span class="hljs-comment"># 获取第n个元素之前的元素</span><br>        <span class="hljs-keyword">return</span> self.values[:n]<br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    num = FunctionalList([<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>])<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(num), num[<span class="hljs-number">0</span>])<br>    <span class="hljs-built_in">print</span>(num.head(), num.init(), num.last(), num.init(), num.drop(<span class="hljs-number">2</span>), num.take(<span class="hljs-number">1</span>))<br></code></pre></td></tr></table></figure><pre><code>4 00 [0, 2, 4] 5 [0, 2, 4] [4, 5] [0]</code></pre><h5 id="运算符相关的魔术方法"><a href="#运算符相关的魔术方法" class="headerlink" title="运算符相关的魔术方法"></a>运算符相关的魔术方法</h5><ul><li>比较运算符<ul><li>__ cmp __(self, other). </li><li>__ eq __(self, other)：定义了比较操作符 &#x3D;&#x3D; 的行为</li><li>__ ne __(self, other)：定义了比较操作符 !&#x3D; 的行为</li><li>__ it __(self, other)：定义了比较操作符 &lt;  的行为</li><li>__ gt __(self, other)：定义了比较操作符 &gt;  的行为</li><li>__ le __(self, other)：定义了比较操作符 &lt;&#x3D; 的行为</li><li>__ ge __(self, other)：定义了比较操作符 &gt;&#x3D; 的行为</li></ul></li><li>算数运算符<ul><li>__ add __(self, other)：实现加法运算</li><li>__ sub __(self, other)：实现减法运算</li><li>__ mul __(self, other)：实现乘法运算</li><li>__ floordiv __(self, other)：实现&#x2F;&#x2F;运算</li><li>__ div __(self, other)： python3中已废弃</li><li>__ truediv __(self, other)：</li><li>__ mod __(self, other)：实现取余运算</li><li>__ divmod __(self, other)：实现 divmod() 内建函数</li><li>__ pow __(self, other)：实现 **&#x2F;‘N’ 次方操作</li><li>__ lshift __(self, other)：实现位&#x2F;&lt;’&lt;’操作</li><li>__ rshift __(self, other)：实现位&#x2F;‘&gt;’&gt;操作</li><li>__ and __(self, other)：实现位&#x2F;‘&amp;’操作</li><li>__ or __(self, other)：实现位&#x2F;‘&#96;’操作</li><li>__ xor __(self, other)：实现位&#x2F;‘^’操作</li></ul></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Number</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-string">&#x27;&#x27;&#x27;比较运算符相关的魔术方法&#x27;&#x27;&#x27;</span><br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, value</span>):<br>        self.value = value<br>        <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__eq__</span>(<span class="hljs-params">self, other</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;__eq__&#x27;</span>)<br>        <span class="hljs-keyword">return</span> self.value == other.value<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__ne__</span>(<span class="hljs-params">self, other</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;__ne__&#x27;</span>)<br>        <span class="hljs-keyword">return</span> self.value != other.value<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__it__</span>(<span class="hljs-params">self, other</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;__it__&#x27;</span>)<br>        <span class="hljs-keyword">return</span> self.value &lt; other.value<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__gt__</span>(<span class="hljs-params">self, other</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;__gt__&#x27;</span>)<br>        <span class="hljs-keyword">return</span> self.value &gt; other.value<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__le__</span>(<span class="hljs-params">self, other</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;__le__&#x27;</span>)<br>        <span class="hljs-keyword">return</span> self.value &lt;= other.value<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__ge__</span>(<span class="hljs-params">self, other</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;__ge__&#x27;</span>)<br>        <span class="hljs-keyword">return</span> self.value &gt;= other.value<br>    <br>    <span class="hljs-string">&#x27;&#x27;&#x27;算数运算符像概念的魔术方法&#x27;&#x27;&#x27;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__add__</span>(<span class="hljs-params">self, other</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;__add__&#x27;</span>)<br>        <span class="hljs-keyword">return</span> self.value + other.value<br>    <br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    num1 = Number(<span class="hljs-number">2</span>)<br>    num2 = Number(<span class="hljs-number">3</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;num1 == num2 ? --&gt; &#123;&#125;\n&#x27;</span>.<span class="hljs-built_in">format</span>(num1 == num2))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;num1 != num2 ? --&gt; &#123;&#125;\n&#x27;</span>.<span class="hljs-built_in">format</span>(num1 != num2))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;num1 &lt;  num2 ? --&gt; &#123;&#125;\n&#x27;</span>.<span class="hljs-built_in">format</span>(num1 &lt; num2))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;num1 &gt;  num2 ? --&gt; &#123;&#125;\n&#x27;</span>.<span class="hljs-built_in">format</span>(num1 &gt; num2))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;num1 &lt;= num2 ? --&gt; &#123;&#125;\n&#x27;</span>.<span class="hljs-built_in">format</span>(num1 &lt;= num2))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;num1 &gt;= num2 ? --&gt; &#123;&#125;\n&#x27;</span>.<span class="hljs-built_in">format</span>(num1 &gt;= num2))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;num1 + num2 ? --&gt; &#123;&#125;\n&#x27;</span>.<span class="hljs-built_in">format</span>(num1 + num2))<br>    <br></code></pre></td></tr></table></figure><pre><code>__eq__num1 == num2 ? --&gt; False__ne__num1 != num2 ? --&gt; True__gt__num1 &lt;  num2 ? --&gt; True__gt__num1 &gt;  num2 ? --&gt; False__le__num1 &lt;= num2 ? --&gt; True__ge__num1 &gt;= num2 ? --&gt; False__add__num1 + num2 ? --&gt; 5</code></pre>]]></content>
    
    
    <summary type="html">&lt;h5 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h5&gt;&lt;p&gt;本文基本摘自 两点水 的&lt;a href=&quot;&quot;&gt;草根学Python&lt;/a&gt;,本文仅作记录备份或者本人查阅方便，&lt;/p&gt;</summary>
    
    
    
    
    <category term="code" scheme="https://blog.lain.buzz/tags/code/"/>
    
    <category term="python" scheme="https://blog.lain.buzz/tags/python/"/>
    
    <category term="Magic Method" scheme="https://blog.lain.buzz/tags/Magic-Method/"/>
    
    <category term="描述器" scheme="https://blog.lain.buzz/tags/%E6%8F%8F%E8%BF%B0%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>【浅析】python的多态</title>
    <link href="https://blog.lain.buzz/tech/code_Python%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%A4%9A%E6%80%81/"/>
    <id>https://blog.lain.buzz/tech/code_Python%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%A4%9A%E6%80%81/</id>
    <published>2020-07-10T08:00:00.000Z</published>
    <updated>2023-05-01T12:48:59.795Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h5 id="Ⅰ，理解"><a href="#Ⅰ，理解" class="headerlink" title="Ⅰ，理解"></a>Ⅰ，理解</h5><ul><li>指对不同类型的变量进行操作，根据对象（或类）类型的不同而表现出不同的行为</li></ul><h5 id="Ⅱ，常用的多态"><a href="#Ⅱ，常用的多态" class="headerlink" title="Ⅱ，常用的多态"></a>Ⅱ，常用的多态</h5><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(<span class="hljs-number">1</span>+<span class="hljs-number">2</span>)<br><span class="hljs-number">3</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;1&#x27;</span>+<span class="hljs-string">&#x27;2&#x27;</span>)<br><span class="hljs-string">&#x27;12&#x27;</span><br></code></pre></td></tr></table></figure><ul><li>不同的对象（或类）调用‘’+”，“+”会做出不同的响应</li></ul><span id="more"></span><h5 id="Ⅲ，对象所属的类之间有继承关系"><a href="#Ⅲ，对象所属的类之间有继承关系" class="headerlink" title="Ⅲ，对象所属的类之间有继承关系"></a>Ⅲ，对象所属的类之间有继承关系</h5><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name</span>):<br>        self.name = name<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">printUser</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;你好！&#x27;</span> + self.name)<br>        <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">UserVip</span>(<span class="hljs-title class_ inherited__">User</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">printUser</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;你好！尊敬的会员用户&#x27;</span> + self.name)<br>        <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">UserGeneral</span>(<span class="hljs-title class_ inherited__">User</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">printUser</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;你好！尊敬的用户&#x27;</span> + self.name)<br>        <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">printUserInfo</span>(<span class="hljs-params">user</span>):<br>    user.printUser()<br>    <br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    <span class="hljs-comment"># 实例化User类</span><br>    user = User(<span class="hljs-string">&#x27;121&#x27;</span>)<br>    printUserInfo(user)<br>    <span class="hljs-comment"># 实例化Vip类</span><br>    userVip = UserVip(<span class="hljs-string">&#x27;xiongJum&#x27;</span>)<br>    printUserInfo(userVip)<br>    <span class="hljs-comment"># 实例化General类</span><br>    userGeneral = UserGeneral(<span class="hljs-string">&#x27;酒明&#x27;</span>)<br>    printUserInfo(userGeneral)<br>    <br>        <br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">你好！<span class="hljs-number">121</span><br>你好！尊敬的会员用户xiongJum<br>你好！尊敬的用户酒明<br></code></pre></td></tr></table></figure><h5 id="Ⅳ，对象所属的类之间没有继承关系"><a href="#Ⅳ，对象所属的类之间没有继承关系" class="headerlink" title="Ⅳ，对象所属的类之间没有继承关系"></a>Ⅳ，对象所属的类之间没有继承关系</h5><ul><li>调用同一个函数，传入不同的参数，以达到不同的功能</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Duck</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">fly</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;鸭子沿着地面飞起来了&#x27;</span>)<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Swan</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">fly</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;天鹅飞越了喜马拉雅山的最高峰&#x27;</span>)<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Plane</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">fly</span>(<span class="hljs-params">slef</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;space X 回收成功&#x27;</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">fly</span>(<span class="hljs-params">vehicle</span>):<br>    vehicle.fly()<br>    <br>duck = Duck()<br>fly(duck)<br>swan = Swan()<br>fly(swan)<br>plane = Plane()<br>fly(plane)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">鸭子沿着地面飞起来了<br>天鹅飞越了喜马拉雅山的最高峰<br>space X 回收成功<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h5 id=&quot;Ⅰ，理解&quot;&gt;&lt;a href=&quot;#Ⅰ，理解&quot; class=&quot;headerlink&quot; title=&quot;Ⅰ，理解&quot;&gt;&lt;/a&gt;Ⅰ，理解&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;指对不同类型的变量进行操作，根据对象（或类）类型的不同而表现出不同的行为&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;Ⅱ，常用的多态&quot;&gt;&lt;a href=&quot;#Ⅱ，常用的多态&quot; class=&quot;headerlink&quot; title=&quot;Ⅱ，常用的多态&quot;&gt;&lt;/a&gt;Ⅱ，常用的多态&lt;/h5&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs python&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;+&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;)&lt;br&gt;&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&amp;#x27;1&amp;#x27;&lt;/span&gt;+&lt;span class=&quot;hljs-string&quot;&gt;&amp;#x27;2&amp;#x27;&lt;/span&gt;)&lt;br&gt;&lt;span class=&quot;hljs-string&quot;&gt;&amp;#x27;12&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;不同的对象（或类）调用‘’+”，“+”会做出不同的响应&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    
    <category term="code" scheme="https://blog.lain.buzz/tags/code/"/>
    
    <category term="python" scheme="https://blog.lain.buzz/tags/python/"/>
    
    <category term="多态" scheme="https://blog.lain.buzz/tags/%E5%A4%9A%E6%80%81/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式</title>
    <link href="https://blog.lain.buzz/tech/code_%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>https://blog.lain.buzz/tech/code_%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</id>
    <published>2020-07-05T16:00:00.000Z</published>
    <updated>2023-05-01T12:48:59.814Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h5 id="初识正则表达式"><a href="#初识正则表达式" class="headerlink" title="初识正则表达式"></a>初识正则表达式</h5><ul><li>使用python的内置函数</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 设置一个常量</span><br>name = <span class="hljs-string">&#x27;XiongJum|酒明|JumXiong|初学者&#x27;</span><br><br><span class="hljs-comment"># 判断是否有字符串XiongJum</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;是否含有XiongJum这个字符串：&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(name.index(<span class="hljs-string">&#x27;XiongJum&#x27;</span>) &lt; <span class="hljs-number">1</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;是否含有XiongJum这个字符串：&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-string">&#x27;XiongJum&#x27;</span> <span class="hljs-keyword">in</span> name))<br></code></pre></td></tr></table></figure><pre><code>是否含有XiongJum这个字符串：True是否含有XiongJum这个字符串：True</code></pre><span id="more"></span><ul><li>初识正则表达式re<ul><li>Python内置函数能简单解决的事情，就没有必要使用正则表达式，如下例</li></ul></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> re<br><br>findall = re.findall(<span class="hljs-string">&#x27;Jum&#x27;</span>, name)<br><span class="hljs-built_in">print</span>(findall)<br><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(findall) &gt; <span class="hljs-number">0</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;name含有Jum这个字符串&#x27;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;name不含有Jum这个字符串&#x27;</span>)<br></code></pre></td></tr></table></figure><pre><code>[&#39;Jum&#39;, &#39;Jum&#39;]name含有Jum这个字符串</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 选择 name 里面的所有小写英文字母</span><br><br>re_findall = re.findall(<span class="hljs-string">&#x27;[a-z]&#x27;</span>, name)<br><span class="hljs-built_in">print</span>(re_findall)<br></code></pre></td></tr></table></figure><pre><code>[&#39;i&#39;, &#39;o&#39;, &#39;n&#39;, &#39;g&#39;, &#39;u&#39;, &#39;m&#39;, &#39;u&#39;, &#39;m&#39;, &#39;i&#39;, &#39;o&#39;, &#39;n&#39;, &#39;g&#39;]</code></pre><h5 id="字符集"><a href="#字符集" class="headerlink" title="字符集"></a>字符集</h5><ul><li>字符集是由一对方括号”[]”括起来的字符集合，使用字符集合可以匹配多个字符中的一个<ul><li>如 C[ET]O,匹配到为CEO或CTO</li><li>[0-9a-fA-F]，匹配单个的十六进制数字</li></ul></li><li>字符和范围定义的先后循序对匹配的结果是没有任何影响的</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">a = <span class="hljs-string">&#x27;uav,ubv,ucv,ucv,uov,uzb&#x27;</span><br><br><span class="hljs-comment"># 取&#x27;u&#x27; 和&#x27;v&#x27;中间为‘a’或‘b’的字符</span><br>findbat = re.findall(<span class="hljs-string">&#x27;u[ab]v&#x27;</span>, a)<br><span class="hljs-built_in">print</span>(findbat)<br><br><span class="hljs-comment"># 如果是连续的字符，可以使用-代替</span><br><span class="hljs-comment"># 取&#x27;u&#x27; 和&#x27;v&#x27;中间为‘a’至‘b’的字符</span><br>findall = re.findall(<span class="hljs-string">&#x27;u[a-c]v&#x27;</span>, a)<br><span class="hljs-built_in">print</span>(findall)<br><br><span class="hljs-comment"># [^string]为取反字符集</span><br><span class="hljs-comment"># 取&#x27;u&#x27; 和&#x27;v&#x27;中间不为‘a’或‘b’的字符</span><br>findall = re.findall(<span class="hljs-string">&#x27;u[^ab]&#x27;</span>, a)<br><span class="hljs-built_in">print</span>(findall)<br></code></pre></td></tr></table></figure><pre><code>[&#39;uav&#39;, &#39;ubv&#39;][&#39;uav&#39;, &#39;ubv&#39;, &#39;ucv&#39;, &#39;ucv&#39;][&#39;uc&#39;, &#39;uc&#39;, &#39;uo&#39;, &#39;uz&#39;]</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">num = <span class="hljs-string">&#x27;171-2119-2606-A4-A5&amp;A6&#x27;</span><br><br><span class="hljs-comment"># 概括字符集</span><br><br><span class="hljs-comment"># \d, 相当于[0-9]</span><br><span class="hljs-comment"># \D, 相当于[^0-9]</span><br><span class="hljs-comment"># \w, 相当于[A-Za-z0-9], 相当于匹配所有单词字符</span><br><br>notnum = re.findall(<span class="hljs-string">&#x27;\D&#x27;</span>, num)<br>stringall = re.findall(<span class="hljs-string">&#x27;\w&#x27;</span>, num)<br>num = re.findall(<span class="hljs-string">&#x27;\d&#x27;</span>, num)<br><br><span class="hljs-built_in">print</span>(notnum, <span class="hljs-string">&#x27;\n&#x27;</span>, num, <span class="hljs-string">&#x27;\n&#x27;</span>, stringall)<br></code></pre></td></tr></table></figure><pre><code>[&#39;-&#39;, &#39;-&#39;, &#39;-&#39;, &#39;A&#39;, &#39;-&#39;, &#39;A&#39;, &#39;&amp;&#39;, &#39;A&#39;]  [&#39;1&#39;, &#39;7&#39;, &#39;1&#39;, &#39;2&#39;, &#39;1&#39;, &#39;1&#39;, &#39;9&#39;, &#39;2&#39;, &#39;6&#39;, &#39;0&#39;, &#39;6&#39;, &#39;4&#39;, &#39;5&#39;, &#39;6&#39;]  [&#39;1&#39;, &#39;7&#39;, &#39;1&#39;, &#39;2&#39;, &#39;1&#39;, &#39;1&#39;, &#39;9&#39;, &#39;2&#39;, &#39;6&#39;, &#39;0&#39;, &#39;6&#39;, &#39;A&#39;, &#39;4&#39;, &#39;A&#39;, &#39;5&#39;, &#39;A&#39;, &#39;6&#39;]</code></pre><h5 id="数量词"><a href="#数量词" class="headerlink" title="数量词"></a>数量词</h5><ul><li>词法：{min, max}, min和max 都是非负整数</li><li>\b[1-9][0-8]{2,3}\b, 表示为 100-9888之间的数字, \b 表示的是边界</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">stringnum = <span class="hljs-string">&#x27;python@java@C#123@C++XiongJumm&#x27;</span><br><span class="hljs-comment"># 匹配4-7位的连续字母</span><br>findall =re.findall(<span class="hljs-string">&#x27;[a-zA-Z]&#123;4,7&#125;&#x27;</span>, stringnum)<br><span class="hljs-built_in">print</span>(findall)<br><br><span class="hljs-comment"># 匹配 0-7位的连续字母</span><br>findall = findall =re.findall(<span class="hljs-string">&#x27;[a-zA-Z]&#123;,7&#125;&#x27;</span>, stringnum)<br><span class="hljs-built_in">print</span>(findall)<br><br><span class="hljs-comment"># 匹配 2-正无穷的连续字母</span><br>findall = findall =re.findall(<span class="hljs-string">&#x27;[a-zA-Z]&#123;2,&#125;&#x27;</span>, stringnum)<br><span class="hljs-built_in">print</span>(findall)<br><br><span class="hljs-comment"># 匹配连续两位的连续字母</span><br>findall = findall =re.findall(<span class="hljs-string">&#x27;[a-zA-Z]&#123;2&#125;&#x27;</span>, stringnum)<br><span class="hljs-built_in">print</span>(findall)<br></code></pre></td></tr></table></figure><pre><code>[&#39;python&#39;, &#39;java&#39;, &#39;XiongJu&#39;][&#39;python&#39;, &#39;&#39;, &#39;java&#39;, &#39;&#39;, &#39;C&#39;, &#39;&#39;, &#39;&#39;, &#39;&#39;, &#39;&#39;, &#39;&#39;, &#39;C&#39;, &#39;&#39;, &#39;&#39;, &#39;XiongJu&#39;, &#39;mm&#39;, &#39;&#39;][&#39;python&#39;, &#39;java&#39;, &#39;XiongJumm&#39;][&#39;py&#39;, &#39;th&#39;, &#39;on&#39;, &#39;ja&#39;, &#39;va&#39;, &#39;Xi&#39;, &#39;on&#39;, &#39;gJ&#39;, &#39;um&#39;]</code></pre><ul><li>贪婪模式<ul><li>一次性的读入整个字符串，如果不匹配就丢弃最右边的一个字符，如此循环，直到字符串的长度为0，如上例</li></ul></li><li>懒惰模式<ul><li>从字符串的最有左边开始，从0开始读取，若失败则多读一个字符，如此循环，直到读取完成，如下例</li></ul></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 须在后方加入一个“？”，相当于&#123;4&#125;</span><br>findall = re.findall(<span class="hljs-string">&#x27;[a-zA-Z]&#123;4,7&#125;?&#x27;</span>, stringnum)<br><span class="hljs-built_in">print</span>(findall)<br></code></pre></td></tr></table></figure><pre><code>[&#39;pyth&#39;, &#39;java&#39;, &#39;Xion&#39;, &#39;gJum&#39;]</code></pre><h5 id="边界匹配符和组"><a href="#边界匹配符和组" class="headerlink" title="边界匹配符和组"></a>边界匹配符和组</h5><ul><li>一般边界匹配符有一下几种</li></ul><table><thead><tr><th align="left">语法</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">^</td><td align="left">匹配字符串开头（在有多行的情况中匹配每行的开头）</td></tr><tr><td align="left">$</td><td align="left">匹配字符串末尾（在有多行的情况下匹配每行的开头）</td></tr><tr><td align="left">\A</td><td align="left">仅匹配字符串的开头</td></tr><tr><td align="left">\Z</td><td align="left">仅匹配字符串的末尾</td></tr><tr><td align="left">\b</td><td align="left">匹配\w和\W之间</td></tr><tr><td align="left">\B</td><td align="left">\b</td></tr></tbody></table><ul><li>分组<ul><li>被括号括起来的的表达式就是分组。</li><li>分组表达式（…）其实就是把这部分字符作为一个整体</li><li>可以有多分组的情况，每遇到一个分组，编号就会+1，而且分组后面也是可以加数量词的</li></ul></li></ul><h5 id="替换字符串"><a href="#替换字符串" class="headerlink" title="替换字符串"></a>替换字符串</h5><ul><li>re.sub<ul><li>一些项目中我们需要替换字符串中的字符，这是后就可以使用函数 def sub()</li><li>具体参数如下</li></ul></li></ul><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">pattern</td><td align="left">必选，表示正则中的模式字符串</td></tr><tr><td align="left">repl</td><td align="left">必选，被替换的字符串</td></tr><tr><td align="left">string</td><td align="left">必选，表示要被处理，要被替换的那个string</td></tr><tr><td align="left">count</td><td align="left">可选，对于pattern中部分匹配到的结果，count可以对前几个group进行替换</td></tr><tr><td align="left">flags</td><td align="left">可选，正则表达式修饰符</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">a = <span class="hljs-string">&#x27;Python$Android*Java-121&#x27;</span><br><br><span class="hljs-comment"># 将&quot;*&quot;或&quot;$&quot;替换为&quot;&amp;&quot;</span><br>sub1 = re.sub(<span class="hljs-string">&#x27;[\*$]&#x27;</span>,<span class="hljs-string">&#x27;&amp;&#x27;</span>,a)<br><span class="hljs-built_in">print</span>(sub1)<br><br><span class="hljs-comment"># 将字符串中第一个&quot;&amp;&quot;替换成 &quot;*&quot;</span><br>sub2 = re.sub(<span class="hljs-string">&#x27;\&amp;&#x27;</span>, <span class="hljs-string">&#x27;*&#x27;</span>, sub1, <span class="hljs-number">1</span>)<br><span class="hljs-built_in">print</span>(sub2)<br><br><span class="hljs-comment"># 将字符串中 &quot;*&quot; 替换为&quot;!&quot;, &quot;&quot;&amp; 替换为&quot;-&quot;</span><br><br><span class="hljs-comment"># 定义一个函数</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">convert</span>(<span class="hljs-params">value</span>):<br>    group = value.group()<br>    <span class="hljs-keyword">if</span> (group == <span class="hljs-string">&#x27;*&#x27;</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;!&#x27;</span><br>    <span class="hljs-keyword">elif</span> (group == <span class="hljs-string">&#x27;&amp;&#x27;</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;-&#x27;</span><br><br>    <br>    <br>sub3 = re.sub(<span class="hljs-string">&#x27;[\*&amp;]&#x27;</span>, convert, sub2)<br><span class="hljs-built_in">print</span>(sub3)<br></code></pre></td></tr></table></figure><pre><code>Python&amp;Android&amp;Java-121Python*Android&amp;Java-121Python!Android-Java-121</code></pre><h5 id="re-match-和-re-search"><a href="#re-match-和-re-search" class="headerlink" title="re.match 和 re.search"></a>re.match 和 re.search</h5><ul><li>re.match函数<ul><li>语法：re.match(pattern, string, flag&#x3D;0)</li><li>re.match 尝试从字符串的起始位置匹配一个模式，如果不是其实位置匹配成功的话， match() 就返回None</li></ul></li><li>re.search()函数<ul><li>re.search(pattern, string, flag&#x3D;0)</li><li>扫描整个字符串并返回第一个成功的匹配</li></ul></li><li>re.match() 和 re.search() 的具体描述如下</li></ul><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">pattern</td><td align="left">匹配的正则表达式</td></tr><tr><td align="left">string</td><td align="left">要匹配的字符串</td></tr><tr><td align="left">flags</td><td align="left">标志位，用于控制正则表达是的匹配方式，如:是否区别大小写</td></tr></tbody></table><table><thead><tr><th align="left">函数</th><th align="left">区别</th></tr></thead><tbody><tr><td align="left">re.match()</td><td align="left">只匹配字符串的开始。如果字符串开始不符合正则表达式，则匹配失败，函数返回None</td></tr><tr><td align="left">re.search()</td><td align="left">匹配整个字符串，直到找到一个匹配</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">img = <span class="hljs-string">&#x27;&lt;img src=&quot;http://static.xiaobu.hk/cityact/application/images/20200612/2QCXwH6pej.JPG&quot;&gt;&#x27;</span><br><br><span class="hljs-comment"># 使用re.search()</span><br>search = re.search(<span class="hljs-string">&#x27;&lt;img src=&quot;(.*)&quot;&gt;&#x27;</span>, img)<br><span class="hljs-comment"># group(0)是一个完整的分组</span><br><span class="hljs-built_in">print</span>(search.group(<span class="hljs-number">0</span>))<br><span class="hljs-built_in">print</span>(search.group(<span class="hljs-number">1</span>))<br><br><span class="hljs-comment"># 使用re.findall()</span><br>search = re.findall(<span class="hljs-string">&#x27;&lt;img src=&quot;(.*)&quot;&gt;&#x27;</span>, img)<br><span class="hljs-comment"># group(0)是一个完整的分组</span><br><span class="hljs-built_in">print</span>(search)<br><br><span class="hljs-comment"># 多个分组的使用</span><br>search = re.search(<span class="hljs-string">&#x27;&lt;(.*) src=&quot;(.*)&quot;&gt;&#x27;</span>, img)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;打印字符串 img:&quot;</span>, search.group(<span class="hljs-number">1</span>))<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;打印图片地址&quot;</span>, search.group(<span class="hljs-number">2</span>))<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;以元组的形式打印 img和图片地址:&quot;</span>, search.group(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>))<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;使用 groups:&quot;</span>,search.groups())<br></code></pre></td></tr></table></figure><pre><code>&lt;img src=&quot;http://static.xiaobu.hk/cityact/application/images/20200612/2QCXwH6pej.JPG&quot;&gt;http://static.xiaobu.hk/cityact/application/images/20200612/2QCXwH6pej.JPG[&#39;http://static.xiaobu.hk/cityact/application/images/20200612/2QCXwH6pej.JPG&#39;]打印字符串 img: img打印图片地址 http://static.xiaobu.hk/cityact/application/images/20200612/2QCXwH6pej.JPG以元组的形式打印 img和图片地址: (&#39;img&#39;, &#39;http://static.xiaobu.hk/cityact/application/images/20200612/2QCXwH6pej.JPG&#39;)使用 groups: (&#39;img&#39;, &#39;http://static.xiaobu.hk/cityact/application/images/20200612/2QCXwH6pej.JPG&#39;)</code></pre>]]></content>
    
    
    <summary type="html">&lt;h5 id=&quot;初识正则表达式&quot;&gt;&lt;a href=&quot;#初识正则表达式&quot; class=&quot;headerlink&quot; title=&quot;初识正则表达式&quot;&gt;&lt;/a&gt;初识正则表达式&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;使用python的内置函数&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs python&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# 设置一个常量&lt;/span&gt;&lt;br&gt;name = &lt;span class=&quot;hljs-string&quot;&gt;&amp;#x27;XiongJum|酒明|JumXiong|初学者&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# 判断是否有字符串XiongJum&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&amp;#x27;是否含有XiongJum这个字符串：&amp;#123;&amp;#125;&amp;#x27;&lt;/span&gt;.&lt;span class=&quot;hljs-built_in&quot;&gt;format&lt;/span&gt;(name.index(&lt;span class=&quot;hljs-string&quot;&gt;&amp;#x27;XiongJum&amp;#x27;&lt;/span&gt;) &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;))&lt;br&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&amp;#x27;是否含有XiongJum这个字符串：&amp;#123;&amp;#125;&amp;#x27;&lt;/span&gt;.&lt;span class=&quot;hljs-built_in&quot;&gt;format&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&amp;#x27;XiongJum&amp;#x27;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; name))&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;pre&gt;&lt;code&gt;是否含有XiongJum这个字符串：True
是否含有XiongJum这个字符串：True
&lt;/code&gt;&lt;/pre&gt;</summary>
    
    
    
    
    <category term="code" scheme="https://blog.lain.buzz/tags/code/"/>
    
    <category term="正则表达式" scheme="https://blog.lain.buzz/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>V2ray搭建教程</title>
    <link href="https://blog.lain.buzz/tech/tools_V2ray/"/>
    <id>https://blog.lain.buzz/tech/tools_V2ray/</id>
    <published>2020-07-05T01:00:00.000Z</published>
    <updated>2023-05-01T12:48:59.815Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>V2Ray 是一个与 Shadowsocks 类似的代理软件，可以用来科学上网等。</p><span id="more"></span><h1 id="1-服务器"><a href="#1-服务器" class="headerlink" title="1. 服务器"></a>1. 服务器</h1><p>1, 可以使用<a href="https://www.linode.com/">linode</a> 或者<a href="https://bandwagonhost.cn/">搬瓦工</a>vps服务器</p><p>2, 本次推荐Google Cloud(谷歌云)，搭建v2ray或者其余学习用途</p><p>3, <img src="https://cdn.jsdelivr.net/gh/xiongJum/Picture/img/scr_GoogleCloud.png"></p><pre><code>(1). 优点+   也无需担心和AWS一样会莫名其妙的扣费，在没有升级为付费用户之前是不会扣除信用卡的金额+   新用户会赠送等同于$300 的当地货币使用，有效期为12个月+   有香港等亚太地区的服务器，使用延迟会好上不少(2). 缺点+   搭建过程中需要使用魔法上网</code></pre><p>4, 本教程暂不介绍服务器申请<br>5, 也可以使用別的國外服務器</p><h1 id="2-服务端配置"><a href="#2-服务端配置" class="headerlink" title="2. 服务端配置"></a>2. 服务端配置</h1><p>1, 本次教程选择的面板为<a href="https://github.com/sprov065">sprov065</a>@github用户的<a href="https://github.com/sprov065/v2-ui">v2-ui</a> </p><pre><code>(1). 可视化操作，查看方便、学习门槛较低(2). 由于是网页端所以管理会比较方便(3). 该面板可以配置多用户</code></pre><h2 id="2-1-安装-amp-升级"><a href="#2-1-安装-amp-升级" class="headerlink" title="2.1 安装&amp;升级"></a>2.1 安装&amp;升级</h2><p>1, 安裝v2ray</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">bash &lt;(curl -Ls https://blog.sprov.xyz/v2-ui.sh)<br></code></pre></td></tr></table></figure><h2 id="2-2-設置"><a href="#2-2-設置" class="headerlink" title="2.2 設置"></a>2.2 設置</h2><p>1, 输入v2-ui，进入面板设置</p><img src="https://cdn.jsdelivr.net/gh/xiongJum/Picture/scr/03.png" style="zoom:50%;" /><p>2， 查看或者重新设置面板的端口号</p><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">查找v2-ui的服务进程</span><br>ps -ef | grep v2-ui<br><span class="hljs-meta prompt_"># </span><span class="language-bash">根据PID查找端口号</span><br>netstat -nap | grep [PID]<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/xiongJum/Picture/Scr/03.png"></p><h2 id="2-3-通過瀏覽器設置代理"><a href="#2-3-通過瀏覽器設置代理" class="headerlink" title="2.3 通過瀏覽器設置代理"></a>2.3 通過瀏覽器設置代理</h2><p>1, 输入当前服务器IP:端口 和账号密码admin，进入设置面板</p><p><img src="https://cdn.jsdelivr.net/gh/xiongJum/Picture/Scr/04.png"></p><p>1, 点击账号列表，点击左上角的+号，进入添加账号页面，备注为非填项，其余默认即可，可以按照自己的需求进行修改，本次教程选择的协议为kcp<br>2, kcp消耗流量比较多，但延迟较低，对于延迟较高的IP，选择kcp会一定程度上改善网络环境<br>3, 如果想选择其余协议，可以参考<a href="https://toutyrater.github.io/advanced/wss_and_web.html">Blog</a><br>4, 若想使用Nginx+w2+TLS进行网络代理，本教程中协议传输配置选择w2，不要选择TLS。TLS在Nginx中配置即可，但客户端中要选择TLS，端口为Nginx中代理的端口，非在本面板中设置的端口</p><p><img src="https://cdn.jsdelivr.net/gh/xiongJum/Picture/Scr/05.png"></p><p>点击添加-二维码-复制连接，即可获得v2Ray的连接</p><h1 id="3-客户端配置"><a href="#3-客户端配置" class="headerlink" title="3. 客户端配置"></a>3. 客户端配置</h1><h2 id="3-1-下载地址"><a href="#3-1-下载地址" class="headerlink" title="3.1 下载地址"></a>3.1 下载地址</h2><p>PC端：<a href="https://github.com/2dust/v2rayN/releases">windows</a>、<a href="https://github.com/Cenmrev/V2RayX/releases">MacOS</a><br>移动端：<a href="https://github.com/2dust/v2rayNG/releases">Android</a></p><h2 id="3-2-配置：windows"><a href="#3-2-配置：windows" class="headerlink" title="3.2 配置：windows"></a>3.2 配置：windows</h2><p>1, 下载并解压<a href="https://github.com/2dust/v2rayN/releases/download/3.19/v2rayN.zip">v2RayN</a>和<a href="https://github.com/2dust/v2rayN/releases/download/3.19/v2rayN-Core.zip">v2rayN-Core</a><br>2, 点击v2rayN.exe文件，右击右下角的v2rayN的图标选择{从剪贴板导入批量Url}<br>3, 双击右下角的v2ray图标进入显示面板，可以发现有刚刚导入的链接<br>4, 右击右下角的图标选择{Http代理-PAC模式}</p><h1 id="4-扩展"><a href="#4-扩展" class="headerlink" title="4. 扩展"></a>4. 扩展</h1><h2 id="4-1-模式说明"><a href="#4-1-模式说明" class="headerlink" title="4.1 模式说明"></a>4.1 模式说明</h2><p>1, 全局是代理所有的网络包括局域网和国内的网络如百度，和国外的网络如Google<br>2, PAC是通过配置文件选择代理部分网络<br>3, v2ray支持GFWfilt地址和本地pac文件同时生效，若GFWList地址中没有代理你需要的网络，你可以在用户PAC设置中手动添加要代理的ip或者域名<br><img src="https://cdn.jsdelivr.net/gh/xiongJum/Picture//Scr/08.png"></p><h2 id="4-2-設置PAC代理"><a href="#4-2-設置PAC代理" class="headerlink" title="4.2 設置PAC代理"></a>4.2 設置PAC代理</h2><p>1, pixiv的PAC代理地址</p><ul><li><a href="http://www.pixiv.net/">www.pixiv.net</a>,</li><li>api.booth.pm,(存疑)</li><li>i.pximg.net,</li></ul><h2 id="4-3-局域网代理配置（如switch配置）"><a href="#4-3-局域网代理配置（如switch配置）" class="headerlink" title="4.3 局域网代理配置（如switch配置）"></a>4.3 局域网代理配置（如switch配置）</h2><p>1, 双击v2ray-参数设置，进入设置页面，点击基础设置查看本地监听端口<br>2, http代理默认即可，你也可以根据自己的选择进行不同的配置<br>3, 本地会开启两个端口号（设置的端口号X和X+1）<br>4, 按下快捷键win+R，在运行输入框中输入cmd<br>5, 在cmd界面输入ipconfig<br>   <img src="https://cdn.jsdelivr.net/gh/xiongJum/Picture//Scr/09.png"></p><p>6,在要代理的机器中（如switch）ip设置为上图的ipv4、端口号为设置的端口号+1</p><hr><h1 id="4-引申文檔"><a href="#4-引申文檔" class="headerlink" title="4. 引申文檔"></a>4. 引申文檔</h1><p><a href="https://selierlin.github.io/v2ray/">V2Ray 配置指南</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;V2Ray 是一个与 Shadowsocks 类似的代理软件，可以用来科学上网等。&lt;/p&gt;</summary>
    
    
    
    
    <category term="代理" scheme="https://blog.lain.buzz/tags/%E4%BB%A3%E7%90%86/"/>
    
    <category term="V2ray" scheme="https://blog.lain.buzz/tags/V2ray/"/>
    
    <category term="梯子" scheme="https://blog.lain.buzz/tags/%E6%A2%AF%E5%AD%90/"/>
    
  </entry>
  
  <entry>
    <title>PlantUML</title>
    <link href="https://blog.lain.buzz/tech/tools_PlantUML/"/>
    <id>https://blog.lain.buzz/tech/tools_PlantUML/</id>
    <published>2020-06-30T01:00:00.000Z</published>
    <updated>2023-05-01T12:48:59.815Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>–基于vscIDE编辑器的PLantUML模块。</p><p>1, 本流程图是通过使用代码行(伪代码)进行实现<br>2, 需要Java、需要IDE：<a href="https://code.visualstudio.com/">Visual Studio Code</a><br>3, 如果需要画时序图和活动图以外的流程图，需要安装grephviz-dot<br>4, 本教程或则记录仅为活动图<br>5, 本次不是完整活动图记录，若需要别的条件或关键词，可以通过附录链接，跳转到官方文档</p><span id="more"></span><h1 id="1-开始"><a href="#1-开始" class="headerlink" title="1. 开始"></a>1. 开始</h1><p>1, @startuml 和 @enduml 为开始和结束流程<br>2, start 和 stop为开始和结束，end表现为另种结束icon<br>3, if、elseif、和else为条件语句。else只能连续出现一次<br>4, endif 设置多个分支</p><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@startuml [Test测试]</span><br><span class="hljs-keyword">if</span>(线路判断规则) then(按照机具上传方向) <br>    <span class="hljs-keyword">if</span>(上下车方向是否相同) then(Y)<br>        <span class="hljs-keyword">if</span>(上车站点是否大于下车站点) then(N)<br>            :定为一条行程，线路方向和站点序号为机具上传的方向;<br>            stop<br>        <span class="hljs-keyword">else</span>(Y)<br>            <span class="hljs-keyword">if</span>(上车站点是否等于下车站点) then(Y)<br>                :定为一条线路，线路方向和序号为机具上传的;<br>                stop<br>            <span class="hljs-keyword">else</span>(N)<br>                <span class="hljs-keyword">if</span>(上车站点大于下车站点的扣费规则) then(扣除最低票价(有优惠))<br>                    :定为一条行程，线路方向和站点序号为机具上传;<br>                    stop<br>                <span class="hljs-keyword">else</span>(扣除最低票价(无优惠))<br>                    :定为一条行程，线路方向和站点序号为机具上传;<br>                    stop<br>                endif<br>            endif<br>        endif<br>    <span class="hljs-keyword">else</span>(Y)<br>        <span class="hljs-keyword">if</span>(上车站点是否小于下车站点) then(Y)<br>            :定为一条行程，上下车为机具上传的方向和站点，扣除正常的区间票价;<br>            stop<br>        <span class="hljs-keyword">else</span>(N)<br>            <span class="hljs-keyword">if</span>(上车站点是否等于下车站点) then(Y)<br>                :定为一条行程上下车为机具上传的方向和站点，扣除线路最低票价;<br>                stop<br>            <span class="hljs-keyword">else</span>(N)<br>                :定为一条行程，扣除方向的最低区间票价;<br>                stop<br>            endif<br>        endif<br>    endif<br><span class="hljs-keyword">else</span>(根据上传站点序号进行判断)<br>    :此处省略一万字.....;<br>    stop<br><span class="hljs-meta">@enduml</span><br></code></pre></td></tr></table></figure><h1 id="2-説明"><a href="#2-説明" class="headerlink" title="2. 説明"></a>2. 説明</h1><p>1, 缩进不会影响实际的表现，缩进只是本人习惯和方便查看分支<br>2, 查看实时预览图片使用 atl+d组合键<br>3, 文件后缀使用 wad文件或别的后缀名</p><h1 id="3-參考文檔"><a href="#3-參考文檔" class="headerlink" title="3. 參考文檔"></a>3. 參考文檔</h1><p><a href="https://plantuml.com/zh/">plantuml</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;–基于vscIDE编辑器的PLantUML模块。&lt;/p&gt;
&lt;p&gt;1, 本流程图是通过使用代码行(伪代码)进行实现&lt;br&gt;2, 需要Java、需要IDE：&lt;a href=&quot;https://code.visualstudio.com/&quot;&gt;Visual Studio Code&lt;/a&gt;&lt;br&gt;3, 如果需要画时序图和活动图以外的流程图，需要安装grephviz-dot&lt;br&gt;4, 本教程或则记录仅为活动图&lt;br&gt;5, 本次不是完整活动图记录，若需要别的条件或关键词，可以通过附录链接，跳转到官方文档&lt;/p&gt;</summary>
    
    
    
    <category term="奇技淫巧" scheme="https://blog.lain.buzz/categories/%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7/"/>
    
    
    <category term="工具" scheme="https://blog.lain.buzz/tags/%E5%B7%A5%E5%85%B7/"/>
    
    <category term="流程图" scheme="https://blog.lain.buzz/tags/%E6%B5%81%E7%A8%8B%E5%9B%BE/"/>
    
    <category term="PlantUML" scheme="https://blog.lain.buzz/tags/PlantUML/"/>
    
    <category term="vscode" scheme="https://blog.lain.buzz/tags/vscode/"/>
    
  </entry>
  
  <entry>
    <title>自动化测试 for selenium</title>
    <link href="https://blog.lain.buzz/tech/code_selenium/"/>
    <id>https://blog.lain.buzz/tech/code_selenium/</id>
    <published>2020-06-29T01:00:00.000Z</published>
    <updated>2023-04-21T03:58:06.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Selenium 是支持 web 浏览器自动化的一系列工具和库的综合性项目，它提供了扩展来模拟用户与浏览器的交互，用于扩展浏览器分配的分发服务器， 以及用于实现 <a href="https://www.w3.org/TR/webdriver/">W3C WebDriver</a> 规范的基础结构， 该规范允许您为所有主要 Web 浏览器编写可互换的代码.</p><p>Selenium 汇集了浏览器供应商，工程师和爱好者，以进一步围绕 Web 平台自动化进行公开讨论。 该项目组织了一次年度会议，以教学和培养社区.</p><p>Selenium 的核心是 <a href="https://www.selenium.dev/zh-cn/documentation/webdriver/">WebDriver</a>，这是一个编写指令集的接口，可以在许多浏览器中互换运行</p><span id="more"></span><h1 id="准备所需文件"><a href="#准备所需文件" class="headerlink" title="准备所需文件"></a>准备所需文件</h1><ol><li>下载selenium库,</li><li>下载浏览器驱动，并将浏览器驱动放入项目的根目录下，并在执行文件中设置路径地址；或者将其所在目录加入到环境变量中；也可以直接在脚本中安装驱动</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">pip3 install selenium<br></code></pre></td></tr></table></figure><p>chrome <a href="http://chromedriver.chromium.org/downloads">http://chromedriver.chromium.org/downloads</a></p><h1 id="开始编写测试脚本"><a href="#开始编写测试脚本" class="headerlink" title="开始编写测试脚本"></a>开始编写测试脚本</h1><h2 id="基础的-selenium-的脚本文件"><a href="#基础的-selenium-的脚本文件" class="headerlink" title="基础的 selenium 的脚本文件"></a>基础的 selenium 的脚本文件</h2><p>编写执行脚本文件</p><p>通过使用方法 driver.implicitly_wait(10) 可以设置隐式的等待时间，但是不建议；设置窗口最大化，可以调用方法 driver.maximize_window() </p><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> selenium <span class="hljs-keyword">import</span> webdriver<br><br><span class="hljs-comment"># 添加浏览器驱动，并设置测试地址</span><br>driver = webdriver.Chrome()<br>driver.get(<span class="hljs-string">&quot;http://blog.xcumin.top&quot;</span>)<br><span class="hljs-comment"># 通过 id 定位测试元素控件，并在控件中输入测试文本</span><br>driver.find_element_by_id(<span class="hljs-string">&quot;username&quot;</span>).send_keys(<span class="hljs-string">&#x27;xiongceshi&#x27;</span>)<br><span class="hljs-comment"># 退出浏览器</span><br>driver.quit()<br><br></code></pre></td></tr></table></figure><p>可以通过python自带的测试库 <a href="https://docs.python.org/zh-cn/3/library/unittest.html">unittest</a> 调整结构，并引用测试断言</p><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> unittest<br><span class="hljs-keyword">from</span> selenium <span class="hljs-keyword">import</span> webdriver<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SeleniumTest</span>(unittest.TestCase):<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">setUp</span>(<span class="hljs-params">self</span>): <span class="hljs-comment"># 测试前置方法，在所有的方法之前进行运行</span><br>self.driver = webdriver.Chrome()<br>self.driver.implicitly_wait(<span class="hljs-number">10</span>)<br>self.driver.get(<span class="hljs-string">&#x27;http://test.lsgot.com:8181/#/login&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">tearDown</span>(<span class="hljs-params">self</span>): <span class="hljs-comment"># 测试后置方法，在所有测试方法之后运行</span><br>self.driver.quit()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_login</span>(<span class="hljs-params">self</span>):<br><span class="hljs-string">&quot;&quot;&quot;登录软件&quot;&quot;&quot;</span><br>self.driver.find_element(By=<span class="hljs-built_in">id</span>(<span class="hljs-string">&#x27;loginUsername&#x27;</span>)).send_keys(<span class="hljs-string">&#x27;WWGS&#x27;</span>)<br>self.driver.find_element_by_id(<span class="hljs-string">&#x27;loginPassword&#x27;</span>).send_keys(<span class="hljs-string">&#x27;123456&#x27;</span>)<br>self.driver.find_element_by_id(<span class="hljs-string">&#x27;loginButton&#x27;</span>).click()<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    unittest.main()<br></code></pre></td></tr></table></figure><h2 id="增加断言，测试输出是否符合条件"><a href="#增加断言，测试输出是否符合条件" class="headerlink" title="增加断言，测试输出是否符合条件"></a>增加断言，测试输出是否符合条件</h2><p>使用 unittest.TestCase 模块，判断结果是否符合预期，并在命令行中显示测试结果</p><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> selenium <span class="hljs-keyword">import</span> webdriver<br><span class="hljs-keyword">from</span> selenium.webdriver.support.ui <span class="hljs-keyword">import</span> WebDriverWait<br><span class="hljs-keyword">from</span> selenium.webdriver.support <span class="hljs-keyword">import</span> expected_conditions <span class="hljs-keyword">as</span> EC<br><span class="hljs-keyword">from</span> selenium.webdriver.common.by <span class="hljs-keyword">import</span> By<br><span class="hljs-keyword">import</span> unittest<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">seleniumTest</span>(unittest.TestCase):<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">testlogin</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;错误的账号密码进行登录，并判断提示文案是否正确&quot;&quot;&quot;</span>       <br>... skip<br>        <br>        <span class="hljs-comment"># 设置显式等待时间，强制等待2秒查找元素</span><br>        errorMsg = WebDriverWait(self.driver, <span class="hljs-number">2</span>) .until \<br>        (EC.visibility_of_element_located((By.ID,<span class="hljs-string">&quot;errorMsg&quot;</span>))).text<br>        errorText = <span class="hljs-string">&#x27;账户或密码错误，请重新输入呀！&#x27;</span><br>        <span class="hljs-comment"># 断言，比较两者的的字符串是否一致，若一致则为True，不一致则为Flase并抛出错误</span><br>        self.assertEqual(errorMsg, errorText, <span class="hljs-string">&#x27;提示文案错误&#x27;</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    unittest.main()<br></code></pre></td></tr></table></figure><h2 id="增加功能，截取产生有bug的界面"><a href="#增加功能，截取产生有bug的界面" class="headerlink" title="增加功能，截取产生有bug的界面"></a>增加功能，截取产生有bug的界面</h2><p>使用 save_screenshot() 截取错误页面，并保存到设置的路径中</p><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">seleniumTest</span>(unittest.TestCase):<br>··· skip  <br>        <br>        <span class="hljs-comment"># 错误代码块，当try为True时，跳过except，当try为Flase时，执行except</span><br>        <span class="hljs-keyword">try</span>:<br>            self.assertEqual(errorMsg, errorText)<br>        <span class="hljs-keyword">except</span>:<br>            <span class="hljs-comment"># 截取当前界面，字符串中的内容为保存路径</span><br>            self.driver.save_screenshot(<span class="hljs-string">&#x27;./test.png&#x27;</span>)<br>            <span class="hljs-comment"># 断言，无条件的创造失败，字符串为错误说明</span><br>            self.fail(<span class="hljs-string">&quot;登录失败时，提示文案错误&quot;</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    unittest.main()<br></code></pre></td></tr></table></figure><h1 id="优化代码结构，产生测试报告"><a href="#优化代码结构，产生测试报告" class="headerlink" title="优化代码结构，产生测试报告"></a>优化代码结构，产生测试报告</h1><h2 id="储存配置以及通用方法"><a href="#储存配置以及通用方法" class="headerlink" title="储存配置以及通用方法"></a>储存配置以及通用方法</h2><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># seleniumconfig.py</span><br><span class="hljs-keyword">import</span> unittest<br><span class="hljs-keyword">from</span> selenium <span class="hljs-keyword">import</span> webdriver<br><span class="hljs-keyword">from</span> selenium.webdriver.support.ui <span class="hljs-keyword">import</span> WebDriverWait<br><span class="hljs-keyword">from</span> selenium.webdriver.support <span class="hljs-keyword">import</span> expected_conditions <span class="hljs-keyword">as</span> EC<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">seleniumConfig</span>(unittest.TestCase):<br><span class="hljs-string">&quot;&quot;&quot;储存重复的方法，以及通用配置&quot;&quot;&quot;</span><br><span class="hljs-meta">    @classmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">setUp</span>(<span class="hljs-params">cls</span>):<br>        cls.driver = webdriver.Firefox()<br>... skip<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">find_element_try</span>(<span class="hljs-params">self, real, demand, explana</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;判断实际内容和需求是否一致，若不一致则截取图片，并返回错误说明&quot;&quot;&quot;</span><br><span class="hljs-keyword">try</span>:<br>            self.assertEqual(real, demand)<br><span class="hljs-keyword">except</span>:<br>            self.fail(explana)<br>            self.driver.save_screenshot(<span class="hljs-string">&#x27;./test.png&#x27;</span>)   <br>    <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">find_element_wait</span>(<span class="hljs-params">self, wait_time, type_element, element</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;检查元素是否存在，若不存在则截取图片并返回错误说明&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-keyword">return</span> WebDriverWait(self.driver, wait_time).until \<br>                (EC.visibility_of_element_located((type_element,element)))<br>        <span class="hljs-keyword">except</span>:<br>            self.fail(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;element&#125;</span>查找失败，请检查元素是否正确或产品出现缺陷&quot;</span>) <span class="hljs-comment">#格式化字符串</span><br></code></pre></td></tr></table></figure><h2 id="设计测试流程、设计测试用例"><a href="#设计测试流程、设计测试用例" class="headerlink" title="设计测试流程、设计测试用例"></a>设计测试流程、设计测试用例</h2><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># seleniumtest.py</span><br><span class="hljs-keyword">from</span> seleniumconfig <span class="hljs-keyword">import</span> seleniumConfig<br><span class="hljs-keyword">from</span> selenium.webdriver.common.by <span class="hljs-keyword">import</span> By<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">seleniumTest</span>(<span class="hljs-title class_ inherited__">seleniumConfig</span>):<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">test_b_login</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;错误的账号密码进行登录，并判断提示文案是否正确&quot;&quot;&quot;</span><br>... skip<br><br>        errorMsg = self.find_element_wait(<span class="hljs-number">2</span>,By.ID,<span class="hljs-string">&quot;errorMsg&quot;</span>).text<br>     <br>       <span class="hljs-comment"># 判断错误提示文案和需求是否一致</span><br>        self.find_element_try(errorMsg, <span class="hljs-string">&#x27;账户或密码错误，请重新输入！&#x27;</span>, <br>  <span class="hljs-string">&#x27;登录失败时，提示文案错误&#x27;</span>)<br><br></code></pre></td></tr></table></figure><h2 id="生成测试报告"><a href="#生成测试报告" class="headerlink" title="生成测试报告"></a>生成测试报告</h2><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># seleniumrun.py</span><br><span class="hljs-keyword">import</span> unittest<br><span class="hljs-keyword">import</span> HTMLTestRunner<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">from</span> seleniumtest <span class="hljs-keyword">import</span> seleniumTest<br><br><span class="hljs-comment"># 获取测试用例，创建测试套件(若有多份测试用例，可以创建多份测试套件)</span><br>web_login = unittest.TestLoader().loadTestsFromTestCase(seleniumTest)<br>kts_login = unittest.TestSuite([web_login])<br><br><span class="hljs-comment">#设置报告的写入路径和名称</span><br><span class="hljs-built_in">dir</span> = os.getcwd()<br>nowTime = time.strftime(<span class="hljs-string">&#x27;%Y%m%d%H%M%S&#x27;</span>,time.localtime(time.time()))<br>outPath = <span class="hljs-string">f&#x27;./outFile/webTestReport<span class="hljs-subst">&#123;nowTime&#125;</span>.html&#x27;</span><br>outFile = <span class="hljs-built_in">open</span>(<span class="hljs-built_in">dir</span> + outPath, <span class="hljs-string">&#x27;wb&#x27;</span>)<br><br><span class="hljs-comment"># 创建测试内容，执行测试套件</span><br>runner = HTMLTestRunner.HTMLTestRunner(<br>    stream= outFile,<br>    title= <span class="hljs-string">&#x27;测试报告&#x27;</span>,<br>    description= <span class="hljs-string">&#x27;WEB支撑平台测试_UI自动化回归测试&#x27;</span>,<br>    verbosity=<span class="hljs-number">2</span>)<br><br>runner.run(kts_login)<br><span class="hljs-comment"># 不生成测试报告</span><br><span class="hljs-comment"># unittest.TextTestRunner(verbosity=2).run(kts_login)</span><br></code></pre></td></tr></table></figure><p>执行 seleniumrun.py ，获取测试报告</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Selenium 是支持 web 浏览器自动化的一系列工具和库的综合性项目，它提供了扩展来模拟用户与浏览器的交互，用于扩展浏览器分配的分发服务器， 以及用于实现 &lt;a href=&quot;https://www.w3.org/TR/webdriver/&quot;&gt;W3C WebDriver&lt;/a&gt; 规范的基础结构， 该规范允许您为所有主要 Web 浏览器编写可互换的代码.&lt;/p&gt;
&lt;p&gt;Selenium 汇集了浏览器供应商，工程师和爱好者，以进一步围绕 Web 平台自动化进行公开讨论。 该项目组织了一次年度会议，以教学和培养社区.&lt;/p&gt;
&lt;p&gt;Selenium 的核心是 &lt;a href=&quot;https://www.selenium.dev/zh-cn/documentation/webdriver/&quot;&gt;WebDriver&lt;/a&gt;，这是一个编写指令集的接口，可以在许多浏览器中互换运行&lt;/p&gt;</summary>
    
    
    
    
    <category term="Python" scheme="https://blog.lain.buzz/tags/Python/"/>
    
    <category term="测试" scheme="https://blog.lain.buzz/tags/%E6%B5%8B%E8%AF%95/"/>
    
    <category term="code" scheme="https://blog.lain.buzz/tags/code/"/>
    
    <category term="selenium" scheme="https://blog.lain.buzz/tags/selenium/"/>
    
    <category term="web 自动化测试" scheme="https://blog.lain.buzz/tags/web-%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
    <category term="自动化测试" scheme="https://blog.lain.buzz/tags/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>了解SHELL(其一)</title>
    <link href="https://blog.lain.buzz/tech/system_linux%E4%B9%8Bshell/"/>
    <id>https://blog.lain.buzz/tech/system_linux%E4%B9%8Bshell/</id>
    <published>2020-06-28T01:00:00.000Z</published>
    <updated>2023-05-01T12:48:59.815Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>linux</p><h5 id="1-bash"><a href="#1-bash" class="headerlink" title="(1). bash"></a>(1). bash</h5><ul><li><p>参考&#x2F;引用：<a href="http://cn.linux.vbird.org/linux_basic/0320bash_1.php">鸟哥的Linux私房菜-第十一章</a></p></li><li><p>命令编修能力</p></li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">查看不同用户使用的shell,其记录在文件/etc/passwd中</span><br>cat /ect/passwd<br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看bash的历史命令,其记录在文件~/.bash_history中</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">其只记录前一次登录系统时使用的命令，当前登录运行的命令被记录在缓存中</span><br>cat ~/.bash_history<br></code></pre></td></tr></table></figure><span id="more"></span><ul><li><p>命令与文件补全能力[tab]</p><ul><li>[tab]接在命令之后为[命令补全]</li><li>[tab] 接在命令-文件之后为[文件补齐]</li><li>连续按两次[tab]显示所有可运行的命令</li><li>c[tab] [tab]显示以c开头的所有可运行的命令</li></ul></li><li><p>命令别名配置功能（alias）</p><ul><li><pre><code class="shell">alias lm=&#39;ls -al&#39;# lm 等同于命令 ls -al# 查看目前命名的所有别名（alias） alias<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext"><br>+ 工作控制、前景背景控制（&lt;font color=red&gt;待补充&lt;/font&gt;）<br><br>  + [ctrl] + z 将当前任务放入后台<br><br>+ 程序化脚本（shell scripts)<br><br>  + （&lt;font color=red&gt;待补充&lt;/font&gt;）<br><br>+ 通配符<br><br>  + 如 &quot;*&quot; <br><br>+ Bash shell的内嵌\内建命令 (type)<br><br>  + ```shell<br>    # 查看内嵌命令的说明文档，如bash<br>    man bash<br>    # 查看命令是偶为内嵌命令 type<br>    type cd<br>    &gt;&gt;<br>    cd is a shell builtin =&gt; cd 是 shell 内嵌<br></code></pre></td></tr></table></figure></code></pre></li></ul></li><li><p>命令的下达</p><ul><li>如 “\ [Enter]” 使 [Enter]不再具有[开始运行]的功能，具有转义的作用，并将命令在下一行继续输入</li><li>（<font color=red>待补充</font>）</li></ul></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;linux&lt;/p&gt;
&lt;h5 id=&quot;1-bash&quot;&gt;&lt;a href=&quot;#1-bash&quot; class=&quot;headerlink&quot; title=&quot;(1). bash&quot;&gt;&lt;/a&gt;(1). bash&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;参考&amp;#x2F;引用：&lt;a href=&quot;http://cn.linux.vbird.org/linux_basic/0320bash_1.php&quot;&gt;鸟哥的Linux私房菜-第十一章&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;命令编修能力&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs shell&quot;&gt;&lt;span class=&quot;hljs-meta prompt_&quot;&gt;# &lt;/span&gt;&lt;span class=&quot;language-bash&quot;&gt;查看不同用户使用的shell,其记录在文件/etc/passwd中&lt;/span&gt;&lt;br&gt;cat /ect/passwd&lt;br&gt;&lt;span class=&quot;hljs-meta prompt_&quot;&gt;# &lt;/span&gt;&lt;span class=&quot;language-bash&quot;&gt;查看bash的历史命令,其记录在文件~/.bash_history中&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;hljs-meta prompt_&quot;&gt;# &lt;/span&gt;&lt;span class=&quot;language-bash&quot;&gt;其只记录前一次登录系统时使用的命令，当前登录运行的命令被记录在缓存中&lt;/span&gt;&lt;br&gt;cat ~/.bash_history&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    
    <category term="linux" scheme="https://blog.lain.buzz/tags/linux/"/>
    
    <category term="shell" scheme="https://blog.lain.buzz/tags/shell/"/>
    
    <category term="system" scheme="https://blog.lain.buzz/tags/system/"/>
    
  </entry>
  
  <entry>
    <title>性能测试 for Locust</title>
    <link href="https://blog.lain.buzz/tech/code_Locust/"/>
    <id>https://blog.lain.buzz/tech/code_Locust/</id>
    <published>2020-05-27T16:00:00.000Z</published>
    <updated>2023-04-21T03:56:22.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>locast 是一種易於使用、可編寫脚本且可擴展的性能測試工具。</p><p>在常規 Python 代碼中定義用戶的行爲。</p><p>開始使用 <a href="https://locust.io/">Local</a></p><span id="more"></span><h4 id="安装-Locust"><a href="#安装-Locust" class="headerlink" title="安装 Locust"></a>安装 Locust</h4><p>安装 locast 和 geventhttpclient。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">pip3 install locast, geventhttpclient<br><br># 查看是否安装成功<br>locust -v<br></code></pre></td></tr></table></figure><blockquote><p>若安装失败，<a href="https://github.com/locustio/locust/wiki/Installation">点击这排查问题</a></p></blockquote><h4 id="locust-快速入门"><a href="#locust-快速入门" class="headerlink" title="locust 快速入门"></a>locust 快速入门</h4><h5 id="编写执行文本"><a href="#编写执行文本" class="headerlink" title="编写执行文本"></a>编写执行文本</h5><p>导入 locust.HttpUser 即可编写简单的 locust 文件。</p><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># mylocast.py</span><br><br><span class="hljs-keyword">from</span> locust <span class="hljs-keyword">import</span> HttpUser, between<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">updateVesion</span>(<span class="hljs-title class_ inherited__">Httpset</span>):<br>  <br>    <span class="hljs-comment"># 若在类中申明了host属性，则不需要再命令行中另行申明--host,若在命令行中另行申明了-host，则不再使用该host属性</span><br>    host = <span class="hljs-string">&#x27;http://118.190.124.69:7080&#x27;</span><br><span class="hljs-meta">    @task</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">updateTest</span>(<span class="hljs-params">self</span>):<br>        self.client.port(url,data)<br>        self.client.get(url)<br></code></pre></td></tr></table></figure><p>在命令行执行locust文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext"># 执行 locust 文件<br>locust -f mylocut.py<br># 执行文件中没有申明 host 或者覆盖执行文件中的host<br>locust -f mylocut.py --host=http://118.190.124.69:7080<br></code></pre></td></tr></table></figure><p>使用 @task() <a href="https://docs.python.org/zh-cn/3/library/typing.html#functions-and-decorators">装饰器</a> 传入参数，设置单个类中多个函数的执行效率；设置 weight <a href="/tags/%E5%8F%98%E9%87%8F">#变量</a> 则可以设置多个 locust 的执行效率；数字越高则代表执行效率越高<br>若需要设置等待时间，则需要导入  between 或  constant 模块，设置等待区间或者具体的等待时间， </p><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> locust <span class="hljs-keyword">import</span> HttpUser, task, between, constant<br><span class="hljs-keyword">import</span> requests<br><br><span class="hljs-string">&quot;&quot;&quot;设置多个 locust 类，变更设置执行效率&quot;&quot;&quot;</span><span class="hljs-string">&quot;</span><br><span class="hljs-string">class updateVesion(HttpUser):</span><br><span class="hljs-string">    wait_time = constant(1)</span><br><span class="hljs-string">    weight = 3</span><br><span class="hljs-string">    @task(1)</span><br><span class="hljs-string">    def updateTest(self):</span><br><span class="hljs-string">        </span><br><span class="hljs-string">        self.client.post(url=url, json=data, headers=headers)</span><br><span class="hljs-string"></span><br><span class="hljs-string">@task(3)</span><br><span class="hljs-string">    def login(self):</span><br><span class="hljs-string">        self.client.post(url=login_url, json=data, headers=headers)</span><br><span class="hljs-string"></span><br><span class="hljs-string">class loginTest(HttpUser):</span><br><span class="hljs-string">    wait_time = between(1.3, 2.1)</span><br><span class="hljs-string">    weight = 1</span><br><span class="hljs-string"></span><br><span class="hljs-string">    def logout(self):</span><br><span class="hljs-string">        headers = &#123;&quot;</span>Content-<span class="hljs-type">Type</span><span class="hljs-string">&quot;: &quot;</span>application/json<span class="hljs-string">&quot;&#125;</span><br><span class="hljs-string">        url = &quot;</span>/city-api/wx/logout?token=tangsx<span class="hljs-string">&quot;</span><br><span class="hljs-string">        data = &#123;&quot;</span>USERNAME<span class="hljs-string">&quot;:&quot;</span><span class="hljs-number">17134025282</span><span class="hljs-string">&quot;&#125;</span><br><span class="hljs-string">     self.client.post(url=url, json=data, headers=headers)</span><br></code></pre></td></tr></table></figure><p>一般浏览网页时会一级级的向下点击，为模拟用户的真实操作，可以使用TaskSet 进行嵌套处理</p><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> locust <span class="hljs-keyword">import</span> HttpUser, task, between, TaskSet<br><span class="hljs-keyword">import</span> requests<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">logIn</span>(<span class="hljs-title class_ inherited__">TaskSet</span>):<br>    <br><span class="hljs-meta">    @task</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">login</span>(<span class="hljs-params">self</span>):<br>        self.client.post(url=url,json=data, headers=headers)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">update</span>(<span class="hljs-title class_ inherited__">TaskSet</span>):<br>    tasks = [logIn]<br>    <br><span class="hljs-meta">    @task</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">updateTest</span>(<span class="hljs-params">self</span>):<br>        self.client.post(url=url, json=data, headers=headers)<br>        <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">runLog</span>(<span class="hljs-title class_ inherited__">HttpUser</span>):<br>    <span class="hljs-comment"># tasks是python的可调用函数，他们接受一个参数——正在执行任务的TaskSet类实例</span><br>    <br>    tasks = [logOut]<br>    wait_time = between(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure><p>两个Locust类并行，并设置执行比例</p><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">logIn</span>(<span class="hljs-title class_ inherited__">TaskSet</span>):<br>...<br>...<br>...<br>        <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">runLog</span>(<span class="hljs-title class_ inherited__">HttpUser</span>):<br>    <span class="hljs-comment"># tasks是python的可调用函数，他们接受一个参数——正在执行任务的TaskSet类实例</span><br>    <br>    tasks = &#123;logIn:<span class="hljs-number">3</span>, update: <span class="hljs-number">1</span>&#125;<br>    wait_time = between(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure><p>设置 Locust 的 csv 文件写入速度</p><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> locust.stats<br>locust.stats.CSV_STATS_INTERVAL_SEC = <span class="hljs-number">5</span> <span class="hljs-comment"># 默认为2s</span><br></code></pre></td></tr></table></figure><h5 id="命令行命令"><a href="#命令行命令" class="headerlink" title="命令行命令"></a>命令行命令</h5><p>设置无界面运行</p><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">locust -f [文件名] --host[网址] --headless [无Web_UI] -u [模拟用户数] -r [用户孵化数] -t [运行时间]<br><span class="hljs-meta prompt_"># </span><span class="language-bash">设置无界面运行的关键参数</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#  --headless</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">若执行文件没有写明，以下为必填参数</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># -r 用户孵化数，模拟的真实的用户</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># -u 模拟用户数</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">选填参数</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># -t 设置运行时间，单位时(h)、分(m)、秒(s), 和 --headless 进行关联</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># --csv=[文件名]  以 csv 格式储存当前测试数据</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># -L 级别为[DEBUG/INFO/WARNING/ERROR/CRITICAL], 默认为INFO</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># --logfile=[路径]  log日志的储存路径，若没有设置则在stdout/stderr</span></span><br><br></code></pre></td></tr></table></figure><p>多机器分布测试</p><p>主机和分机需要在同一个局域网下，或者设置的ip为外网；主机只显示测试数据，不执行性能测试，且主机和分机的执行文件需要一致</p><p>主机的执行的命令行</p><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">Locust -f [文件名] --master<br><span class="hljs-meta prompt_"># </span><span class="language-bash">可选参数</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">--master-bind-host = [IP] 将主机绑定到特定的网络上，若不填写则为本机默认的ipv4网络</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">--master-bind-prot = [port] 设置主机的监听端口，默认为5557， 会占用两个端口，为指定端口+1和指定端口</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">--expect-workers = [数量] 等待X个分机连接后，进行测试（命令行模式下使用）</span><br></code></pre></td></tr></table></figure><p> 分机执行的命令行</p><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">locust -f [文件名] --worker<br><span class="hljs-meta prompt_"># </span><span class="language-bash">--master-host = [ip] 值和主机设置的值一致；必填</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">--master-port = [port] 值和主机设置的值一致；若主机没有特殊指定，则分机不需要特殊设置</span><br></code></pre></td></tr></table></figure><h4 id="提高Http请求性能"><a href="#提高Http请求性能" class="headerlink" title="提高Http请求性能"></a>提高Http请求性能</h4><p>通过FastHttpLocust提高Locust的Http请求性能</p><blockquote><ol><li>通常情况下我们只需要使用 requests 来实现HTTP请求，若执行脚本时花费了大量的CPU时间，可以切换到 FastHttpLocust</li><li>FastHttpLocust 无法完全替代 HttpLocust。</li></ol></blockquote><p>示例代码</p><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> locust <span class="hljs-keyword">import</span> TaskSet, task, between<br><span class="hljs-keyword">from</span> locust.contrib.fasthttp <span class="hljs-keyword">import</span> FastHttpLocust<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyTaskSet</span>(<span class="hljs-title class_ inherited__">TaskSet</span>):<br><span class="hljs-meta">    @task</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>(<span class="hljs-params">self</span>):<br>        response = self.client.get(<span class="hljs-string">&quot;/&quot;</span>)<br>    <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyLocust</span>(<span class="hljs-title class_ inherited__">FastHttpLocust</span>):<br>    tasks = [MyTaskSet]<br>    wait_time = between(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure><hr><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p>[1] <a href="https://www.axihe.com/tools/locust/home.html">阿西河博客</a><br>[2] <a href="https://docs.locust.io/">Locust IO文档</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;locast 是一種易於使用、可編寫脚本且可擴展的性能測試工具。&lt;/p&gt;
&lt;p&gt;在常規 Python 代碼中定義用戶的行爲。&lt;/p&gt;
&lt;p&gt;開始使用 &lt;a href=&quot;https://locust.io/&quot;&gt;Local&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="性能测试" scheme="https://blog.lain.buzz/tags/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
    
    <category term="Python" scheme="https://blog.lain.buzz/tags/Python/"/>
    
    <category term="Locust" scheme="https://blog.lain.buzz/tags/Locust/"/>
    
    <category term="测试" scheme="https://blog.lain.buzz/tags/%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Python修饰器</title>
    <link href="https://blog.lain.buzz/tech/code_Python%E8%A7%A3%E9%87%8A%E5%99%A8/"/>
    <id>https://blog.lain.buzz/tech/code_Python%E8%A7%A3%E9%87%8A%E5%99%A8/</id>
    <published>2020-04-23T00:00:05.000Z</published>
    <updated>2023-05-01T12:48:59.795Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="修饰器的作用"><a href="#修饰器的作用" class="headerlink" title="修饰器的作用"></a><strong>修饰器的作用</strong></h3><ol><li>修饰器本质上是一个Python函数，它可以让其他函数在不需要做任何代码变动的前提下增加额外功能</li><li>python的修饰器是一种语法糖（Syntactic Sugar）</li></ol><span id="more"></span><ul><li><p>实例</p><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 示例1</span><br><span class="hljs-meta">@funA</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">funB</span>():<br>    <span class="hljs-keyword">pass</span><br><span class="hljs-comment"># 示例2， 实例1是示例2的简写，即示例1=示例2</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">funB</span>():<br>    <span class="hljs-keyword">pass</span><br>funB =funA(funB)<br></code></pre></td></tr></table></figure></li></ul><h3 id="修饰函数"><a href="#修饰函数" class="headerlink" title="修饰函数"></a><strong>修饰函数</strong></h3><p>修饰器的用法之一是修饰新定义的函数，修饰器通常用于<font color="red">扩展函数的行为或属性</font></p><ol><li><p>示例（函数作为修饰器）</p><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">log</span>(<span class="hljs-params">func</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">wraper</span>():<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;INFO: String &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(func.__name__))<br>        func()<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;INFO: Finishing &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(func.__name__))<br>    <span class="hljs-keyword">return</span> wraper<br><br><span class="hljs-meta">@log</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Running run...&quot;</span>)<br>run()<br>-------------------------------------------------------------------------------------------------<br>&gt;&gt;&gt;<br>INFO: String run<br>Running run...<br>INFO: Finshing run<br></code></pre></td></tr></table></figure></li></ol><h3 id="修饰类"><a href="#修饰类" class="headerlink" title="修饰类"></a><strong>修饰类</strong></h3><ol><li><p>示例(函数作为修饰器)</p><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> time <span class="hljs-keyword">import</span> time, sleep<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">timer</span>(<span class="hljs-params">Cls</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">wraper</span>():<br>        s = time()<br>        obj = Cls()<br>        e = time()<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Cost &#123;:.4f&#125;s to init.&quot;</span>.<span class="hljs-built_in">format</span>(e -s))<br>        <span class="hljs-keyword">return</span> obj<br>    <span class="hljs-keyword">return</span> wraper<br><br><span class="hljs-meta">@timer</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Obj</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Hello&quot;</span>)<br>        sleep(<span class="hljs-number">2</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Obj&quot;</span>)<br><br>Obj()<br>--------------------------------------------------------------------------------------------------<br>&gt;&gt;&gt;<br>Hello<br>Obj<br>Cost <span class="hljs-number">2.0476</span>s to init.<br></code></pre></td></tr></table></figure></li></ol><h3 id="类作为修饰器"><a href="#类作为修饰器" class="headerlink" title="类作为修饰器"></a><strong>类作为修饰器</strong></h3><p>只有函数才可以被调用，除了函数以外也可以定义被调用的类，只要添加 <font color="red">_<em>call</em>_</font> 方法即可</p><ol><li>示例</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">HTML</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    Baking HTML Tags!</span><br><span class="hljs-string">    修饰HTML标签</span><br><span class="hljs-string"></span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, tag=<span class="hljs-string">&#x27;p&#x27;</span></span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;LOG: Baking Tag &lt;&#123;&#125;&gt;&quot;</span>.<span class="hljs-built_in">format</span>(tag))<br>        self.tag = tag<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__call__</span>(<span class="hljs-params">self, func</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">lambda</span>: <span class="hljs-string">&quot;&lt;&#123;0&#125;&gt;&#123;1&#125;&lt;/&#123;0&#125;&gt;&quot;</span>.<span class="hljs-built_in">format</span>(self.tag, func())<br><br><span class="hljs-meta">@HTML(<span class="hljs-params"><span class="hljs-string">&quot;html&quot;</span></span>)</span><br><span class="hljs-meta">@HTML(<span class="hljs-params"><span class="hljs-string">&quot;body&quot;</span></span>)</span><br><span class="hljs-meta">@HTML(<span class="hljs-params"><span class="hljs-string">&quot;div&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">body</span>():<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Hello, World&quot;</span> <br>    <br><span class="hljs-built_in">print</span>(body())<br>--------------------------------------------------------------<br>&gt;&gt;&gt;<br>LOG: Baking Tag &lt;html&gt;<br>LOG: Baking Tag &lt;body&gt;<br>LOG: Baking Tag &lt;div&gt;<br>&lt;html&gt;&lt;body&gt;&lt;div&gt;Hello, World&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;<br></code></pre></td></tr></table></figure><ol start="2"><li>函数解析</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">lambda</span>: <span class="hljs-string">&quot;&lt;&#123;0&#125;&gt;&#123;1&#125;&lt;/&#123;0&#125;&gt;&quot;</span>.<span class="hljs-built_in">format</span>(self.tag, func())<br><span class="hljs-comment"># lambda 匿名函数，“:”左边为返回值，</span><br><span class="hljs-comment"># format 格式化函数，</span><br><span class="hljs-comment"># &#123;&#125; 不指定参数位置 eg：&quot;&#123;&#125; &#123;&#125;&quot;.format(&quot;Hello&quot;, &quot;World&quot;)</span><br><span class="hljs-comment"># &#123;x&#125; 指定参数位置 eg: &quot;&#123;0&#125; &#123;1&#125;&quot;.format(&quot;Hello&quot;, &quot;World&quot;)</span><br></code></pre></td></tr></table></figure><h3 id="传递参数"><a href="#传递参数" class="headerlink" title="传递参数"></a><strong>传递参数</strong></h3><p>在实际的使用过程中可能需要想修饰器传递参数，可能需要想被修饰的函数（或类）传递参数，如上方示例中</p><p><font color='orange'>@HTML(‘html’)</font> </p><ol><li><p>示例</p><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">RULES = &#123;&#125;<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">route</span>(<span class="hljs-params">rule</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">decorator</span>(<span class="hljs-params">hand</span>):<br>        RULES.update(&#123;rule: hand&#125;)<br>        <span class="hljs-keyword">return</span> hand<br>    <span class="hljs-keyword">return</span> decorator<br><br><span class="hljs-meta">@route(<span class="hljs-params"><span class="hljs-string">&quot;/&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;XIONG JUM&quot;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">home</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Hello, World!&quot;</span>)<br>home = route(<span class="hljs-string">&quot;/home&quot;</span>)(home)<br><br>index()<br>home()<br><span class="hljs-built_in">print</span>(RULES)<br><span class="hljs-built_in">print</span>(index)<br>--------------------------------------------------------------------------------------------------<br>&gt;&gt;&gt;<br>XIONG JUM<br>Hello, World!<br>&#123;<span class="hljs-string">&#x27;/&#x27;</span>: &lt;function index at <span class="hljs-number">0x000001C605A35B80</span>&gt;, <span class="hljs-string">&#x27;/home&#x27;</span>: &lt;function home at <span class="hljs-number">0x000001C605A35AF0</span>&gt;&#125;<br>&lt;function index at <span class="hljs-number">0x000001C605A35B80</span>&gt;<br></code></pre></td></tr></table></figure></li><li><p>函数解析</p><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">RULES.update(&#123;rule: hand&#125;)<br><span class="hljs-comment"># update 字典的方法，更新字典的值，直接替换字典中相同键的值</span><br><span class="hljs-comment"># &lt;function index at 0x000001C605A35B80&gt; 为函数index的储存位置</span><br></code></pre></td></tr></table></figure><p>向被修饰的函数传递参数，若不进行处理，则只需要将其原模原样的返回即可</p><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@route(<span class="hljs-params"><span class="hljs-string">&quot;/login&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">login</span>(<span class="hljs-params">user=<span class="hljs-string">&#x27;user&#x27;</span>, pwd=<span class="hljs-string">&#x27;pwd&#x27;</span></span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;DB.findOne(&#123;&#123;&#123;&#125;, &#123;&#125;&#125;&#125;)&quot;</span>.<span class="hljs-built_in">format</span>(user, pwd))<br>login(<span class="hljs-string">&quot;hail&quot;</span>, <span class="hljs-string">&quot;python&quot;</span>)<br>--------------------------------------------------------------------------------------------------<br>&gt;&gt;&gt;<br>DB.findOne(&#123;hail, python&#125;)<br></code></pre></td></tr></table></figure><p>如果需要在修饰器内执行，见<font color='red'>修饰函数的示例</font></p></li></ol>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;修饰器的作用&quot;&gt;&lt;a href=&quot;#修饰器的作用&quot; class=&quot;headerlink&quot; title=&quot;修饰器的作用&quot;&gt;&lt;/a&gt;&lt;strong&gt;修饰器的作用&lt;/strong&gt;&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;修饰器本质上是一个Python函数，它可以让其他函数在不需要做任何代码变动的前提下增加额外功能&lt;/li&gt;
&lt;li&gt;python的修饰器是一种语法糖（Syntactic Sugar）&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    
    <category term="python" scheme="https://blog.lain.buzz/tags/python/"/>
    
    <category term="修饰器" scheme="https://blog.lain.buzz/tags/%E4%BF%AE%E9%A5%B0%E5%99%A8/"/>
    
  </entry>
  
</feed>
