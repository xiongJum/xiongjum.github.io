<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Ocean 主題配置</title>
    <url>/2021/10/29/blog_Hexo%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>Ocean 是基于 Hexo 默认主题 landscape 的功能，设计的一款支持移动设备的主题，并且集成了 Gitalk 与 Valine 评论功能。</p>
<p>如果你喜欢 Ocean 可以从 <a href="https://github.com/zhwangart/hexo-theme-ocean" target="_blank" rel="noopener">GitHub</a> 下载，主题默认使用 Logo 是 Hexo 的 Logo，更换 Logo 路径在 ocean/source/images/hexo.svg ，注意它还有一个反色版 hexo-inverted.svg ，如果你更改了文件名，那么还需要在 ocean/_config.yml 做对应的修改。</p>
<p>详细文档见 <a href="https://zhwangart.com/2018/11/30/Ocean/" target="_blank" rel="noopener">Ocean 文档</a>，以下是个人的需要的配置</p>
<a id="more"></a>


<h1 id="1-安装"><a href="#1-安装" class="headerlink" title="1. 安装"></a>1. 安装</h1><p>下载安装</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span> https://github.com/zhwangart/hexo-theme-ocean.git themes/ocean</span></span><br></pre></td></tr></table></figure>

<p>更新</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cd themes&#x2F;ocean</span><br><span class="line">$ git pull</span><br></pre></td></tr></table></figure>

<h1 id="2-配置"><a href="#2-配置" class="headerlink" title="2. 配置"></a>2. 配置</h1><h2 id="2-1-添加页面"><a href="#2-1-添加页面" class="headerlink" title="2.1 添加页面"></a>2.1 添加页面</h2><p>Ocean 默认在主题配置文件中配置相册和关于的链接， 但是主题中实际上并没有此页面，点击会提示 404 。可以按照需要进行删除和安装。</p>
<h3 id="2-1-1-安装存在格式的页面"><a href="#2-1-1-安装存在格式的页面" class="headerlink" title="2.1.1 安装存在格式的页面"></a>2.1.1 安装存在格式的页面</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo new page gallery    &#x2F;&#x2F; 创建相册页面</span><br><span class="line">hexo new page about      &#x2F;&#x2F; 创建关于页面</span><br><span class="line">hexo new page tags       &#x2F;&#x2F; 创建标签页面</span><br><span class="line">hexo new page categories &#x2F;&#x2F; 创建分类页面</span><br><span class="line">hexo new page favorites  &#x2F;&#x2F; 创建收藏页面</span><br></pre></td></tr></table></figure>

<p>主题会根据不同的页面定义不同的模板(theme/layout/), 需要在 index.md 文件中的 Front-matter 区域标注 layout， 以 Tags 页面为例：</p>
<p>1，位置处在 source/tag/index.md</p>
<p>2，Markdown</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 标签</span><br><span class="line">date: 2021-10-31</span><br><span class="line">type: tags</span><br><span class="line">layout: "tags"</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<p>3，配置后需要在 themes/ocean/_config.yml 文件中的 menu 下新增页面， 如 about 。</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">menu:</span><br><span class="line"><span class="code">    关于: about/</span></span><br></pre></td></tr></table></figure>

<h4 id="2-1-1-1-增加收藏页面"><a href="#2-1-1-1-增加收藏页面" class="headerlink" title="2.1.1.1 增加收藏页面"></a>2.1.1.1 增加收藏页面</h4><ol>
<li><p>新增一个收藏页面</p>
</li>
<li><p>修改 navbar.styl 文件中的 favorites 展示图标，注意顺序。</p>
</li>
<li><p>编辑 favorites/index.md 文件</p>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">### 样机 Mockups</span><br><span class="line"></span><br><span class="line">&lt;div class&#x3D;&quot;card-quote&quot;&gt;</span><br><span class="line"></span><br><span class="line">![Graphics](&#x2F;images&#x2F;logos&#x2F;lstoreLogo.svg)</span><br><span class="line">#### Graphics</span><br><span class="line">高质量的样机素材</span><br><span class="line">[https:&#x2F;&#x2F;www.ls.graphics](https:&#x2F;&#x2F;www.ls.graphics)</span><br><span class="line"></span><br><span class="line">![sketchsheets](&#x2F;images&#x2F;logos&#x2F;sketchLogo.svg)</span><br><span class="line">#### Sketchsheets</span><br><span class="line">Sketch 稿件的样机素材</span><br><span class="line">[https:&#x2F;&#x2F;sketchsheets.com](https:&#x2F;&#x2F;sketchsheets.com)</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<h2 id="2-2-插件"><a href="#2-2-插件" class="headerlink" title="2.2  插件"></a>2.2  插件</h2><h3 id="2-2-1-开启插件"><a href="#2-2-1-开启插件" class="headerlink" title="2.2.1 开启插件"></a>2.2.1 开启插件</h3><h4 id="2-2-1-1-本地检索-hexo-generator-search"><a href="#2-2-1-1-本地检索-hexo-generator-search" class="headerlink" title="2.2.1.1  本地检索 hexo-generator-search"></a>2.2.1.1  本地检索 <a href="https://github.com/wzpan/hexo-generator-search" target="_blank" rel="noopener">hexo-generator-search</a></h4><p>1，安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure>

<p>2，配置</p>
<p>2.1，Hexo 的配置文件 _config.yml 添加插件配置</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 本地搜索</span></span><br><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span></span><br><span class="line">  <span class="attr">content:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h4 id="2-2-1-2-博客文章置顶-hexo-generator-index-pin-top"><a href="#2-2-1-2-博客文章置顶-hexo-generator-index-pin-top" class="headerlink" title="2.2.1.2 博客文章置顶 hexo-generator-index-pin-top"></a>2.2.1.2 博客文章置顶 <a href="https://github.com/netcan/hexo-generator-index-pin-top" target="_blank" rel="noopener">hexo-generator-index-pin-top</a></h4><p>1，安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm uninstall hexo-generator-index --save</span><br><span class="line">npm install hexo-generator-index-pin-top --save</span><br></pre></td></tr></table></figure>

<p>2，在需要置顶文章的 Front-matter 区域加上 top: ture， 即可开启文章置顶</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title : Ocean 配置</span><br><span class="line">top: ture</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<h3 id="2-2-2-修改配置文件"><a href="#2-2-2-修改配置文件" class="headerlink" title="2.2.2 修改配置文件"></a>2.2.2 修改配置文件</h3><h4 id="2-2-2-1-文章封面图"><a href="#2-2-2-1-文章封面图" class="headerlink" title="2.2.2.1 文章封面图"></a>2.2.2.1 文章封面图</h4><p>1，添加</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title:  Ocean 配置</span><br><span class="line">photos: [</span><br><span class="line">        [&quot;&#x2F;images&#x2F;相机.jpg&quot;], &#x2F;&#x2F; themes&#x2F;ocean&#x2F;source&#x2F;images 目录下</span><br><span class="line">        [&quot;img_url&quot;] &#x2F;&#x2F; 使用 http 链接</span><br><span class="line">        ]</span><br><span class="line">---</span><br></pre></td></tr></table></figure>
<p><em>设置 Hexo 博客的封面图，而不是博客的配图</em></p>
<h4 id="2-2-2-2-Toc-文章目录"><a href="#2-2-2-2-Toc-文章目录" class="headerlink" title="2.2.2.2 Toc 文章目录"></a>2.2.2.2 Toc 文章目录</h4><p>1，配置文件路径为 ocean/_config.yml</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Toc 文章目录</span><br><span class="line">toc: true</span><br></pre></td></tr></table></figure>

<p>2，開啓 Toc 后, 在文章 Front-matter 中設置 toc 進行部分關閉。</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: Toc 文章目录</span><br><span class="line">toc: false</span><br><span class="line">---</span><br></pre></td></tr></table></figure>
<p><em>使用 <a href="http://tscanlin.github.io/tocbot/" target="_blank" rel="noopener">Tocbot</a> 解析内容中的标题标签（h1~h6）并插入目录。</em>  </p>
<h4 id="2-2-2-3-修改導航欄圖標"><a href="#2-2-2-3-修改導航欄圖標" class="headerlink" title="2.2.2.3 修改導航欄圖標"></a>2.2.2.3 修改導航欄圖標</h4><p>1，修改主页、相册等图标，需要修改 css 文件，其所在位置在目录 source/css/_partial/navbar.styl 中， 修改时需要注意对应的顺序<br>2，修改 icon，需要替换 themes/ocean/source/favicon.ico 图片文件</p>
<h4 id="2-2-2-4-刪除鏈接文字的下劃綫"><a href="#2-2-2-4-刪除鏈接文字的下劃綫" class="headerlink" title="2.2.2.4 刪除鏈接文字的下劃綫"></a>2.2.2.4 刪除鏈接文字的下劃綫</h4><p>1，配置文件的路勁為 ocean/source/css/style.styl。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">a</span></span><br><span class="line">  <span class="selector-tag">color</span> <span class="selector-tag">link-color</span></span><br><span class="line">  &amp;<span class="selector-pseudo">:hover</span></span><br><span class="line">    <span class="selector-tag">color</span> <span class="selector-tag">link-hover-color</span></span><br><span class="line">  &amp;<span class="selector-pseudo">:active</span></span><br><span class="line">    <span class="selector-tag">color</span> <span class="selector-tag">link-active-color</span></span><br><span class="line">  &amp;<span class="selector-class">.disabled</span></span><br><span class="line">    <span class="selector-tag">color</span> <span class="selector-tag">disabled-color</span></span><br><span class="line"></span><br><span class="line">//  为</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span></span><br><span class="line">  <span class="selector-tag">color</span> <span class="selector-tag">link-color</span></span><br><span class="line">  <span class="selector-tag">text-decoration</span> <span class="selector-tag">none</span></span><br><span class="line">  &amp;<span class="selector-pseudo">:hover</span></span><br><span class="line">    <span class="selector-tag">color</span> <span class="selector-tag">link-hover-color</span></span><br><span class="line">    <span class="selector-tag">text-decoration</span> <span class="selector-tag">none</span></span><br><span class="line">  &amp;<span class="selector-pseudo">:active</span></span><br><span class="line">    <span class="selector-tag">color</span> <span class="selector-tag">link-active-color</span></span><br><span class="line">  &amp;<span class="selector-class">.disabled</span></span><br><span class="line">    <span class="selector-tag">color</span> <span class="selector-tag">disabled-color</span></span><br></pre></td></tr></table></figure>

<h4 id="2-2-2-5-配置語言"><a href="#2-2-2-5-配置語言" class="headerlink" title="2.2.2.5 配置語言"></a>2.2.2.5 配置語言</h4><p>1，配置文件的目錄為 _config.yml。</p>
<ul>
<li>language 的值为空时默认为 en</li>
<li>language 的配置文件位置为 themes/ocean/languages/</li>
</ul>
<p><em>若本主題的導航文字，需要直接修改主题配置文件（_config.yml）中的 menu</em></p>
<h4 id="2-2-2-6-取消文章的分享鏈接"><a href="#2-2-2-6-取消文章的分享鏈接" class="headerlink" title="2.2.2.6 取消文章的分享鏈接"></a>2.2.2.6 取消文章的分享鏈接</h4><p>1，配置文件的路勁為 themes\ocean\layout_partial\footer.ejs。注釋以下代碼</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 显示分享按钮</span></span><br><span class="line"><span class="comment">      &lt;a data-url="&lt;%- post.permalink %&gt;" data-id="&lt;%= post._id %&gt;" class="article-share-link"&gt;</span></span><br><span class="line"><span class="comment">        &lt;%= __('share') %&gt;</span></span><br><span class="line"><span class="comment">      &lt;/a&gt;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure>




]]></content>
      <tags>
        <tag>Hexo</tag>
        <tag>Ocean</tag>
        <tag>Theme</tag>
        <tag>blog</tag>
      </tags>
  </entry>
  <entry>
    <title>性能测试 for Locust</title>
    <url>/2020/05/27/code_Locust/</url>
    <content><![CDATA[<p>locast 是一種易於使用、可編寫脚本且可擴展的性能測試工具。</p>
<p>在常規 Python 代碼中定義用戶的行爲。</p>
<p>開始使用 <a href="https://locust.io/" target="_blank" rel="noopener">Local</a></p>
<a id="more"></a>


<h4 id="安装-Locust"><a href="#安装-Locust" class="headerlink" title="安装 Locust"></a>安装 Locust</h4><p>安装 locast 和 geventhttpclient。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip3 install locast, geventhttpclient</span><br><span class="line"></span><br><span class="line"># 查看是否安装成功</span><br><span class="line">locust -v</span><br></pre></td></tr></table></figure>

<blockquote>
<p>若安装失败，<a href="https://github.com/locustio/locust/wiki/Installation" target="_blank" rel="noopener">点击这排查问题</a></p>
</blockquote>
<h4 id="locust-快速入门"><a href="#locust-快速入门" class="headerlink" title="locust 快速入门"></a>locust 快速入门</h4><h5 id="编写执行文本"><a href="#编写执行文本" class="headerlink" title="编写执行文本"></a>编写执行文本</h5><p>导入 locust.HttpUser 即可编写简单的 locust 文件。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># mylocast.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> locust <span class="keyword">import</span> HttpUser, between</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">updateVesion</span><span class="params">(Httpset)</span>:</span></span><br><span class="line">  </span><br><span class="line">    <span class="comment"># 若在类中申明了host属性，则不需要再命令行中另行申明--host,若在命令行中另行申明了-host，则不再使用该host属性</span></span><br><span class="line">    host = <span class="string">'http://118.190.124.69:7080'</span></span><br><span class="line"><span class="meta">    @task</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">updateTest</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.client.port(url,data)</span><br><span class="line">        self.client.get(url)</span><br></pre></td></tr></table></figure>

<p>在命令行执行locust文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 执行 locust 文件</span><br><span class="line">locust -f mylocut.py</span><br><span class="line"># 执行文件中没有申明 host 或者覆盖执行文件中的host</span><br><span class="line">locust -f mylocut.py --host&#x3D;http:&#x2F;&#x2F;118.190.124.69:7080</span><br></pre></td></tr></table></figure>

<p>使用 @task() <a href="https://docs.python.org/zh-cn/3/library/typing.html#functions-and-decorators" target="_blank" rel="noopener">装饰器</a> 传入参数，设置单个类中多个函数的执行效率；设置 weight <a href="/tags/变量">#变量</a> 则可以设置多个 locust 的执行效率；数字越高则代表执行效率越高<br>若需要设置等待时间，则需要导入  between 或  constant 模块，设置等待区间或者具体的等待时间， </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> locust <span class="keyword">import</span> HttpUser, task, between, constant</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="string">"""设置多个 locust 类，变更设置执行效率"""</span><span class="string">"</span></span><br><span class="line"><span class="string">class updateVesion(HttpUser):</span></span><br><span class="line"><span class="string">    wait_time = constant(1)</span></span><br><span class="line"><span class="string">    weight = 3</span></span><br><span class="line"><span class="string">    @task(1)</span></span><br><span class="line"><span class="string">    def updateTest(self):</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        self.client.post(url=url, json=data, headers=headers)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">	@task(3)</span></span><br><span class="line"><span class="string">    def login(self):</span></span><br><span class="line"><span class="string">        self.client.post(url=login_url, json=data, headers=headers)</span></span><br><span class="line"><span class="string">		</span></span><br><span class="line"><span class="string">class loginTest(HttpUser):</span></span><br><span class="line"><span class="string">    wait_time = between(1.3, 2.1)</span></span><br><span class="line"><span class="string">    weight = 1</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">    def logout(self):</span></span><br><span class="line"><span class="string">        headers = &#123;"</span>Content-Type<span class="string">": "</span>application/json<span class="string">"&#125;</span></span><br><span class="line">        url = "/city-api/wx/logout?token=tangsx"</span><br><span class="line">        data = &#123;<span class="string">"USERNAME"</span>:<span class="string">"17134025282"</span>&#125;</span><br><span class="line">     	self.client.post(url=url, json=data, headers=headers)</span><br></pre></td></tr></table></figure>

<p>一般浏览网页时会一级级的向下点击，为模拟用户的真实操作，可以使用TaskSet 进行嵌套处理</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> locust <span class="keyword">import</span> HttpUser, task, between, TaskSet</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">logIn</span><span class="params">(TaskSet)</span>:</span></span><br><span class="line">    </span><br><span class="line"><span class="meta">    @task</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.client.post(url=url,json=data, headers=headers)</span><br><span class="line">		</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">update</span><span class="params">(TaskSet)</span>:</span></span><br><span class="line">    tasks = [logIn]</span><br><span class="line">    </span><br><span class="line"><span class="meta">    @task</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">updateTest</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.client.post(url=url, json=data, headers=headers)</span><br><span class="line">        </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">runLog</span><span class="params">(HttpUser)</span>:</span></span><br><span class="line">    <span class="comment"># tasks是python的可调用函数，他们接受一个参数——正在执行任务的TaskSet类实例</span></span><br><span class="line">    </span><br><span class="line">    tasks = [logOut]</span><br><span class="line">    wait_time = between(<span class="number">1</span>,<span class="number">2</span>)</span><br></pre></td></tr></table></figure>

<p>两个Locust类并行，并设置执行比例</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">logIn</span><span class="params">(TaskSet)</span>:</span></span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">        </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">runLog</span><span class="params">(HttpUser)</span>:</span></span><br><span class="line">    <span class="comment"># tasks是python的可调用函数，他们接受一个参数——正在执行任务的TaskSet类实例</span></span><br><span class="line">    </span><br><span class="line">    tasks = &#123;logIn:<span class="number">3</span>, update: <span class="number">1</span>&#125;</span><br><span class="line">    wait_time = between(<span class="number">1</span>,<span class="number">2</span>)</span><br></pre></td></tr></table></figure>

<p>设置 Locust 的 csv 文件写入速度</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> locust.stats</span><br><span class="line">locust.stats.CSV_STATS_INTERVAL_SEC = <span class="number">5</span> <span class="comment"># 默认为2s</span></span><br></pre></td></tr></table></figure>

<h5 id="命令行命令"><a href="#命令行命令" class="headerlink" title="命令行命令"></a>命令行命令</h5><p>设置无界面运行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">locust -f [文件名] --host[网址] --headless [无Web_UI] -u [模拟用户数] -r [用户孵化数] -t [运行时间]</span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置无界面运行的关键参数</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#  --headless</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 若执行文件没有写明，以下为必填参数</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># -r 用户孵化数，模拟的真实的用户</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># -u 模拟用户数</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 选填参数</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># -t 设置运行时间，单位时(h)、分(m)、秒(s), 和 --headless 进行关联</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># --csv=[文件名]  以 csv 格式储存当前测试数据</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># -L 级别为[DEBUG/INFO/WARNING/ERROR/CRITICAL], 默认为INFO</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># --logfile=[路径]  log日志的储存路径，若没有设置则在stdout/stderr</span></span></span><br></pre></td></tr></table></figure>


<p>多机器分布测试</p>
<p>主机和分机需要在同一个局域网下，或者设置的ip为外网；主机只显示测试数据，不执行性能测试，且主机和分机的执行文件需要一致</p>
<p>主机的执行的命令行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Locust -f [文件名] --master</span><br><span class="line"><span class="meta">#</span><span class="bash"> 可选参数</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> --master-bind-host = [IP] 将主机绑定到特定的网络上，若不填写则为本机默认的ipv4网络</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> --master-bind-prot = [port] 设置主机的监听端口，默认为5557， 会占用两个端口，为指定端口+1和指定端口</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> --expect-workers = [数量] 等待X个分机连接后，进行测试（命令行模式下使用）</span></span><br></pre></td></tr></table></figure>

<p> 分机执行的命令行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">locust -f [文件名] --worker</span><br><span class="line"><span class="meta">#</span><span class="bash"> --master-host = [ip] 值和主机设置的值一致；必填</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> --master-port = [port] 值和主机设置的值一致；若主机没有特殊指定，则分机不需要特殊设置</span></span><br></pre></td></tr></table></figure>

<h4 id="提高Http请求性能"><a href="#提高Http请求性能" class="headerlink" title="提高Http请求性能"></a>提高Http请求性能</h4><p>通过FastHttpLocust提高Locust的Http请求性能</p>
<blockquote>
<ol>
<li>通常情况下我们只需要使用 requests 来实现HTTP请求，若执行脚本时花费了大量的CPU时间，可以切换到 FastHttpLocust</li>
<li>FastHttpLocust 无法完全替代 HttpLocust。</li>
</ol>
</blockquote>
<p>示例代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> locust <span class="keyword">import</span> TaskSet, task, between</span><br><span class="line"><span class="keyword">from</span> locust.contrib.fasthttp <span class="keyword">import</span> FastHttpLocust</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyTaskSet</span><span class="params">(TaskSet)</span>:</span></span><br><span class="line"><span class="meta">    @task</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(self)</span>:</span></span><br><span class="line">        response = self.client.get(<span class="string">"/"</span>)</span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyLocust</span><span class="params">(FastHttpLocust)</span>:</span></span><br><span class="line">    tasks = [MyTaskSet]</span><br><span class="line">    wait_time = between(<span class="number">1</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p>[1] <a href="https://www.axihe.com/tools/locust/home.html" target="_blank" rel="noopener">阿西河博客</a><br>[2] <a href="https://docs.locust.io/" target="_blank" rel="noopener">Locust IO文档</a></p>
]]></content>
      <tags>
        <tag>性能测试</tag>
        <tag>Python</tag>
        <tag>Locust</tag>
        <tag>测试</tag>
      </tags>
  </entry>
  <entry>
    <title>pip</title>
    <url>/2021/12/24/code_PyPi/</url>
    <content><![CDATA[<p>由于某些发行版（如 pacman）会去除 pip 包管理器，则需要以下方法进行 pip的安装。<br>国内的下载速度过于缓慢，所以需要将下载源更换为国内源，来提升pip的下载速度，这里首先推荐豆瓣源。</p>
<p>安装详情请见 <a href="https://pip.pypa.io/en/stable/installation/" target="_blank" rel="noopener">pip 文档</a></p>
<a id="more"></a>

<h1 id="1-安装pip"><a href="#1-安装pip" class="headerlink" title="1. 安装pip"></a>1. 安装pip</h1><p>从以下途径安装 python，则会自动安装 pip。</p>
<ul>
<li>在虚拟环境中工作</li>
<li>从 (python.org)[<a href="https://www.python.org/]" target="_blank" rel="noopener">https://www.python.org/]</a> 中下载的 Python</li>
</ul>
<p>否则使用以下方法进行 pip 的安装</p>
<h2 id="1-1-ensurepip"><a href="#1-1-ensurepip" class="headerlink" title="1.1 ensurepip"></a>1.1 ensurepip</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Linux</span></span><br><span class="line">python -m ensurepip --upgrade</span><br><span class="line"><span class="comment"># Windows</span></span><br><span class="line">py -m ensurepip --upgrade</span><br></pre></td></tr></table></figure>
<h2 id="1-2-get-pip-py"><a href="#1-2-get-pip-py" class="headerlink" title="1.2 get-pip.py"></a>1.2 get-pip.py</h2><p>从 <a href="https://bootstrap.pypa.io/get-pip.py" target="_blank" rel="noopener">https://bootstrap.pypa.io/get-pip.py</a> 下载脚本。<br>若从linux 的命令行模式下下载，则需执行以下语句</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://bootstrap.pypa.io/get-pip.py</span><br></pre></td></tr></table></figure>
<p>请参阅 <a href="https://docs.python.org/3/library/ensurepip.html#module-ensurepip" target="_blank" rel="noopener">ensurepip</a> 获取更详细的信息。</p>
<h3 id="Linux-下安装"><a href="#Linux-下安装" class="headerlink" title="Linux 下安装"></a>Linux 下安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># (**如果需要全局安装，请执行下一条语句**)安装到当前用户下</span></span><br><span class="line">python get-pip.py</span><br><span class="line"><span class="comment"># 全局安装pip</span></span><br><span class="line">sudo python get-pip.py</span><br></pre></td></tr></table></figure>
<p>若不是全局安装 pip ，则需要将 pip 添加到环境变量中</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># ~&#x2F;.bashrc 或 ~&#x2F;.zshrc</span><br><span class="line">export PATH&#x3D;&quot;$HOME&#x2F;.local&#x2F;:$PATH&quot;</span><br></pre></td></tr></table></figure>
<p>重新进入环境变量</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br><span class="line"><span class="comment"># 或</span></span><br><span class="line"><span class="built_in">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure>

<h3 id="Windows-下安装"><a href="#Windows-下安装" class="headerlink" title="Windows 下安装"></a>Windows 下安装</h3><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">py get-pip.py</span><br></pre></td></tr></table></figure>
<p>更多请参考文档 <a href="https://github.com/pypa/get-pip" target="_blank" rel="noopener">pypa/get-pip</a></p>
<blockquote>
<p>此链接为 github，若需要良好的访问体验，请魔法上网或者其余方式</p>
</blockquote>
<h1 id="2-更新-pip"><a href="#2-更新-pip" class="headerlink" title="2. 更新 pip"></a>2. 更新 pip</h1><p>Linux</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python -m pip install --upgrade pip</span><br></pre></td></tr></table></figure>

<p>Windows</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">py -m pip install --upgrade pip</span><br></pre></td></tr></table></figure>
<p>若需要下载速度过慢可参考下文，更换为国内源</p>
<h1 id="3-更换-pip-的下载源"><a href="#3-更换-pip-的下载源" class="headerlink" title="3. 更换 pip 的下载源"></a>3. 更换 pip 的下载源</h1><h2 id="3-1-国内源"><a href="#3-1-国内源" class="headerlink" title="3.1 国内源"></a>3.1 国内源</h2><ul>
<li>豆瓣:：<a href="https://pypi.douban.com/simple/" target="_blank" rel="noopener">https://pypi.douban.com/simple/</a></li>
<li>清华：<a href="https://pypi.tuna.tsinghua.edu.cn/simple" target="_blank" rel="noopener">https://pypi.tuna.tsinghua.edu.cn/simple</a></li>
</ul>
<blockquote>
<p>建议使用豆瓣源</p>
</blockquote>
<h2 id="3-2-更换-pipy-源"><a href="#3-2-更换-pipy-源" class="headerlink" title="3.2 更换 pipy 源"></a>3.2 更换 pipy 源</h2><h3 id="临时使用"><a href="#临时使用" class="headerlink" title="临时使用"></a>临时使用</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip install -i https:&#x2F;&#x2F;pypi.tuna.tsinghua.edu.cn&#x2F;simple some-package</span><br></pre></td></tr></table></figure>

<h3 id="设置为默认值"><a href="#设置为默认值" class="headerlink" title="设置为默认值"></a>设置为默认值</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 更换 pip 源</span><br><span class="line">pip config set global.index-url https:&#x2F;&#x2F;pypi.douban.com&#x2F;simple&#x2F;</span><br></pre></td></tr></table></figure>

<h5 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h5><p>[1] <a href="https://mirror.tuna.tsinghua.edu.cn/help/pypi/" target="_blank" rel="noopener">清华大学开源软件镜像站</a><br>[2] <a href="https://pip.pypa.io/en/stable/installation/" target="_blank" rel="noopener">pip 文档</a></p>
]]></content>
      <tags>
        <tag>Python</tag>
        <tag>pip</tag>
        <tag>code</tag>
      </tags>
  </entry>
  <entry>
    <title>【浅析】Magic Method</title>
    <url>/2020/07/15/code_Python-for-MagicMethod/</url>
    <content><![CDATA[<h5 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h5><p>本文基本摘自 两点水 的<a href="">草根学Python</a>,本文仅作记录备份或者本人查阅方便，</p>
<a id="more"></a>

<h5 id="了解Magic-Method-魔术方法"><a href="#了解Magic-Method-魔术方法" class="headerlink" title="了解Magic Method(魔术方法)"></a>了解Magic Method(魔术方法)</h5><ul>
<li>双下划线包起来的方法，都统称为”魔术方法”，如”<strong>init</strong>“</li>
<li>使用魔术方法可以构造出优美的代码，将复杂的逻辑封装成简单的方法</li>
<li>使用dir()列出类中所有的魔术方法，如下例</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    print(dir(User()))</span><br></pre></td></tr></table></figure>

<pre><code>[&apos;__class__&apos;, &apos;__delattr__&apos;, &apos;__dict__&apos;, &apos;__dir__&apos;, &apos;__doc__&apos;, &apos;__eq__&apos;, &apos;__format__&apos;, &apos;__ge__&apos;, &apos;__getattribute__&apos;, &apos;__gt__&apos;, &apos;__hash__&apos;, &apos;__init__&apos;, &apos;__init_subclass__&apos;, &apos;__le__&apos;, &apos;__lt__&apos;, &apos;__module__&apos;, &apos;__ne__&apos;, &apos;__new__&apos;, &apos;__reduce__&apos;, &apos;__reduce_ex__&apos;, &apos;__repr__&apos;, &apos;__setattr__&apos;, &apos;__sizeof__&apos;, &apos;__str__&apos;, &apos;__subclasshook__&apos;, &apos;__weakref__&apos;]</code></pre><h5 id="构造-new-和初始化-init"><a href="#构造-new-和初始化-init" class="headerlink" title="构造(new)和初始化(init)"></a>构造(<strong>new</strong>)和初始化(<strong>init</strong>)</h5><ul>
<li>实际上创建类的过程是分为两步的，一步是创建类的对象，还有一部就是对类进行初始化</li>
<li>下方的例子是对类进行初始化操作</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">user = User(<span class="string">'XiongJum'</span>, <span class="number">24</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>new</strong> 是用来创建类并返回这个类的实例，而 <strong>init</strong> 只是将传入的参数来初始化该实例</li>
<li><strong>new</strong> 在创建一个实例的过程中必定会被调用， 但 <strong>init</strong> 就不一定</li>
<li>如通过 pickle.load 的方式反序化一个实例时就不会调用 <strong>init</strong> 方法 <font color=red>反序列化？</font></li>
<li>具体示例如下</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="comment"># 打印 __new__ 方法中的相关信息</span></span><br><span class="line">        print(<span class="string">'调用了 def __new__ 方法'</span>)</span><br><span class="line">        print(args)</span><br><span class="line">        <span class="comment"># 最后返回父类的方法</span></span><br><span class="line">        <span class="keyword">return</span> super(User, cls).__new__(cls)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age)</span>:</span></span><br><span class="line">        print(<span class="string">"调用了 def __init__ 方法"</span>)</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">        </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    user = User(<span class="string">'XiongJum'</span>, <span class="number">23</span>)</span><br></pre></td></tr></table></figure>

<pre><code>调用了 def __new__ 方法
(&apos;XiongJum&apos;, 23)
调用了 def __init__ 方法</code></pre><ul>
<li>通过上图示例可得知，创建一个类，先是调用了 <strong>new</strong> 方法来创建一个对象，把参数传给 <strong>init</strong>，并进行实例化</li>
<li>但是在实际的开发中，很少会用到<strong>new</strong> 方法，除非希望能够控制类的创建。</li>
</ul>
<h5 id="属性的访问控制"><a href="#属性的访问控制" class="headerlink" title="属性的访问控制"></a>属性的访问控制</h5><ul>
<li>_<em>getattr_</em>(self, name): <ul>
<li>定义了试图访问不存在的属性时的行为</li>
<li>所以重载该方法可以实现捕获错误拼写然后进行重定向，或者对一些废弃的属性进行警告</li>
</ul>
</li>
<li>_<em>setattr_</em>(self, name, value):<ul>
<li>定义了对属性进行赋值和修改操作时的行为。</li>
<li>不管对象的某个属性是否存在，都允许为该属性进行赋值(如下例的attr1)，但要避免”无限递归”的错误</li>
</ul>
</li>
<li>_<em>delattr_</em>(self, name):<ul>
<li><strong>delattr</strong> 与 <strong>setattr</strong> 很像，但它只定义的时你删除属性时的行为</li>
<li>和 <strong>setattr</strong> 一样，要避免”无限递归”的错误</li>
</ul>
</li>
<li>_<em>getattribute_</em>(self, name):<ul>
<li>定义了你的属性被访问时的行为，相比与只有该属性不存在时才会起作用的 <strong>getattr</strong>，在支持 <strong>getattribute</strong> 的Python版本中，调用 _<em>getattr_</em> 前必定会调用 <strong>getattribute</strong>。</li>
<li>如果在 <strong>getattribute</strong>(self, name) 方法下存在通过self.name 访问属性, 则会出现无限递归错误，</li>
<li>所以和 <strong>setattr</strong> 一样，要避免”无限递归”的错误</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># def __setattr__(self, name, value):</span></span><br><span class="line"><span class="comment">#     self.name = value</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># def __setattr__(self, name, value):</span></span><br><span class="line"><span class="comment">#     self.__dict__[name] = value</span></span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattr__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        print(<span class="string">"调用了 __getattr__ 方法"</span>)</span><br><span class="line">        <span class="keyword">return</span> super(User, self).__getattr__(name)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__setattr__</span><span class="params">(self, name, value)</span>:</span></span><br><span class="line">        print(<span class="string">"调用了 __setattr__ 方法"</span>)</span><br><span class="line">        <span class="keyword">return</span> super(User, self).__setattr__(name, value)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__delattr__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        print(<span class="string">"调用了 __delattr__ 方法"</span>)</span><br><span class="line">        <span class="keyword">return</span> super(User, self).__delattr__(name)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattribute__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        print(<span class="string">"调用了 __getattribute__ 方法"</span>)</span><br><span class="line">        <span class="keyword">return</span> super(User, self).__getattribute__(name)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    user = User()</span><br><span class="line">    <span class="comment"># 设置属性值，会调用 __setattr__</span></span><br><span class="line">    user.attr1 = <span class="literal">True</span></span><br><span class="line">    <span class="comment"># 属性存在，只有 __getattribute__ 调用</span></span><br><span class="line">    user.attr1</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 属性不存在 先调用 __getattribute__，后调用 __getattr__</span></span><br><span class="line">        user.attr2</span><br><span class="line">    <span class="keyword">except</span> AttributeError:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="comment"># 调用 __delattr__</span></span><br><span class="line">    <span class="keyword">del</span> user.attr1</span><br></pre></td></tr></table></figure>

<pre><code>调用了 __setattr__ 方法
调用了 __getattribute__ 方法
调用了 __getattribute__ 方法
调用了 __getattr__ 方法
调用了 __delattr__ 方法</code></pre><h5 id="对象的描述器"><a href="#对象的描述器" class="headerlink" title="对象的描述器"></a>对象的描述器</h5><ul>
<li>定义和简介<ul>
<li>一般地，一个描述器是一个包含”绑定行为”的对象,对其属性的访问被描述器协议中定义的方法覆盖。</li>
<li>这些方法有: <strong>get</strong>(), <strong>set</strong>(), <strong>delete</strong>().</li>
<li>如果某个对象中定义了这些方法中的任意一个，那么这个对象就可以被称为一个描述器</li>
<li><font color=red>下例中 MyClass 是如何传入值的？</font></li>
</ul>
</li>
<li>描述器协议<ul>
<li>descr.<strong>get</strong>(self, obj, type=None) –&gt; value</li>
<li>descr.<strong>set</strong>(self, obj, value) –&gt; None</li>
<li>descr.<strong>delete</strong>(self, obj) –&gt;None</li>
<li>定义这些方法中的任何一个对象被视为描述器，并在被作为属性时覆盖其默认行为</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name=<span class="string">'XiongJum'</span>, sex=<span class="string">'男'</span>)</span>:</span></span><br><span class="line">        self.sex = sex</span><br><span class="line">        self.name = name</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__get__</span><span class="params">(self, obj, objtype)</span>:</span></span><br><span class="line">        print(<span class="string">'获取 name 的值'</span>)</span><br><span class="line">        <span class="keyword">return</span> self.name</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__set__</span><span class="params">(self, obj, val)</span>:</span></span><br><span class="line">        print(<span class="string">'设置 name 的值'</span>)</span><br><span class="line">        self.name = val</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span><span class="params">(object)</span>:</span></span><br><span class="line">    x = User(<span class="string">'XiongJum'</span>, <span class="string">'男'</span>)</span><br><span class="line">    y = <span class="number">5</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    m = MyClass()</span><br><span class="line">    print(m.x, <span class="string">'\n'</span>)</span><br><span class="line">    </span><br><span class="line">    m.x = <span class="string">'酒明'</span></span><br><span class="line">    print(m.x, <span class="string">'\n'</span>)</span><br><span class="line">    </span><br><span class="line">    print(m.x, <span class="string">'\n'</span>)</span><br><span class="line">    </span><br><span class="line">    print(m.y)</span><br></pre></td></tr></table></figure>

<pre><code>获取 name 的值
XiongJum 

设置 name 的值
获取 name 的值
酒明 

获取 name 的值
酒明 

5</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, value=<span class="number">0.0</span>)</span>:</span></span><br><span class="line">        self.value = float(value) </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__get__</span><span class="params">(self, instance, owner)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.value</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__set__</span><span class="params">(self, instance, value)</span>:</span></span><br><span class="line">        self.value = float(value)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dis</span><span class="params">(object)</span>:</span></span><br><span class="line">    user = User()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line"></span><br><span class="line">    d = Dis()</span><br><span class="line">    print(d.user)</span><br></pre></td></tr></table></figure>

<h5 id="自定义容器"><a href="#自定义容器" class="headerlink" title="自定义容器"></a>自定义容器</h5><ul>
<li>常见的容器类型<ul>
<li>可变容器：dict，list</li>
<li>不可变容器：tuple， string</li>
</ul>
</li>
<li>可变容器和不可变容器的区别<ul>
<li>不可变容器一旦赋值后，就无法对某个元素进行修改</li>
<li>只能重新赋值或者重新覆盖全部的元素</li>
</ul>
</li>
<li>自定义容器<ul>
<li>自定义不可变容器类型： 需要定义 ‘_<em>len_</em>‘ 和 ‘_<em>getitem_</em>‘ 方法</li>
<li>自定义可变类型容器： 在不可以容器的基础上，增加定义 ‘_<em>setitem_</em>‘ 和 ‘_<em>delitem_</em>‘</li>
<li>自定义的数据类型需要迭代：需要定义 ‘_<em>iter_</em>‘</li>
<li>返回自定义容器的长度：需要实现 ‘_<em>len_</em>‘(self)</li>
<li>自定义容器可以调用 self(key)，如果 key 类型错误，抛出 TypeError, 如果没法返回 key 对应的数字时，则应该抛出 ValueError：<br>需要实现 ‘_<em>getitem_</em>(self, key)’</li>
<li>当执行 self[key] = value 时 ： 调用 ‘_<em>setitem_</em>(self, key, value)’ 方法</li>
<li>当执行 del self[key] 方法：调用的方法时 ‘_<em>delitem_</em>‘(self, key)</li>
<li>当你想你的容器可以执行 for x in container：或者使用 iter(container) 时：需实现 ‘_<em>iter_</em>(self)’,该方法返回的是一个迭代器</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FunctionalList</span>:</span></span><br><span class="line">    <span class="string">'''实现内置类型list的功能，并丰富了一些其余的方法：head, init, last, drop, take'''</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, values=None)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> values <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            self.values = []</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.values = values</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__len__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> len(self.values)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getitem__</span><span class="params">(self, key)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.values[key]</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__setitem__</span><span class="params">(self, key, value)</span>:</span></span><br><span class="line">        self.values[key] = value</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__delitem__</span><span class="params">(self, key)</span>:</span></span><br><span class="line">        <span class="keyword">del</span> self.values[key]</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> iter(self.values)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__reversed__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> FunctionalList(reversed(self.values))</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">append</span><span class="params">(self, value)</span>:</span></span><br><span class="line">        self.values.append(value)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">head</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 获取第一个元素</span></span><br><span class="line">        <span class="keyword">return</span> self.values[<span class="number">0</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">init</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 获取最后一个元素之外的所有元素</span></span><br><span class="line">        <span class="keyword">return</span> self.values[:<span class="number">-1</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">last</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 获取最后一个元素</span></span><br><span class="line">        <span class="keyword">return</span> self.values[<span class="number">-1</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">drop</span><span class="params">(self, n)</span>:</span></span><br><span class="line">        <span class="comment"># 获取第n个元素之后的元素</span></span><br><span class="line">        <span class="keyword">return</span> self.values[n:]</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">take</span><span class="params">(self, n)</span>:</span></span><br><span class="line">        <span class="comment"># 获取第n个元素之前的元素</span></span><br><span class="line">        <span class="keyword">return</span> self.values[:n]</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    num = FunctionalList([<span class="number">0</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>])</span><br><span class="line">    print(len(num), num[<span class="number">0</span>])</span><br><span class="line">    print(num.head(), num.init(), num.last(), num.init(), num.drop(<span class="number">2</span>), num.take(<span class="number">1</span>))</span><br></pre></td></tr></table></figure>

<pre><code>4 0
0 [0, 2, 4] 5 [0, 2, 4] [4, 5] [0]</code></pre><h5 id="运算符相关的魔术方法"><a href="#运算符相关的魔术方法" class="headerlink" title="运算符相关的魔术方法"></a>运算符相关的魔术方法</h5><ul>
<li>比较运算符<ul>
<li>__ cmp __(self, other). </li>
<li>__ eq __(self, other)：定义了比较操作符 == 的行为</li>
<li>__ ne __(self, other)：定义了比较操作符 != 的行为</li>
<li>__ it __(self, other)：定义了比较操作符 &lt;  的行为</li>
<li>__ gt __(self, other)：定义了比较操作符 &gt;  的行为</li>
<li>__ le __(self, other)：定义了比较操作符 &lt;= 的行为</li>
<li>__ ge __(self, other)：定义了比较操作符 &gt;= 的行为</li>
</ul>
</li>
<li>算数运算符<ul>
<li>__ add __(self, other)：实现加法运算</li>
<li>__ sub __(self, other)：实现减法运算</li>
<li>__ mul __(self, other)：实现乘法运算</li>
<li>__ floordiv __(self, other)：实现//运算</li>
<li>__ div __(self, other)： python3中已废弃</li>
<li>__ truediv __(self, other)：</li>
<li>__ mod __(self, other)：实现取余运算</li>
<li>__ divmod __(self, other)：实现 divmod() 内建函数</li>
<li>__ pow __(self, other)：实现 **/‘N’ 次方操作</li>
<li>__ lshift __(self, other)：实现位/&lt;’&lt;’操作</li>
<li>__ rshift __(self, other)：实现位/‘&gt;’&gt;操作</li>
<li>__ and __(self, other)：实现位/‘&amp;’操作</li>
<li>__ or __(self, other)：实现位/‘`’操作</li>
<li>__ xor __(self, other)：实现位/‘^’操作</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Number</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">'''比较运算符相关的魔术方法'''</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, value)</span>:</span></span><br><span class="line">        self.value = value</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__eq__</span><span class="params">(self, other)</span>:</span></span><br><span class="line">        print(<span class="string">'__eq__'</span>)</span><br><span class="line">        <span class="keyword">return</span> self.value == other.value</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__ne__</span><span class="params">(self, other)</span>:</span></span><br><span class="line">        print(<span class="string">'__ne__'</span>)</span><br><span class="line">        <span class="keyword">return</span> self.value != other.value</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__it__</span><span class="params">(self, other)</span>:</span></span><br><span class="line">        print(<span class="string">'__it__'</span>)</span><br><span class="line">        <span class="keyword">return</span> self.value &lt; other.value</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__gt__</span><span class="params">(self, other)</span>:</span></span><br><span class="line">        print(<span class="string">'__gt__'</span>)</span><br><span class="line">        <span class="keyword">return</span> self.value &gt; other.value</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__le__</span><span class="params">(self, other)</span>:</span></span><br><span class="line">        print(<span class="string">'__le__'</span>)</span><br><span class="line">        <span class="keyword">return</span> self.value &lt;= other.value</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__ge__</span><span class="params">(self, other)</span>:</span></span><br><span class="line">        print(<span class="string">'__ge__'</span>)</span><br><span class="line">        <span class="keyword">return</span> self.value &gt;= other.value</span><br><span class="line">    </span><br><span class="line">    <span class="string">'''算数运算符像概念的魔术方法'''</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__add__</span><span class="params">(self, other)</span>:</span></span><br><span class="line">        print(<span class="string">'__add__'</span>)</span><br><span class="line">        <span class="keyword">return</span> self.value + other.value</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    num1 = Number(<span class="number">2</span>)</span><br><span class="line">    num2 = Number(<span class="number">3</span>)</span><br><span class="line">    print(<span class="string">'num1 == num2 ? --&gt; &#123;&#125;\n'</span>.format(num1 == num2))</span><br><span class="line">    print(<span class="string">'num1 != num2 ? --&gt; &#123;&#125;\n'</span>.format(num1 != num2))</span><br><span class="line">    print(<span class="string">'num1 &lt;  num2 ? --&gt; &#123;&#125;\n'</span>.format(num1 &lt; num2))</span><br><span class="line">    print(<span class="string">'num1 &gt;  num2 ? --&gt; &#123;&#125;\n'</span>.format(num1 &gt; num2))</span><br><span class="line">    print(<span class="string">'num1 &lt;= num2 ? --&gt; &#123;&#125;\n'</span>.format(num1 &lt;= num2))</span><br><span class="line">    print(<span class="string">'num1 &gt;= num2 ? --&gt; &#123;&#125;\n'</span>.format(num1 &gt;= num2))</span><br><span class="line">    print(<span class="string">'num1 + num2 ? --&gt; &#123;&#125;\n'</span>.format(num1 + num2))</span><br></pre></td></tr></table></figure>

<pre><code>__eq__
num1 == num2 ? --&gt; False

__ne__
num1 != num2 ? --&gt; True

__gt__
num1 &lt;  num2 ? --&gt; True

__gt__
num1 &gt;  num2 ? --&gt; False

__le__
num1 &lt;= num2 ? --&gt; True

__ge__
num1 &gt;= num2 ? --&gt; False

__add__
num1 + num2 ? --&gt; 5</code></pre>]]></content>
      <tags>
        <tag>code</tag>
        <tag>python</tag>
        <tag>Magic Method</tag>
        <tag>描述器</tag>
      </tags>
  </entry>
  <entry>
    <title>【浅析】python的多态</title>
    <url>/2020/07/10/code_Python%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%A4%9A%E6%80%81/</url>
    <content><![CDATA[<h5 id="Ⅰ，理解"><a href="#Ⅰ，理解" class="headerlink" title="Ⅰ，理解"></a>Ⅰ，理解</h5><ul>
<li>指对不同类型的变量进行操作，根据对象（或类）类型的不同而表现出不同的行为</li>
</ul>
<h5 id="Ⅱ，常用的多态"><a href="#Ⅱ，常用的多态" class="headerlink" title="Ⅱ，常用的多态"></a>Ⅱ，常用的多态</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="number">1</span>+<span class="number">2</span>)</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">'1'</span>+<span class="string">'2'</span>)</span><br><span class="line"><span class="string">'12'</span></span><br></pre></td></tr></table></figure>

<ul>
<li>不同的对象（或类）调用‘’+”，“+”会做出不同的响应</li>
</ul>
<a id="more"></a>

<h5 id="Ⅲ，对象所属的类之间有继承关系"><a href="#Ⅲ，对象所属的类之间有继承关系" class="headerlink" title="Ⅲ，对象所属的类之间有继承关系"></a>Ⅲ，对象所属的类之间有继承关系</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">printUser</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'你好！'</span> + self.name)</span><br><span class="line">        </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserVip</span><span class="params">(User)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">printUser</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'你好！尊敬的会员用户'</span> + self.name)</span><br><span class="line">        </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserGeneral</span><span class="params">(User)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">printUser</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'你好！尊敬的用户'</span> + self.name)</span><br><span class="line">        </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printUserInfo</span><span class="params">(user)</span>:</span></span><br><span class="line">    user.printUser()</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    <span class="comment"># 实例化User类</span></span><br><span class="line">    user = User(<span class="string">'121'</span>)</span><br><span class="line">    printUserInfo(user)</span><br><span class="line">    <span class="comment"># 实例化Vip类</span></span><br><span class="line">    userVip = UserVip(<span class="string">'xiongJum'</span>)</span><br><span class="line">    printUserInfo(userVip)</span><br><span class="line">    <span class="comment"># 实例化General类</span></span><br><span class="line">    userGeneral = UserGeneral(<span class="string">'酒明'</span>)</span><br><span class="line">    printUserInfo(userGeneral)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">你好！<span class="number">121</span></span><br><span class="line">你好！尊敬的会员用户xiongJum</span><br><span class="line">你好！尊敬的用户酒明</span><br></pre></td></tr></table></figure>

<h5 id="Ⅳ，对象所属的类之间没有继承关系"><a href="#Ⅳ，对象所属的类之间没有继承关系" class="headerlink" title="Ⅳ，对象所属的类之间没有继承关系"></a>Ⅳ，对象所属的类之间没有继承关系</h5><ul>
<li>调用同一个函数，传入不同的参数，以达到不同的功能</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Duck</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fly</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'鸭子沿着地面飞起来了'</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Swan</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fly</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'天鹅飞越了喜马拉雅山的最高峰'</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Plane</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fly</span><span class="params">(slef)</span>:</span></span><br><span class="line">        print(<span class="string">'space X 回收成功'</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fly</span><span class="params">(vehicle)</span>:</span></span><br><span class="line">    vehicle.fly()</span><br><span class="line">    </span><br><span class="line">duck = Duck()</span><br><span class="line">fly(duck)</span><br><span class="line">swan = Swan()</span><br><span class="line">fly(swan)</span><br><span class="line">plane = Plane()</span><br><span class="line">fly(plane)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">鸭子沿着地面飞起来了</span><br><span class="line">天鹅飞越了喜马拉雅山的最高峰</span><br><span class="line">space X 回收成功</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>code</tag>
        <tag>python</tag>
        <tag>多态</tag>
      </tags>
  </entry>
  <entry>
    <title>枚举类</title>
    <url>/2020/07/15/code_Python%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%9E%9A%E4%B8%BE%E7%B1%BB/</url>
    <content><![CDATA[<h5 id="枚举类的使用"><a href="#枚举类的使用" class="headerlink" title="枚举类的使用"></a>枚举类的使用</h5><ul>
<li>当需要大量定于变量时，可以使用枚举类(Enum)来实现这个功能<ul>
<li>当我们定义一个Class类型时，每个常量都是class里面的唯一实例</li>
<li>方式： Enum(类名, (tuple参数))</li>
<li>枚举类通过 __ members __ 方法遍历所有的成员</li>
<li><font color=red>而且 Enum 的成员均为单例（Singleton），并且不可实例化，不可更改</font><a id="more"></a>

</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> enum <span class="keyword">import</span> Enum</span><br><span class="line"></span><br><span class="line">Month = Enum(<span class="string">'MONTH'</span>,(<span class="string">'Jan'</span>, <span class="string">'Feb'</span>,<span class="string">'Mar'</span>, <span class="string">'Apr'</span>, <span class="string">'May'</span>, <span class="string">'Jun'</span>, <span class="string">'Jul'</span>, <span class="string">'Aug'</span>, <span class="string">'Sep'</span>, <span class="string">'Oct'</span>, <span class="string">'Nov'</span>, <span class="string">'Dec'</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> name, member <span class="keyword">in</span> Month.__members__.items():</span><br><span class="line">    <span class="comment"># member.value 自动赋给成员的 int 类型的常量， 默认从1开始</span></span><br><span class="line">    print(name, <span class="string">'---------'</span>, member, <span class="string">'--------'</span>, member.value)</span><br><span class="line">    </span><br><span class="line">print(<span class="string">'\n'</span>, Month.Jan, <span class="string">'\n'</span>, Month.Nov.value)</span><br></pre></td></tr></table></figure>

<pre><code>Jan --------- MONTH.Jan -------- 1
Feb --------- MONTH.Feb -------- 2
Mar --------- MONTH.Mar -------- 3
Apr --------- MONTH.Apr -------- 4
May --------- MONTH.May -------- 5
Jun --------- MONTH.Jun -------- 6
Jul --------- MONTH.Jul -------- 7
Aug --------- MONTH.Aug -------- 8
Sep --------- MONTH.Sep -------- 9
Oct --------- MONTH.Oct -------- 10
Nov --------- MONTH.Nov -------- 11
Dec --------- MONTH.Dec -------- 12

 MONTH.Jan 
 11</code></pre><h5 id="自定义类型的枚举"><a href="#自定义类型的枚举" class="headerlink" title="自定义类型的枚举"></a>自定义类型的枚举</h5><ul>
<li>枚举模块定义了具有迭代和比较功能的枚举类型</li>
<li>可以用来为值创建明确定义的符号，而不是使用具体的整数或者字符串</li>
<li>在自定义类型的枚举中，可以使用装饰器@unique来检查有没有重复值</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> enum <span class="keyword">import</span> Enum, unique</span><br><span class="line"></span><br><span class="line"><span class="comment"># @unqiue 装饰器可以帮助我们用来检查有没有重复值，可选</span></span><br><span class="line"><span class="meta">@unique</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Month</span><span class="params">(Enum)</span>:</span></span><br><span class="line">    Jan = <span class="number">1</span></span><br><span class="line">    Feb = <span class="string">'Ⅱ'</span></span><br><span class="line">    Mar = <span class="string">'1'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    print(Month.Jan, <span class="string">'---'</span>, Month.Jan.name, <span class="string">'---'</span>, Month.Jan.value)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> name, member <span class="keyword">in</span> Month.__members__.items():</span><br><span class="line">    <span class="comment"># member.value 自动赋给成员的 int 类型的常量， 默认从1开始</span></span><br><span class="line">        print(name, <span class="string">'---------'</span>, member, <span class="string">'--------'</span>, member.value)</span><br><span class="line">    </span><br><span class="line">    print(type(Month.Jan.value))</span><br></pre></td></tr></table></figure>

<pre><code>Month.Jan --- Jan --- 1
Jan --------- Month.Jan -------- 1
Feb --------- Month.Feb -------- Ⅱ
Mar --------- Month.Mar -------- 1
&lt;class &apos;int&apos;&gt;</code></pre><h5 id="枚举的比较"><a href="#枚举的比较" class="headerlink" title="枚举的比较"></a>枚举的比较</h5><ul>
<li>枚举成员不是有序的即<ul>
<li>只能通过标识和相等性进行比较</li>
<li>如 == 和 is</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Twowater = Month.Jan</span><br><span class="line">XiongJum = Month.Mar</span><br><span class="line"></span><br><span class="line">print(Twowater == XiongJum, Twowater == Month.Jan)</span><br><span class="line">print(Twowater <span class="keyword">is</span> XiongJum, Twowater <span class="keyword">is</span> Month.Jan)</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    print(<span class="string">'\n'</span>.join(<span class="string">' '</span> + s.name <span class="keyword">for</span> s <span class="keyword">in</span> sorted(Month)))</span><br><span class="line"><span class="keyword">except</span> TypeError <span class="keyword">as</span> err:</span><br><span class="line">    print(<span class="string">' Error: &#123;&#125;'</span>.format(err))</span><br></pre></td></tr></table></figure>

<pre><code>False True
False True
 Error: &apos;&lt;&apos; not supported between instances of &apos;Month&apos; and &apos;Month&apos;</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">+ 可以使用 IntEnum 类进行枚举，进而支持比较功能</span><br><span class="line">    + 但仅支持int类型</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> enum <span class="keyword">import</span> IntEnum</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(IntEnum)</span>:</span></span><br><span class="line">    Xiongjum = <span class="number">12</span></span><br><span class="line">    Jumxiong = <span class="number">18</span></span><br><span class="line">    Onetwoone = <span class="number">24</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    print(<span class="string">'\n'</span>.join(<span class="string">' '</span> + s.name <span class="keyword">for</span> s <span class="keyword">in</span> sorted(User)))</span><br><span class="line"><span class="keyword">except</span> TypeError <span class="keyword">as</span> err:</span><br><span class="line">    print(<span class="string">' Error: &#123;&#125;'</span>.format(err))</span><br></pre></td></tr></table></figure>

<pre><code>Xiongjum
Jumxiong
Onetwoone</code></pre>]]></content>
      <tags>
        <tag>code</tag>
        <tag>python</tag>
        <tag>枚举类</tag>
      </tags>
  </entry>
  <entry>
    <title>Python修饰器</title>
    <url>/2020/04/23/code_Python%E8%A7%A3%E9%87%8A%E5%99%A8/</url>
    <content><![CDATA[<h3 id="修饰器的作用"><a href="#修饰器的作用" class="headerlink" title="修饰器的作用"></a><strong>修饰器的作用</strong></h3><ol>
<li>修饰器本质上是一个Python函数，它可以让其他函数在不需要做任何代码变动的前提下增加额外功能</li>
<li>python的修饰器是一种语法糖（Syntactic Sugar）</li>
</ol>
<a id="more"></a>

<ul>
<li><p>实例</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 示例1</span></span><br><span class="line"><span class="meta">@funA</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">funB</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="comment"># 示例2， 实例1是示例2的简写，即示例1=示例2</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">funB</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">funB =funA(funB)</span><br></pre></td></tr></table></figure>


</li>
</ul>
<h3 id="修饰函数"><a href="#修饰函数" class="headerlink" title="修饰函数"></a><strong>修饰函数</strong></h3><p>修饰器的用法之一是修饰新定义的函数，修饰器通常用于<font color="red">扩展函数的行为或属性</font></p>
<ol>
<li><p>示例（函数作为修饰器）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">log</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wraper</span><span class="params">()</span>:</span></span><br><span class="line">        print(<span class="string">"INFO: String &#123;&#125;"</span>.format(func.__name__))</span><br><span class="line">        func()</span><br><span class="line">        print(<span class="string">"INFO: Finishing 	&#123;&#125;"</span>.format(func.__name__))</span><br><span class="line">    <span class="keyword">return</span> wraper</span><br><span class="line"></span><br><span class="line"><span class="meta">@log</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"Running run..."</span>)</span><br><span class="line">run()</span><br><span class="line">-------------------------------------------------------------------------------------------------</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">INFO: String run</span><br><span class="line">Running run...</span><br><span class="line">INFO: Finshing run</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="修饰类"><a href="#修饰类" class="headerlink" title="修饰类"></a><strong>修饰类</strong></h3><ol>
<li><p>示例(函数作为修饰器)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> time, sleep</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">timer</span><span class="params">(Cls)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wraper</span><span class="params">()</span>:</span></span><br><span class="line">        s = time()</span><br><span class="line">        obj = Cls()</span><br><span class="line">        e = time()</span><br><span class="line">        print(<span class="string">"Cost &#123;:.4f&#125;s to init."</span>.format(e -s))</span><br><span class="line">        <span class="keyword">return</span> obj</span><br><span class="line">    <span class="keyword">return</span> wraper</span><br><span class="line"></span><br><span class="line"><span class="meta">@timer</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Obj</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"Hello"</span>)</span><br><span class="line">        sleep(<span class="number">2</span>)</span><br><span class="line">        print(<span class="string">"Obj"</span>)</span><br><span class="line"></span><br><span class="line">Obj()</span><br><span class="line">--------------------------------------------------------------------------------------------------</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">Hello</span><br><span class="line">Obj</span><br><span class="line">Cost <span class="number">2.0476</span>s to init.</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="类作为修饰器"><a href="#类作为修饰器" class="headerlink" title="类作为修饰器"></a><strong>类作为修饰器</strong></h3><p>只有函数才可以被调用，除了函数以外也可以定义被调用的类，只要添加 <font color="red">_<em>call_</em></font> 方法即可</p>
<ol>
<li>示例</li>
</ol>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HTML</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Baking HTML Tags!</span></span><br><span class="line"><span class="string">    修饰HTML标签</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, tag=<span class="string">'p'</span>)</span>:</span></span><br><span class="line">        print(<span class="string">"LOG: Baking Tag &lt;&#123;&#125;&gt;"</span>.format(tag))</span><br><span class="line">        self.tag = tag</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, func)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">lambda</span>: <span class="string">"&lt;&#123;0&#125;&gt;&#123;1&#125;&lt;/&#123;0&#125;&gt;"</span>.format(self.tag, func())</span><br><span class="line"></span><br><span class="line"><span class="meta">@HTML("html")</span></span><br><span class="line"><span class="meta">@HTML("body")</span></span><br><span class="line"><span class="meta">@HTML("div")</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">body</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Hello, World"</span> </span><br><span class="line">    </span><br><span class="line">print(body())</span><br><span class="line">--------------------------------------------------------------</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">LOG: Baking Tag &lt;html&gt;</span><br><span class="line">LOG: Baking Tag &lt;body&gt;</span><br><span class="line">LOG: Baking Tag &lt;div&gt;</span><br><span class="line">&lt;html&gt;&lt;body&gt;&lt;div&gt;Hello, World&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>函数解析</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">lambda</span>: <span class="string">"&lt;&#123;0&#125;&gt;&#123;1&#125;&lt;/&#123;0&#125;&gt;"</span>.format(self.tag, func())</span><br><span class="line"><span class="comment"># lambda 匿名函数，“:”左边为返回值，</span></span><br><span class="line"><span class="comment"># format 格式化函数，</span></span><br><span class="line"><span class="comment"># &#123;&#125; 不指定参数位置 eg："&#123;&#125; &#123;&#125;".format("Hello", "World")</span></span><br><span class="line"><span class="comment"># &#123;x&#125; 指定参数位置 eg: "&#123;0&#125; &#123;1&#125;".format("Hello", "World")</span></span><br></pre></td></tr></table></figure>

<h3 id="传递参数"><a href="#传递参数" class="headerlink" title="传递参数"></a><strong>传递参数</strong></h3><p>在实际的使用过程中可能需要想修饰器传递参数，可能需要想被修饰的函数（或类）传递参数，如上方示例中</p>
<p><font color='orange'>@HTML(‘html’)</font> </p>
<ol>
<li><p>示例</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">RULES = &#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">route</span><span class="params">(rule)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decorator</span><span class="params">(hand)</span>:</span></span><br><span class="line">        RULES.update(&#123;rule: hand&#125;)</span><br><span class="line">        <span class="keyword">return</span> hand</span><br><span class="line">    <span class="keyword">return</span> decorator</span><br><span class="line"></span><br><span class="line"><span class="meta">@route("/")</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"XIONG JUM"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">home</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"Hello, World!"</span>)</span><br><span class="line">home = route(<span class="string">"/home"</span>)(home)</span><br><span class="line"></span><br><span class="line">index()</span><br><span class="line">home()</span><br><span class="line">print(RULES)</span><br><span class="line">print(index)</span><br><span class="line">--------------------------------------------------------------------------------------------------</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">XIONG JUM</span><br><span class="line">Hello, World!</span><br><span class="line">&#123;<span class="string">'/'</span>: &lt;function index at <span class="number">0x000001C605A35B80</span>&gt;, <span class="string">'/home'</span>: &lt;function home at <span class="number">0x000001C605A35AF0</span>&gt;&#125;</span><br><span class="line">&lt;function index at <span class="number">0x000001C605A35B80</span>&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>函数解析</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">RULES.update(&#123;rule: hand&#125;)</span><br><span class="line"><span class="comment"># update 字典的方法，更新字典的值，直接替换字典中相同键的值</span></span><br><span class="line"><span class="comment"># &lt;function index at 0x000001C605A35B80&gt; 为函数index的储存位置</span></span><br></pre></td></tr></table></figure>

<p>向被修饰的函数传递参数，若不进行处理，则只需要将其原模原样的返回即可</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@route("/login")</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(user=<span class="string">'user'</span>, pwd=<span class="string">'pwd'</span>)</span>:</span></span><br><span class="line">    print(<span class="string">"DB.findOne(&#123;&#123;&#123;&#125;, &#123;&#125;&#125;&#125;)"</span>.format(user, pwd))</span><br><span class="line">login(<span class="string">"hail"</span>, <span class="string">"python"</span>)</span><br><span class="line">--------------------------------------------------------------------------------------------------</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">DB.findOne(&#123;hail, python&#125;)</span><br></pre></td></tr></table></figure>

<p>如果需要在修饰器内执行，见<font color='red'>修饰函数的示例</font></p>
</li>
</ol>
]]></content>
      <tags>
        <tag>python</tag>
        <tag>修饰器</tag>
      </tags>
  </entry>
  <entry>
    <title>code_SQL基础-增删改查</title>
    <url>/2020/07/22/code_SQL%E5%9F%BA%E7%A1%80-%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5/</url>
    <content><![CDATA[<h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><h5 id="基本查询语句"><a href="#基本查询语句" class="headerlink" title="基本查询语句"></a>基本查询语句</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- select (列名1, 列名2 或 *) from 表名 where 条件</span></span><br><span class="line"><span class="keyword">select</span> order_no, trip_no <span class="keyword">from</span> trip_order <span class="keyword">where</span> order_no &gt; <span class="string">'20191009012100000013'</span>;</span><br></pre></td></tr></table></figure>
<a id="more"></a>

<ul>
<li>逻辑运算符 如 and、in 等</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- select 列名1, 列名2 from 表名 where 条件 (and 或 or 或 in) 条件</span></span><br><span class="line"><span class="keyword">select</span> order_no, trip_no, trade_amount <span class="keyword">from</span> trip_order <span class="keyword">where</span> order_no &gt; <span class="string">'20191009012100000013'</span> <span class="keyword">and</span> trade_amount = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">select</span> order_no, trip_no, trade_amount, state <span class="keyword">from</span> trip_order <span class="keyword">where</span> state = <span class="number">2</span> <span class="keyword">or</span> trade_amount = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">select</span> order_no, trip_no, trade_amount, state <span class="keyword">from</span> trip_order <span class="keyword">where</span> order_no &gt; <span class="string">'2019100901'</span> <span class="keyword">and</span> (state = <span class="number">2</span> <span class="keyword">or</span> trade_amount = <span class="number">100</span>);</span><br><span class="line"><span class="comment">-- in</span></span><br><span class="line"><span class="keyword">select</span> order_no, trip_no, trade_amount, state <span class="keyword">from</span> trip_order <span class="keyword">where</span> state <span class="keyword">in</span> (<span class="number">2</span>, <span class="number">-3</span>);</span><br><span class="line"><span class="keyword">select</span> order_no, trip_no, trade_amount, state <span class="keyword">from</span> trip_order <span class="keyword">where</span> state <span class="keyword">not</span> <span class="keyword">in</span> (<span class="number">2</span>, <span class="number">-3</span>); <span class="comment">-- 查找不包含 2,3的数据</span></span><br><span class="line"><span class="comment">-- like</span></span><br><span class="line"><span class="keyword">select</span> order_no, trip_no, trade_amount, state <span class="keyword">from</span> trip_order <span class="keyword">where</span> order_no <span class="keyword">like</span> <span class="string">'201906%'</span> <span class="comment">-- 匹配以201906开头的数据</span></span><br><span class="line"><span class="keyword">select</span> order_no, trip_no, trade_amount, state <span class="keyword">from</span> trip_order <span class="keyword">where</span> order_no <span class="keyword">like</span> <span class="string">'%201906%'</span> <span class="comment">-- 匹配中间包含201906的数据</span></span><br><span class="line"><span class="keyword">select</span> order_no, trip_no, trade_amount, state <span class="keyword">from</span> trip_order <span class="keyword">where</span> order_no <span class="keyword">like</span> <span class="string">'%201906'</span> <span class="comment">-- 匹配以201906结尾的数据</span></span><br></pre></td></tr></table></figure>

<ul>
<li>基本分组语句</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- select 列名1 或 from 表名 group by 列名1;</span></span><br><span class="line"><span class="keyword">select</span> state <span class="keyword">from</span> trip_order <span class="keyword">group</span> <span class="keyword">by</span> state;</span><br><span class="line"><span class="comment">-- 就结果而言和去重所查询的结果一致 distinct</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> state <span class="keyword">from</span> trip_order;</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 统计每个分组的数据数量, count()</span></span><br><span class="line"><span class="keyword">select</span> state, <span class="keyword">count</span>(<span class="number">1</span>) <span class="keyword">from</span> trip_order <span class="keyword">group</span> <span class="keyword">by</span> state;</span><br><span class="line"><span class="comment">-- 查看数量为某个区间的分组, having</span></span><br><span class="line"><span class="keyword">select</span> state, <span class="keyword">count</span>(<span class="number">1</span>) <span class="keyword">from</span> trip_order <span class="keyword">group</span> <span class="keyword">by</span> state <span class="keyword">having</span> <span class="keyword">count</span>(<span class="number">1</span>) &gt; <span class="number">200</span>;</span><br></pre></td></tr></table></figure>

<h5 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h5><ul>
<li>嵌套在另一个查询中的查询<ul>
<li>放在括号内的查询成为子查询，也被称为内部查询或内部选择</li>
<li>包含子查询的查询称为外部查询或外部选择</li>
</ul>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- select 列名3 from (select 列名2, 列名3 from 表名 where 条件) 别名 where 条件;</span></span><br><span class="line"><span class="comment">-- 一般子查询是跨表查询 本次示例展示的是相同表之间使用子查询</span></span><br><span class="line"><span class="keyword">select</span> state, out_order_no <span class="keyword">from</span> (<span class="keyword">select</span> order_no, state, out_order_no <span class="keyword">from</span> trip_order <span class="keyword">where</span> order_no &gt; <span class="string">'20191009012100000013'</span>) t <span class="keyword">where</span> state <span class="keyword">in</span> (<span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line"><span class="keyword">select</span> state, trip_no <span class="keyword">from</span> trip_order state <span class="keyword">not</span> <span class="keyword">in</span> (<span class="keyword">select</span> state <span class="keyword">from</span> trip_order <span class="keyword">where</span> state = <span class="number">2</span>);</span><br></pre></td></tr></table></figure>

<h5 id="表连接"><a href="#表连接" class="headerlink" title="表连接"></a>表连接</h5><ul>
<li>内连接<ul>
<li>关键词 inner join … on</li>
<li>只会关联并展示两张表中都存在的数据</li>
</ul>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> tr.id, tr.merchant_no, trq.pos_transaction_bill_no </span><br><span class="line"><span class="keyword">from</span> ticket_user_driving_record <span class="keyword">as</span> tr</span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span> ticket_user_driving_record_detail_qrcode <span class="keyword">as</span> trq </span><br><span class="line"><span class="keyword">on</span> tr.id = trq.record_id;</span><br></pre></td></tr></table></figure>

<ul>
<li>左连接<ul>
<li>关键词 left join … on</li>
<li>以主表为主，展示所有主表的行数据，若关联的表没有匹配则展示null</li>
</ul>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> tr.id, tr.merchant_no, trq.pos_transaction_bill_no </span><br><span class="line"><span class="keyword">from</span> ticket_user_driving_record <span class="keyword">as</span> tr</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> ticket_user_driving_record_detail_qrcode <span class="keyword">as</span> trq </span><br><span class="line"><span class="keyword">on</span> tr.id = trq.record_id;</span><br></pre></td></tr></table></figure>

<ul>
<li>右连接<ul>
<li>关键词 right join … on </li>
<li>和左连接相反，以关联的表为主，会展示所有关联表中的行数据</li>
</ul>
</li>
<li>全外连接<ul>
<li>关键词 full join …on</li>
<li>展示全部的行数</li>
</ul>
</li>
<li>多表连接<ul>
<li>超过两张表的表连接</li>
</ul>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> tr.id, tr.merchant_no, trq.pos_transaction_bill_no </span><br><span class="line"><span class="keyword">from</span> ticket_user_driving_record <span class="keyword">as</span> tr</span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span> ticket_user_driving_record_detail_qrcode <span class="keyword">as</span> trq </span><br><span class="line"><span class="keyword">on</span> tr.id = trq.record_id</span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span> ticket_user_driving_original_record_qrcode <span class="keyword">as</span> toq</span><br><span class="line"><span class="keyword">on</span> tr.id = toq.record_id</span><br></pre></td></tr></table></figure>



<h3 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- insert into 表名 (列名1, 列名2) values (插入的数据1, 插入的数据2)</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> trip_order (state trip_no) <span class="keyword">values</span> (<span class="number">3</span>, <span class="string">'20191009012100000013'</span>);</span><br></pre></td></tr></table></figure>

<h3 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- update 表名 set 更新的数据 where 条件</span></span><br><span class="line"><span class="keyword">update</span> trip_order <span class="keyword">set</span> state = <span class="number">2</span> <span class="keyword">where</span> trip_no = <span class="string">'20191009012100000013'</span>;</span><br></pre></td></tr></table></figure>

<h3 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- delete from 表名 where 条件</span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> trip_order <span class="keyword">where</span> trip_no = <span class="string">'20191009012100000013'</span>;</span><br></pre></td></tr></table></figure>





]]></content>
      <tags>
        <tag>code</tag>
        <tag>SQL</tag>
        <tag>浅析</tag>
      </tags>
  </entry>
  <entry>
    <title>自动化测试 for selenium</title>
    <url>/2020/06/29/code_selenium/</url>
    <content><![CDATA[<p>Selenium 是支持 web 浏览器自动化的一系列工具和库的综合性项目，它提供了扩展来模拟用户与浏览器的交互，用于扩展浏览器分配的分发服务器， 以及用于实现 <a href="https://www.w3.org/TR/webdriver/" target="_blank" rel="noopener">W3C WebDriver</a> 规范的基础结构， 该规范允许您为所有主要 Web 浏览器编写可互换的代码.</p>
<p>Selenium 汇集了浏览器供应商，工程师和爱好者，以进一步围绕 Web 平台自动化进行公开讨论。 该项目组织了一次年度会议，以教学和培养社区.</p>
<p>Selenium 的核心是 <a href="https://www.selenium.dev/zh-cn/documentation/webdriver/" target="_blank" rel="noopener">WebDriver</a>，这是一个编写指令集的接口，可以在许多浏览器中互换运行</p>
<a id="more"></a>

<h1 id="准备所需文件"><a href="#准备所需文件" class="headerlink" title="准备所需文件"></a>准备所需文件</h1><ol>
<li>下载selenium库,</li>
<li>下载浏览器驱动，并将浏览器驱动放入项目的根目录下，并在执行文件中设置路径地址；或者将其所在目录加入到环境变量中；也可以直接在脚本中安装驱动</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip3 install selenium</span><br></pre></td></tr></table></figure>

<p>chrome <a href="http://chromedriver.chromium.org/downloads" target="_blank" rel="noopener">http://chromedriver.chromium.org/downloads</a></p>
<h1 id="开始编写测试脚本"><a href="#开始编写测试脚本" class="headerlink" title="开始编写测试脚本"></a>开始编写测试脚本</h1><h2 id="基础的-selenium-的脚本文件"><a href="#基础的-selenium-的脚本文件" class="headerlink" title="基础的 selenium 的脚本文件"></a>基础的 selenium 的脚本文件</h2><p>编写执行脚本文件</p>
<p>通过使用方法 driver.implicitly_wait(10) 可以设置隐式的等待时间，但是不建议；设置窗口最大化，可以调用方法 driver.maximize_window() </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line">	</span><br><span class="line"><span class="comment"># 添加浏览器驱动，并设置测试地址</span></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line">driver.get(<span class="string">"http://blog.xcumin.top"</span>)</span><br><span class="line"><span class="comment"># 通过 id 定位测试元素控件，并在控件中输入测试文本</span></span><br><span class="line">driver.find_element_by_id(<span class="string">"username"</span>).send_keys(<span class="string">'xiongceshi'</span>)</span><br><span class="line"><span class="comment"># 退出浏览器</span></span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure>

<p>可以通过python自带的测试库 <a href="https://docs.python.org/zh-cn/3/library/unittest.html" target="_blank" rel="noopener">unittest</a> 调整结构，并引用测试断言</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SeleniumTest</span><span class="params">(unittest.TestCase)</span>:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">setUp</span><span class="params">(self)</span>:</span> <span class="comment"># 测试前置方法，在所有的方法之前进行运行</span></span><br><span class="line">	self.driver = webdriver.Chrome()</span><br><span class="line">	self.driver.implicitly_wait(<span class="number">10</span>)</span><br><span class="line">	self.driver.get(<span class="string">'http://test.lsgot.com:8181/#/login'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tearDown</span><span class="params">(self)</span>:</span> <span class="comment"># 测试后置方法，在所有测试方法之后运行</span></span><br><span class="line">	self.driver.quit()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_login</span><span class="params">(self)</span>:</span></span><br><span class="line">	<span class="string">"""登录软件"""</span></span><br><span class="line">	self.driver.find_element(By=id(<span class="string">'loginUsername'</span>)).send_keys(<span class="string">'WWGS'</span>)</span><br><span class="line">	self.driver.find_element_by_id(<span class="string">'loginPassword'</span>).send_keys(<span class="string">'123456'</span>)</span><br><span class="line">	self.driver.find_element_by_id(<span class="string">'loginButton'</span>).click()</span><br><span class="line">	</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    unittest.main()</span><br></pre></td></tr></table></figure>

<h2 id="增加断言，测试输出是否符合条件"><a href="#增加断言，测试输出是否符合条件" class="headerlink" title="增加断言，测试输出是否符合条件"></a>增加断言，测试输出是否符合条件</h2><p>使用 unittest.TestCase 模块，判断结果是否符合预期，并在命令行中显示测试结果</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">seleniumTest</span><span class="params">(unittest.TestCase)</span>:</span></span><br><span class="line">		</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">testlogin</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""错误的账号密码进行登录，并判断提示文案是否正确"""</span>       </span><br><span class="line">		... skip</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 设置显式等待时间，强制等待2秒查找元素</span></span><br><span class="line">        errorMsg = WebDriverWait(self.driver, <span class="number">2</span>) .until \</span><br><span class="line">        	(EC.visibility_of_element_located((By.ID,<span class="string">"errorMsg"</span>))).text</span><br><span class="line">        errorText = <span class="string">'账户或密码错误，请重新输入呀！'</span></span><br><span class="line">        <span class="comment"># 断言，比较两者的的字符串是否一致，若一致则为True，不一致则为Flase并抛出错误</span></span><br><span class="line">        self.assertEqual(errorMsg, errorText, <span class="string">'提示文案错误'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    unittest.main()</span><br></pre></td></tr></table></figure>

<h2 id="增加功能，截取产生有bug的界面"><a href="#增加功能，截取产生有bug的界面" class="headerlink" title="增加功能，截取产生有bug的界面"></a>增加功能，截取产生有bug的界面</h2><p>使用 save_screenshot() 截取错误页面，并保存到设置的路径中</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">seleniumTest</span><span class="params">(unittest.TestCase)</span>:</span></span><br><span class="line">		··· skip  </span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 错误代码块，当try为True时，跳过except，当try为Flase时，执行except</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.assertEqual(errorMsg, errorText)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="comment"># 截取当前界面，字符串中的内容为保存路径</span></span><br><span class="line">            self.driver.save_screenshot(<span class="string">'./test.png'</span>)</span><br><span class="line">            <span class="comment"># 断言，无条件的创造失败，字符串为错误说明</span></span><br><span class="line">            self.fail(<span class="string">"登录失败时，提示文案错误"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    unittest.main()</span><br></pre></td></tr></table></figure>

<h1 id="优化代码结构，产生测试报告"><a href="#优化代码结构，产生测试报告" class="headerlink" title="优化代码结构，产生测试报告"></a>优化代码结构，产生测试报告</h1><h2 id="储存配置以及通用方法"><a href="#储存配置以及通用方法" class="headerlink" title="储存配置以及通用方法"></a>储存配置以及通用方法</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># seleniumconfig.py</span></span><br><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">seleniumConfig</span><span class="params">(unittest.TestCase)</span>:</span></span><br><span class="line">	<span class="string">"""储存重复的方法，以及通用配置"""</span></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setUp</span><span class="params">(cls)</span>:</span></span><br><span class="line">        cls.driver = webdriver.Firefox()	</span><br><span class="line">		... skip</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">find_element_try</span><span class="params">(self, real, demand, explana)</span>:</span></span><br><span class="line">        <span class="string">"""判断实际内容和需求是否一致，若不一致则截取图片，并返回错误说明"""</span></span><br><span class="line">		<span class="keyword">try</span>:</span><br><span class="line">            self.assertEqual(real, demand)</span><br><span class="line">		<span class="keyword">except</span>:</span><br><span class="line">            self.fail(explana)</span><br><span class="line">            self.driver.save_screenshot(<span class="string">'./test.png'</span>)   </span><br><span class="line">    </span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">find_element_wait</span><span class="params">(self, wait_time, type_element, element)</span>:</span></span><br><span class="line">        <span class="string">"""检查元素是否存在，若不存在则截取图片并返回错误说明"""</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">return</span> WebDriverWait(self.driver, wait_time).until \</span><br><span class="line">                (EC.visibility_of_element_located((type_element,element)))</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            self.fail(<span class="string">f"<span class="subst">&#123;element&#125;</span>查找失败，请检查元素是否正确或产品出现缺陷"</span>) <span class="comment">#格式化字符串</span></span><br></pre></td></tr></table></figure>

<h2 id="设计测试流程、设计测试用例"><a href="#设计测试流程、设计测试用例" class="headerlink" title="设计测试流程、设计测试用例"></a>设计测试流程、设计测试用例</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># seleniumtest.py</span></span><br><span class="line"><span class="keyword">from</span> seleniumconfig <span class="keyword">import</span> seleniumConfig</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">seleniumTest</span><span class="params">(seleniumConfig)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_b_login</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""错误的账号密码进行登录，并判断提示文案是否正确"""</span></span><br><span class="line">		... skip</span><br><span class="line">		</span><br><span class="line">        errorMsg = self.find_element_wait(<span class="number">2</span>,By.ID,<span class="string">"errorMsg"</span>).text</span><br><span class="line">     </span><br><span class="line">       <span class="comment"># 判断错误提示文案和需求是否一致</span></span><br><span class="line">        self.find_element_try(errorMsg, <span class="string">'账户或密码错误，请重新输入！'</span>, </span><br><span class="line">							  <span class="string">'登录失败时，提示文案错误'</span>)</span><br></pre></td></tr></table></figure>

<h2 id="生成测试报告"><a href="#生成测试报告" class="headerlink" title="生成测试报告"></a>生成测试报告</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># seleniumrun.py</span></span><br><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="keyword">import</span> HTMLTestRunner</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> seleniumtest <span class="keyword">import</span> seleniumTest</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取测试用例，创建测试套件(若有多份测试用例，可以创建多份测试套件)</span></span><br><span class="line">web_login = unittest.TestLoader().loadTestsFromTestCase(seleniumTest)</span><br><span class="line">kts_login = unittest.TestSuite([web_login])</span><br><span class="line"></span><br><span class="line"><span class="comment">#设置报告的写入路径和名称</span></span><br><span class="line">dir = os.getcwd()</span><br><span class="line">nowTime = time.strftime(<span class="string">'%Y%m%d%H%M%S'</span>,time.localtime(time.time()))</span><br><span class="line">outPath = <span class="string">f'./outFile/webTestReport<span class="subst">&#123;nowTime&#125;</span>.html'</span></span><br><span class="line">outFile = open(dir + outPath, <span class="string">'wb'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建测试内容，执行测试套件</span></span><br><span class="line">runner = HTMLTestRunner.HTMLTestRunner(</span><br><span class="line">    stream= outFile,</span><br><span class="line">    title= <span class="string">'测试报告'</span>,</span><br><span class="line">    description= <span class="string">'WEB支撑平台测试_UI自动化回归测试'</span>,</span><br><span class="line">    verbosity=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">runner.run(kts_login)</span><br><span class="line"><span class="comment"># 不生成测试报告</span></span><br><span class="line"><span class="comment"># unittest.TextTestRunner(verbosity=2).run(kts_login)</span></span><br></pre></td></tr></table></figure>

<p>执行 seleniumrun.py ，获取测试报告</p>
]]></content>
      <tags>
        <tag>Python</tag>
        <tag>测试</tag>
        <tag>code</tag>
        <tag>selenium</tag>
        <tag>web 自动化测试</tag>
        <tag>自动化测试</tag>
      </tags>
  </entry>
  <entry>
    <title>接口自动化测试</title>
    <url>/2021/12/25/code_%E6%8E%A5%E5%8F%A3%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[<p>基于 requests 库 和 unittest 库，编写的脚本 demo，还存在不成熟的地方。</p>
<a id="more"></a>


<h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><p>准备库 <a href="https://docs.python-requests.org/zh_CN/latest/" target="_blank" rel="noopener">requests</a> 和 <a href="https://docs.python.org/zh-cn/3/library/unittest.html" target="_blank" rel="noopener">unittest</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip install requests</span><br></pre></td></tr></table></figure>

<h1 id="编写测试脚本"><a href="#编写测试脚本" class="headerlink" title="编写测试脚本"></a>编写测试脚本</h1><h2 id="封装公共参数"><a href="#封装公共参数" class="headerlink" title="封装公共参数"></a>封装公共参数</h2><p>封装公共参数，重复调取结果，减少代码的编写量，降低理解难度。</p>
<p>设置接口的必填参数，并使用 <em>args 传入接口的非必填参数；使用 *</em>kwargs 设置一些条件。<br>可以将一些公共参数写入到单独的文件中，使用时引用即可；一些隐私的数据可以写入到<a href="/tags/环境变量">#环境变量中</a>中，如测试 api 或者测试账号。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RequestTest</span><span class="params">(unittest.TestCase)</span>:</span></span><br><span class="line">	</span><br><span class="line"> 	<span class="comment"># 封装公共参数</span></span><br><span class="line">	 <span class="function"><span class="keyword">def</span> <span class="title">common</span><span class="params">(self, name, password, *args, **kwargs)</span>:</span></span><br><span class="line">		url = <span class="string">f"<span class="subst">&#123;config.ENVIRONMENT&#125;</span>/auth/login"</span></span><br><span class="line">		param = &#123;<span class="string">"name"</span>:name, <span class="string">"password"</span>:password,&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">if</span> args: <span class="comment"># 如果 args 不为空 则将参数传入添加到请求参数中</span></span><br><span class="line">			 <span class="keyword">for</span> arg <span class="keyword">in</span> args:</span><br><span class="line">				 param.update(**arg)</span><br><span class="line">		self.response = requests.post(url, headers=self.headers, json=param, </span><br><span class="line">									  verify=<span class="literal">False</span>,)</span><br><span class="line"></span><br><span class="line">		 <span class="comment"># 如果 kwargs 不为 False 则进行相应的操作</span></span><br><span class="line">		<span class="keyword">if</span> kwargs:</span><br><span class="line">			<span class="keyword">for</span> key, value <span class="keyword">in</span> kwargs.items():</span><br><span class="line">				<span class="keyword">if</span> key == <span class="string">'del_'</span> <span class="keyword">and</span> value : <span class="comment"># 如果 key 为 del_ 则删除本次测试所产生的数据</span></span><br><span class="line">					self.db.commit_data(<span class="string">f"delete from mp_org where phone='<span class="subst">&#123;phone&#125;</span>'"</span>)</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> self.response</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">	unittest.main(verbosity=<span class="number">2</span>)</span><br></pre></td></tr></table></figure>

<p>调取公共参数，请求项目的外部接口获取请求结果, 并根据结果进行断言</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RequestTest</span><span class="params">(unittest.TestCase)</span>:</span></span><br><span class="line">	</span><br><span class="line">	... skip</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">test_login</span><span class="params">(self)</span>:</span></span><br><span class="line">		self.common(name=<span class="string">'admin'</span>, password=<span class="string">'passwd'</span>)</span><br><span class="line">		</span><br><span class="line">		<span class="comment"># 断言</span></span><br><span class="line">		self.assertEqual(self.response.status_code, <span class="number">200</span>)</span><br><span class="line"> 		self.assertEqual(self.response.json()[<span class="string">'code'</span>], <span class="number">0</span>, msg=<span class="string">'返回的状态码不为0'</span>)</span><br><span class="line">		</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">	unittest.main(verbosity=<span class="number">2</span>)</span><br></pre></td></tr></table></figure>

<h2 id="编写装饰器"><a href="#编写装饰器" class="headerlink" title="编写装饰器"></a>编写装饰器</h2><p>将相同的断言放入 <a href="https://docs.python.org/zh-cn/3/library/typing.html#functions-and-decorators" target="_blank" rel="noopener">#装饰器</a>中，以供重复使用</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># decorators.py</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lsgot_success</span><span class="params">(f)</span>:</span></span><br><span class="line"></span><br><span class="line"><span class="meta">	@wraps(f)</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">decorator</span><span class="params">(self, *args, **kwargs)</span>:</span></span><br><span class="line">		f(self, *args, **kwargs)</span><br><span class="line">		responseJSON = self.response.json()</span><br><span class="line">		print(responseJSON)</span><br><span class="line">		self.assertEqual(self.response.status_code, <span class="number">200</span>,)</span><br><span class="line">		self.assertEqual(responseJSON[<span class="string">'code'</span>], <span class="number">0</span>, msg=<span class="string">'返回的状态码不为0'</span>)</span><br><span class="line">		<span class="keyword">return</span> f(self, *args, **kwargs)</span><br><span class="line">	<span class="keyword">return</span> decorator</span><br></pre></td></tr></table></figure>

<p>修改测试方法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> decorators <span class="keyword">import</span> lsgot_success</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RequestTest</span><span class="params">(unittest.TestCase)</span>:</span></span><br><span class="line">	</span><br><span class="line">	... skip</span><br><span class="line">	</span><br><span class="line"><span class="meta">	@lsgot_success</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">test_login</span><span class="params">(self)</span>:</span></span><br><span class="line">		self.common(name=<span class="string">'admin'</span>, password=<span class="string">'passwd'</span>)</span><br><span class="line">		</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">	unittest.main(verbosity=<span class="number">2</span>)</span><br></pre></td></tr></table></figure>

<p>若接口需要 cookie 之类的凭证，可以编写单独的方法，在运行测试之前写入到 cookie 或者 headers 中。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">	response = requests.post(url=url, headers=config.CONFING.LOGIN_HEADERS, </span><br><span class="line">							 data=param, verify=<span class="literal">False</span>)</span><br><span class="line">	</span><br><span class="line">	<span class="comment"># 获取登录结果返回的响应， 并将 Authorization 写入到 headers 中。</span></span><br><span class="line">	headers = &#123;</span><br><span class="line">		<span class="string">"Authorization"</span>: <span class="string">f"Bearer <span class="subst">&#123;response.json()[<span class="string">'access_token'</span>]&#125;</span>"</span>,</span><br><span class="line">		<span class="string">"Content-Type"</span>: <span class="string">"application/json;charset=UTF-8"</span></span><br><span class="line">		&#125;</span><br><span class="line">	<span class="keyword">return</span> headers</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RequestTest</span><span class="params">(unittest.TestCase)</span>:</span></span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">setUp</span><span class="params">(self)</span>:</span></span><br><span class="line">		self.headers = login()</span><br><span class="line"></span><br><span class="line"><span class="meta">... </span>skip</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">	</span><br><span class="line">	unittest.main(verbosity=<span class="number">2</span>)</span><br></pre></td></tr></table></figure>

<p>如果在测试过程中需要访问数据库，访问这篇文章<a href="">在 Python 中访问 SQL</a></p>
<p>谢谢</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>[1] 由于链接消失，暂时无法展示，以后找到后补上</p>
]]></content>
      <tags>
        <tag>Python</tag>
        <tag>自动化测试</tag>
        <tag>接口自动化测试</tag>
        <tag>requests</tag>
        <tag>unittest</tag>
      </tags>
  </entry>
  <entry>
    <title>正则表达式</title>
    <url>/2020/07/05/code_%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    <content><![CDATA[<h5 id="初识正则表达式"><a href="#初识正则表达式" class="headerlink" title="初识正则表达式"></a>初识正则表达式</h5><ul>
<li>使用python的内置函数</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 设置一个常量</span></span><br><span class="line">name = <span class="string">'XiongJum|酒明|JumXiong|初学者'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断是否有字符串XiongJum</span></span><br><span class="line">print(<span class="string">'是否含有XiongJum这个字符串：&#123;&#125;'</span>.format(name.index(<span class="string">'XiongJum'</span>) &lt; <span class="number">1</span>))</span><br><span class="line">print(<span class="string">'是否含有XiongJum这个字符串：&#123;&#125;'</span>.format(<span class="string">'XiongJum'</span> <span class="keyword">in</span> name))</span><br></pre></td></tr></table></figure>

<pre><code>是否含有XiongJum这个字符串：True
是否含有XiongJum这个字符串：True</code></pre><a id="more"></a>

<ul>
<li>初识正则表达式re<ul>
<li>Python内置函数能简单解决的事情，就没有必要使用正则表达式，如下例</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">findall = re.findall(<span class="string">'Jum'</span>, name)</span><br><span class="line">print(findall)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> len(findall) &gt; <span class="number">0</span>:</span><br><span class="line">    print(<span class="string">'name含有Jum这个字符串'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'name不含有Jum这个字符串'</span>)</span><br></pre></td></tr></table></figure>

<pre><code>[&apos;Jum&apos;, &apos;Jum&apos;]
name含有Jum这个字符串</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 选择 name 里面的所有小写英文字母</span></span><br><span class="line"></span><br><span class="line">re_findall = re.findall(<span class="string">'[a-z]'</span>, name)</span><br><span class="line">print(re_findall)</span><br></pre></td></tr></table></figure>

<pre><code>[&apos;i&apos;, &apos;o&apos;, &apos;n&apos;, &apos;g&apos;, &apos;u&apos;, &apos;m&apos;, &apos;u&apos;, &apos;m&apos;, &apos;i&apos;, &apos;o&apos;, &apos;n&apos;, &apos;g&apos;]</code></pre><h5 id="字符集"><a href="#字符集" class="headerlink" title="字符集"></a>字符集</h5><ul>
<li>字符集是由一对方括号”[]”括起来的字符集合，使用字符集合可以匹配多个字符中的一个<ul>
<li>如 C[ET]O,匹配到为CEO或CTO</li>
<li>[0-9a-fA-F]，匹配单个的十六进制数字</li>
</ul>
</li>
<li>字符和范围定义的先后循序对匹配的结果是没有任何影响的</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="string">'uav,ubv,ucv,ucv,uov,uzb'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 取'u' 和'v'中间为‘a’或‘b’的字符</span></span><br><span class="line">findbat = re.findall(<span class="string">'u[ab]v'</span>, a)</span><br><span class="line">print(findbat)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果是连续的字符，可以使用-代替</span></span><br><span class="line"><span class="comment"># 取'u' 和'v'中间为‘a’至‘b’的字符</span></span><br><span class="line">findall = re.findall(<span class="string">'u[a-c]v'</span>, a)</span><br><span class="line">print(findall)</span><br><span class="line"></span><br><span class="line"><span class="comment"># [^string]为取反字符集</span></span><br><span class="line"><span class="comment"># 取'u' 和'v'中间不为‘a’或‘b’的字符</span></span><br><span class="line">findall = re.findall(<span class="string">'u[^ab]'</span>, a)</span><br><span class="line">print(findall)</span><br></pre></td></tr></table></figure>

<pre><code>[&apos;uav&apos;, &apos;ubv&apos;]
[&apos;uav&apos;, &apos;ubv&apos;, &apos;ucv&apos;, &apos;ucv&apos;]
[&apos;uc&apos;, &apos;uc&apos;, &apos;uo&apos;, &apos;uz&apos;]</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">num = <span class="string">'171-2119-2606-A4-A5&amp;A6'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 概括字符集</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># \d, 相当于[0-9]</span></span><br><span class="line"><span class="comment"># \D, 相当于[^0-9]</span></span><br><span class="line"><span class="comment"># \w, 相当于[A-Za-z0-9], 相当于匹配所有单词字符</span></span><br><span class="line"></span><br><span class="line">notnum = re.findall(<span class="string">'\D'</span>, num)</span><br><span class="line">stringall = re.findall(<span class="string">'\w'</span>, num)</span><br><span class="line">num = re.findall(<span class="string">'\d'</span>, num)</span><br><span class="line"></span><br><span class="line">print(notnum, <span class="string">'\n'</span>, num, <span class="string">'\n'</span>, stringall)</span><br></pre></td></tr></table></figure>

<pre><code>[&apos;-&apos;, &apos;-&apos;, &apos;-&apos;, &apos;A&apos;, &apos;-&apos;, &apos;A&apos;, &apos;&amp;&apos;, &apos;A&apos;] 
 [&apos;1&apos;, &apos;7&apos;, &apos;1&apos;, &apos;2&apos;, &apos;1&apos;, &apos;1&apos;, &apos;9&apos;, &apos;2&apos;, &apos;6&apos;, &apos;0&apos;, &apos;6&apos;, &apos;4&apos;, &apos;5&apos;, &apos;6&apos;] 
 [&apos;1&apos;, &apos;7&apos;, &apos;1&apos;, &apos;2&apos;, &apos;1&apos;, &apos;1&apos;, &apos;9&apos;, &apos;2&apos;, &apos;6&apos;, &apos;0&apos;, &apos;6&apos;, &apos;A&apos;, &apos;4&apos;, &apos;A&apos;, &apos;5&apos;, &apos;A&apos;, &apos;6&apos;]</code></pre><h5 id="数量词"><a href="#数量词" class="headerlink" title="数量词"></a>数量词</h5><ul>
<li>词法：{min, max}, min和max 都是非负整数</li>
<li>\b[1-9][0-8]{2,3}\b, 表示为 100-9888之间的数字, \b 表示的是边界</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">stringnum = <span class="string">'python@java@C#123@C++XiongJumm'</span></span><br><span class="line"><span class="comment"># 匹配4-7位的连续字母</span></span><br><span class="line">findall =re.findall(<span class="string">'[a-zA-Z]&#123;4,7&#125;'</span>, stringnum)</span><br><span class="line">print(findall)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 匹配 0-7位的连续字母</span></span><br><span class="line">findall = findall =re.findall(<span class="string">'[a-zA-Z]&#123;,7&#125;'</span>, stringnum)</span><br><span class="line">print(findall)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 匹配 2-正无穷的连续字母</span></span><br><span class="line">findall = findall =re.findall(<span class="string">'[a-zA-Z]&#123;2,&#125;'</span>, stringnum)</span><br><span class="line">print(findall)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 匹配连续两位的连续字母</span></span><br><span class="line">findall = findall =re.findall(<span class="string">'[a-zA-Z]&#123;2&#125;'</span>, stringnum)</span><br><span class="line">print(findall)</span><br></pre></td></tr></table></figure>

<pre><code>[&apos;python&apos;, &apos;java&apos;, &apos;XiongJu&apos;]
[&apos;python&apos;, &apos;&apos;, &apos;java&apos;, &apos;&apos;, &apos;C&apos;, &apos;&apos;, &apos;&apos;, &apos;&apos;, &apos;&apos;, &apos;&apos;, &apos;C&apos;, &apos;&apos;, &apos;&apos;, &apos;XiongJu&apos;, &apos;mm&apos;, &apos;&apos;]
[&apos;python&apos;, &apos;java&apos;, &apos;XiongJumm&apos;]
[&apos;py&apos;, &apos;th&apos;, &apos;on&apos;, &apos;ja&apos;, &apos;va&apos;, &apos;Xi&apos;, &apos;on&apos;, &apos;gJ&apos;, &apos;um&apos;]</code></pre><ul>
<li>贪婪模式<ul>
<li>一次性的读入整个字符串，如果不匹配就丢弃最右边的一个字符，如此循环，直到字符串的长度为0，如上例</li>
</ul>
</li>
<li>懒惰模式<ul>
<li>从字符串的最有左边开始，从0开始读取，若失败则多读一个字符，如此循环，直到读取完成，如下例</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 须在后方加入一个“？”，相当于&#123;4&#125;</span></span><br><span class="line">findall = re.findall(<span class="string">'[a-zA-Z]&#123;4,7&#125;?'</span>, stringnum)</span><br><span class="line">print(findall)</span><br></pre></td></tr></table></figure>

<pre><code>[&apos;pyth&apos;, &apos;java&apos;, &apos;Xion&apos;, &apos;gJum&apos;]</code></pre><h5 id="边界匹配符和组"><a href="#边界匹配符和组" class="headerlink" title="边界匹配符和组"></a>边界匹配符和组</h5><ul>
<li>一般边界匹配符有一下几种</li>
</ul>
<table>
<thead>
<tr>
<th align="left">语法</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">^</td>
<td align="left">匹配字符串开头（在有多行的情况中匹配每行的开头）</td>
</tr>
<tr>
<td align="left">$</td>
<td align="left">匹配字符串末尾（在有多行的情况下匹配每行的开头）</td>
</tr>
<tr>
<td align="left">\A</td>
<td align="left">仅匹配字符串的开头</td>
</tr>
<tr>
<td align="left">\Z</td>
<td align="left">仅匹配字符串的末尾</td>
</tr>
<tr>
<td align="left">\b</td>
<td align="left">匹配\w和\W之间</td>
</tr>
<tr>
<td align="left">\B</td>
<td align="left">\b</td>
</tr>
</tbody></table>
<ul>
<li>分组<ul>
<li>被括号括起来的的表达式就是分组。</li>
<li>分组表达式（…）其实就是把这部分字符作为一个整体</li>
<li>可以有多分组的情况，每遇到一个分组，编号就会+1，而且分组后面也是可以加数量词的</li>
</ul>
</li>
</ul>
<h5 id="替换字符串"><a href="#替换字符串" class="headerlink" title="替换字符串"></a>替换字符串</h5><ul>
<li>re.sub<ul>
<li>一些项目中我们需要替换字符串中的字符，这是后就可以使用函数 def sub()</li>
<li>具体参数如下</li>
</ul>
</li>
</ul>
<table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">pattern</td>
<td align="left">必选，表示正则中的模式字符串</td>
</tr>
<tr>
<td align="left">repl</td>
<td align="left">必选，被替换的字符串</td>
</tr>
<tr>
<td align="left">string</td>
<td align="left">必选，表示要被处理，要被替换的那个string</td>
</tr>
<tr>
<td align="left">count</td>
<td align="left">可选，对于pattern中部分匹配到的结果，count可以对前几个group进行替换</td>
</tr>
<tr>
<td align="left">flags</td>
<td align="left">可选，正则表达式修饰符</td>
</tr>
</tbody></table>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="string">'Python$Android*Java-121'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将"*"或"$"替换为"&amp;"</span></span><br><span class="line">sub1 = re.sub(<span class="string">'[\*$]'</span>,<span class="string">'&amp;'</span>,a)</span><br><span class="line">print(sub1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将字符串中第一个"&amp;"替换成 "*"</span></span><br><span class="line">sub2 = re.sub(<span class="string">'\&amp;'</span>, <span class="string">'*'</span>, sub1, <span class="number">1</span>)</span><br><span class="line">print(sub2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将字符串中 "*" 替换为"!", ""&amp; 替换为"-"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个函数</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">convert</span><span class="params">(value)</span>:</span></span><br><span class="line">    group = value.group()</span><br><span class="line">    <span class="keyword">if</span> (group == <span class="string">'*'</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'!'</span></span><br><span class="line">    <span class="keyword">elif</span> (group == <span class="string">'&amp;'</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'-'</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">sub3 = re.sub(<span class="string">'[\*&amp;]'</span>, convert, sub2)</span><br><span class="line">print(sub3)</span><br></pre></td></tr></table></figure>

<pre><code>Python&amp;Android&amp;Java-121
Python*Android&amp;Java-121
Python!Android-Java-121</code></pre><h5 id="re-match-和-re-search"><a href="#re-match-和-re-search" class="headerlink" title="re.match 和 re.search"></a>re.match 和 re.search</h5><ul>
<li>re.match函数<ul>
<li>语法：re.match(pattern, string, flag=0)</li>
<li>re.match 尝试从字符串的起始位置匹配一个模式，如果不是其实位置匹配成功的话， match() 就返回None</li>
</ul>
</li>
<li>re.search()函数<ul>
<li>re.search(pattern, string, flag=0)</li>
<li>扫描整个字符串并返回第一个成功的匹配</li>
</ul>
</li>
<li>re.match() 和 re.search() 的具体描述如下</li>
</ul>
<table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">pattern</td>
<td align="left">匹配的正则表达式</td>
</tr>
<tr>
<td align="left">string</td>
<td align="left">要匹配的字符串</td>
</tr>
<tr>
<td align="left">flags</td>
<td align="left">标志位，用于控制正则表达是的匹配方式，如:是否区别大小写</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="left">函数</th>
<th align="left">区别</th>
</tr>
</thead>
<tbody><tr>
<td align="left">re.match()</td>
<td align="left">只匹配字符串的开始。如果字符串开始不符合正则表达式，则匹配失败，函数返回None</td>
</tr>
<tr>
<td align="left">re.search()</td>
<td align="left">匹配整个字符串，直到找到一个匹配</td>
</tr>
</tbody></table>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">img = <span class="string">'&lt;img src="http://static.xiaobu.hk/cityact/application/images/20200612/2QCXwH6pej.JPG"&gt;'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用re.search()</span></span><br><span class="line">search = re.search(<span class="string">'&lt;img src="(.*)"&gt;'</span>, img)</span><br><span class="line"><span class="comment"># group(0)是一个完整的分组</span></span><br><span class="line">print(search.group(<span class="number">0</span>))</span><br><span class="line">print(search.group(<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用re.findall()</span></span><br><span class="line">search = re.findall(<span class="string">'&lt;img src="(.*)"&gt;'</span>, img)</span><br><span class="line"><span class="comment"># group(0)是一个完整的分组</span></span><br><span class="line">print(search)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 多个分组的使用</span></span><br><span class="line">search = re.search(<span class="string">'&lt;(.*) src="(.*)"&gt;'</span>, img)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"打印字符串 img:"</span>, search.group(<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">print(<span class="string">"打印图片地址"</span>, search.group(<span class="number">2</span>))</span><br><span class="line"></span><br><span class="line">print(<span class="string">"以元组的形式打印 img和图片地址:"</span>, search.group(<span class="number">1</span>,<span class="number">2</span>))</span><br><span class="line"></span><br><span class="line">print(<span class="string">"使用 groups:"</span>,search.groups())</span><br></pre></td></tr></table></figure>

<pre><code>&lt;img src=&quot;http://static.xiaobu.hk/cityact/application/images/20200612/2QCXwH6pej.JPG&quot;&gt;
http://static.xiaobu.hk/cityact/application/images/20200612/2QCXwH6pej.JPG
[&apos;http://static.xiaobu.hk/cityact/application/images/20200612/2QCXwH6pej.JPG&apos;]
打印字符串 img: img
打印图片地址 http://static.xiaobu.hk/cityact/application/images/20200612/2QCXwH6pej.JPG
以元组的形式打印 img和图片地址: (&apos;img&apos;, &apos;http://static.xiaobu.hk/cityact/application/images/20200612/2QCXwH6pej.JPG&apos;)
使用 groups: (&apos;img&apos;, &apos;http://static.xiaobu.hk/cityact/application/images/20200612/2QCXwH6pej.JPG&apos;)</code></pre>]]></content>
      <tags>
        <tag>code</tag>
        <tag>正则表达式</tag>
      </tags>
  </entry>
  <entry>
    <title>心情_20230422</title>
    <url>/2023/04/22/dairy_20230422/</url>
    <content><![CDATA[<p>伤心桥下春波绿，曾是惊鸿照影来。<br>                          — 陆游&lt;重过沉圆作&gt;</p>
]]></content>
      <tags>
        <tag>碎碎念</tag>
        <tag>diary</tag>
      </tags>
  </entry>
  <entry>
    <title>了解SHELL(其一)</title>
    <url>/2020/06/28/system_linux%E4%B9%8Bshell/</url>
    <content><![CDATA[<p>linux</p>
<h5 id="1-bash"><a href="#1-bash" class="headerlink" title="(1). bash"></a>(1). bash</h5><ul>
<li><p>参考/引用：<a href="http://cn.linux.vbird.org/linux_basic/0320bash_1.php" target="_blank" rel="noopener">鸟哥的Linux私房菜-第十一章</a></p>
</li>
<li><p>命令编修能力</p>
</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看不同用户使用的shell,其记录在文件/etc/passwd中</span></span><br><span class="line">cat /ect/passwd</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看bash的历史命令,其记录在文件~/.bash_history中</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 其只记录前一次登录系统时使用的命令，当前登录运行的命令被记录在缓存中</span></span><br><span class="line">cat ~/.bash_history</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<ul>
<li><p>命令与文件补全能力[tab]</p>
<ul>
<li>[tab]接在命令之后为[命令补全]</li>
<li>[tab] 接在命令-文件之后为[文件补齐]</li>
<li>连续按两次[tab]显示所有可运行的命令</li>
<li>c[tab] [tab]显示以c开头的所有可运行的命令</li>
</ul>
</li>
<li><p>命令别名配置功能（alias）</p>
<ul>
<li><pre><code class="shell">alias lm='ls -al'
<span class="meta">#</span><span class="bash"> lm 等同于命令 ls -al</span>
<span class="meta">#</span><span class="bash"> 查看目前命名的所有别名（<span class="built_in">alias</span>） </span>
alias
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">+ 工作控制、前景背景控制（&lt;font color&#x3D;red&gt;待补充&lt;&#x2F;font&gt;）</span><br><span class="line"></span><br><span class="line">  + [ctrl] + z 将当前任务放入后台</span><br><span class="line"></span><br><span class="line">+ 程序化脚本（shell scripts)</span><br><span class="line"></span><br><span class="line">  + （&lt;font color&#x3D;red&gt;待补充&lt;&#x2F;font&gt;）</span><br><span class="line"></span><br><span class="line">+ 通配符</span><br><span class="line"></span><br><span class="line">  + 如 &quot;*&quot; </span><br><span class="line"></span><br><span class="line">+ Bash shell的内嵌\内建命令 (type)</span><br><span class="line"></span><br><span class="line">  + &#96;&#96;&#96;shell</span><br><span class="line">    # 查看内嵌命令的说明文档，如bash</span><br><span class="line">    man bash</span><br><span class="line">    # 查看命令是偶为内嵌命令 type</span><br><span class="line">    type cd</span><br><span class="line">    &gt;&gt;</span><br><span class="line">    cd is a shell builtin &#x3D;&gt; cd 是 shell 内嵌</span><br></pre></td></tr></table></figure></code></pre>
</li>
</ul>
</li>
<li><p>命令的下达</p>
<ul>
<li>如 “\ [Enter]” 使 [Enter]不再具有[开始运行]的功能，具有转义的作用，并将命令在下一行继续输入</li>
<li>（<font color=red>待补充</font>）</li>
</ul>
</li>
</ul>
]]></content>
      <tags>
        <tag>linux</tag>
        <tag>shell</tag>
        <tag>system</tag>
      </tags>
  </entry>
  <entry>
    <title>【Linux】文件管理和帮助命令</title>
    <url>/2020/07/28/system_linux%E4%B9%8B%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<h3 id="帮助命令"><a href="#帮助命令" class="headerlink" title="帮助命令"></a>帮助命令</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> man</span></span><br><span class="line">man find # 查询命令的说明文档</span><br><span class="line">man -f find # 显示更多的信息</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; </span></span><br><span class="line">find (1)             - search for files in a directory hierarchy</span><br><span class="line">man -k find # 关键词查找</span><br></pre></td></tr></table></figure>
<a id="more"></a>


<h5 id="查找程序的安装路径"><a href="#查找程序的安装路径" class="headerlink" title="查找程序的安装路径"></a>查找程序的安装路径</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">which</span></span></span><br><span class="line">which mysql</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt;</span></span><br><span class="line">/usr/bin/mysql</span><br></pre></td></tr></table></figure>

<h5 id="查看程序的搜索路径"><a href="#查看程序的搜索路径" class="headerlink" title="查看程序的搜索路径"></a>查看程序的搜索路径</h5><ul>
<li>当系统中安装了同一软件的多个版本时，不确定使用的是哪个版本时，这个命令就能派上用场</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> whereis</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> whereis mysql</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt;</span></span><br><span class="line">mysql: /usr/bin/mysql /usr/lib64/mysql /usr/share/mysql /usr/share/man/man1/mysql.1.gz</span><br></pre></td></tr></table></figure>

<h3 id="文件管理"><a href="#文件管理" class="headerlink" title="文件管理"></a>文件管理</h3><h5 id="创建和删除文件"><a href="#创建和删除文件" class="headerlink" title="创建和删除文件"></a>创建和删除文件</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 创建文件</span></span><br><span class="line">mkdir # 创建文件夹文件</span><br><span class="line">touch # 创建普通文件</span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除 rm</span></span><br><span class="line">rm #删除普通文件和空目录文件</span><br><span class="line">rm -rf file # 删除非空目录文件</span><br><span class="line"><span class="meta">#</span><span class="bash"> 复制 cp</span></span><br><span class="line">cp file ./path/ # 复制普通文件</span><br><span class="line">cp -r file ./path # 复制目录文件</span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除和移动文件</span></span><br><span class="line">mv file # 删除文件</span><br><span class="line">mv name newname # 文件重命名</span><br></pre></td></tr></table></figure>

<h5 id="查看当前目录文件下的文件个数"><a href="#查看当前目录文件下的文件个数" class="headerlink" title="查看当前目录文件下的文件个数"></a>查看当前目录文件下的文件个数</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">find ./ | wc -l</span><br></pre></td></tr></table></figure>

<h5 id="目录切换"><a href="#目录切换" class="headerlink" title="目录切换"></a>目录切换</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">cd</span></span></span><br><span class="line">pwd # 显示当前路径</span><br><span class="line">cd # 切换到home目录 或者cd ~</span><br><span class="line">cd - # 切换到上一个工作目录</span><br><span class="line">cd path # 切换到指定目录</span><br></pre></td></tr></table></figure>

<h5 id="列出文件"><a href="#列出文件" class="headerlink" title="列出文件"></a>列出文件</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> ls</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果不写路径 则表示查看当前目录</span></span><br><span class="line">ls path # 查看path路径下的文件</span><br><span class="line">ls | cat -n path # 在每项文件前面增加一个编号</span><br><span class="line">ls -a path # 查看隐藏的文件</span><br></pre></td></tr></table></figure>

<h5 id="查找文件"><a href="#查找文件" class="headerlink" title="查找文件"></a>查找文件</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> find 实时查找</span></span><br><span class="line">find / -name '*.o' # 查找所有以".o"结尾的文件</span><br><span class="line">find ./ -name "core*" | xargs file # 查找以"core"开头文件，并标注文件类型</span><br><span class="line">find ./ -name "*.o" -exec rm &#123;&#125; \; # 递归当前目录及子目录并删除所有".o"文件</span><br><span class="line"><span class="meta">#</span><span class="bash"> locate 需要定时更新数据库</span></span><br><span class="line">locate add # 寻找含有add文件的路径</span><br><span class="line"><span class="meta">#</span><span class="bash"> centos安装locate</span></span><br><span class="line">sudo yum -y install mlocate  # 安装mlocate</span><br><span class="line">sudo updatedb # 初始化</span><br></pre></td></tr></table></figure>

<h5 id="查看文件内容"><a href="#查看文件内容" class="headerlink" title="查看文件内容"></a>查看文件内容</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> cat</span></span><br><span class="line">cat file # 显示文件内容，显示每行的行号 cat -n file</span><br><span class="line"><span class="meta">#</span><span class="bash"> head</span></span><br><span class="line">head -2 /path/** # 显示指定路径下所有文件的前两行，若不指定路径则为当前工作路径</span><br><span class="line">head -2 /path/file # 显示指定文件的前两行内容</span><br><span class="line"><span class="meta">#</span><span class="bash"> tail</span></span><br><span class="line">tail -2 /path/file  # 显示文件倒数两行的内容</span><br><span class="line">tail -f file # 动态显示当前文件内容</span><br><span class="line">tail -fn 200 file # 动态显示最近200行的文件内容</span><br></pre></td></tr></table></figure>

<h5 id="查找文件内容"><a href="#查找文件内容" class="headerlink" title="查找文件内容"></a>查找文件内容</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> diff</span></span><br><span class="line">diff file1 file2 # 比较两个文件的差别</span><br><span class="line"><span class="meta">#</span><span class="bash"> egrep</span></span><br><span class="line">egrep 'xion' file # 在file文件中查找"xion"</span><br></pre></td></tr></table></figure>

<h5 id="文件的权限修改"><a href="#文件的权限修改" class="headerlink" title="文件的权限修改"></a>文件的权限修改</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> chown 改变文件的拥有者</span></span><br><span class="line">chown -R mysql@group /path # 将path文件修改为group组下的mysql用户</span><br><span class="line"><span class="meta">#</span><span class="bash"> chmod 改变文件的读、写、执行权限</span></span><br><span class="line">chmod 777 file</span><br><span class="line">chmod a+x file # 增加文件的可执行权限</span><br></pre></td></tr></table></figure>

<h5 id="增加文件别名"><a href="#增加文件别名" class="headerlink" title="增加文件别名"></a>增加文件别名</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 软链接</span></span><br><span class="line">ln -s cc ccTo # 删除源文件，另一个将无法使用。cc为源文件</span><br><span class="line"><span class="meta">#</span><span class="bash"> 硬链接</span></span><br><span class="line">ln cc ccAotu # 删除其中一个，另一个文件不受影响</span><br></pre></td></tr></table></figure>

<h5 id="设置命令别名"><a href="#设置命令别名" class="headerlink" title="设置命令别名"></a>设置命令别名</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">alias</span></span></span><br><span class="line">alias lsl='ls -lrt'</span><br><span class="line">alias lm='ls -al | more'</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>浅析</tag>
        <tag>linux</tag>
        <tag>system</tag>
        <tag>文件管理</tag>
      </tags>
  </entry>
  <entry>
    <title>PlantUML</title>
    <url>/2020/06/30/tools_PlantUML/</url>
    <content><![CDATA[<p>–基于vscIDE编辑器的PLantUML模块。</p>
<p>1, 本流程图是通过使用代码行(伪代码)进行实现<br>2, 需要Java、需要IDE：<a href="https://code.visualstudio.com/" target="_blank" rel="noopener">Visual Studio Code</a><br>3, 如果需要画时序图和活动图以外的流程图，需要安装grephviz-dot<br>4, 本教程或则记录仅为活动图<br>5, 本次不是完整活动图记录，若需要别的条件或关键词，可以通过附录链接，跳转到官方文档</p>
<a id="more"></a>
<h1 id="1-开始"><a href="#1-开始" class="headerlink" title="1. 开始"></a>1. 开始</h1><p>1, @startuml 和 @enduml 为开始和结束流程<br>2, start 和 stop为开始和结束，end表现为另种结束icon<br>3, if、elseif、和else为条件语句。else只能连续出现一次<br>4, endif 设置多个分支</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@startuml [Test测试]</span></span><br><span class="line"><span class="keyword">if</span>(线路判断规则) then(按照机具上传方向) </span><br><span class="line">    <span class="keyword">if</span>(上下车方向是否相同) then(Y)</span><br><span class="line">        <span class="keyword">if</span>(上车站点是否大于下车站点) then(N)</span><br><span class="line">            :定为一条行程，线路方向和站点序号为机具上传的方向;</span><br><span class="line">            stop</span><br><span class="line">        <span class="keyword">else</span>(Y)</span><br><span class="line">            <span class="keyword">if</span>(上车站点是否等于下车站点) then(Y)</span><br><span class="line">                :定为一条线路，线路方向和序号为机具上传的;</span><br><span class="line">                stop</span><br><span class="line">            <span class="keyword">else</span>(N)</span><br><span class="line">                <span class="keyword">if</span>(上车站点大于下车站点的扣费规则) then(扣除最低票价(有优惠))</span><br><span class="line">                    :定为一条行程，线路方向和站点序号为机具上传;</span><br><span class="line">                    stop</span><br><span class="line">                <span class="keyword">else</span>(扣除最低票价(无优惠))</span><br><span class="line">                    :定为一条行程，线路方向和站点序号为机具上传;</span><br><span class="line">                    stop</span><br><span class="line">                endif</span><br><span class="line">            endif</span><br><span class="line">        endif</span><br><span class="line">    <span class="keyword">else</span>(Y)</span><br><span class="line">        <span class="keyword">if</span>(上车站点是否小于下车站点) then(Y)</span><br><span class="line">            :定为一条行程，上下车为机具上传的方向和站点，扣除正常的区间票价;</span><br><span class="line">            stop</span><br><span class="line">        <span class="keyword">else</span>(N)</span><br><span class="line">            <span class="keyword">if</span>(上车站点是否等于下车站点) then(Y)</span><br><span class="line">                :定为一条行程上下车为机具上传的方向和站点，扣除线路最低票价;</span><br><span class="line">                stop</span><br><span class="line">            <span class="keyword">else</span>(N)</span><br><span class="line">                :定为一条行程，扣除方向的最低区间票价;</span><br><span class="line">                stop</span><br><span class="line">            endif</span><br><span class="line">        endif</span><br><span class="line">    endif</span><br><span class="line"><span class="keyword">else</span>(根据上传站点序号进行判断)</span><br><span class="line">    :此处省略一万字.....;</span><br><span class="line">    stop</span><br><span class="line"><span class="meta">@enduml</span></span><br></pre></td></tr></table></figure>

<h1 id="2-説明"><a href="#2-説明" class="headerlink" title="2. 説明"></a>2. 説明</h1><p>1, 缩进不会影响实际的表现，缩进只是本人习惯和方便查看分支<br>2, 查看实时预览图片使用 atl+d组合键<br>3, 文件后缀使用 wad文件或别的后缀名</p>
<h1 id="3-參考文檔"><a href="#3-參考文檔" class="headerlink" title="3. 參考文檔"></a>3. 參考文檔</h1><p><a href="https://plantuml.com/zh/" target="_blank" rel="noopener">plantuml</a></p>
]]></content>
      <categories>
        <category>奇技淫巧</category>
      </categories>
      <tags>
        <tag>工具</tag>
        <tag>流程图</tag>
        <tag>PlantUML</tag>
        <tag>vscode</tag>
      </tags>
  </entry>
  <entry>
    <title>V2ray搭建教程</title>
    <url>/2020/07/05/tools_V2ray/</url>
    <content><![CDATA[<p>V2Ray 是一个与 Shadowsocks 类似的代理软件，可以用来科学上网等。</p>
<a id="more"></a>

<h1 id="1-服务器"><a href="#1-服务器" class="headerlink" title="1. 服务器"></a>1. 服务器</h1><p>1, 可以使用<a href="https://www.linode.com/" target="_blank" rel="noopener">linode</a> 或者<a href="https://bandwagonhost.cn/" target="_blank" rel="noopener">搬瓦工</a>vps服务器</p>
<p>2, 本次推荐Google Cloud(谷歌云)，搭建v2ray或者其余学习用途</p>
<p>3, <img src="https://cdn.jsdelivr.net/gh/xiongJum/Picture/img/scr_GoogleCloud.png" alt=""></p>
<pre><code>(1). 优点

+   也无需担心和AWS一样会莫名其妙的扣费，在没有升级为付费用户之前是不会扣除信用卡的金额
+   新用户会赠送等同于$300 的当地货币使用，有效期为12个月
+   有香港等亚太地区的服务器，使用延迟会好上不少

(2). 缺点

+   搭建过程中需要使用魔法上网</code></pre><p>4, 本教程暂不介绍服务器申请<br>5, 也可以使用別的國外服務器</p>
<h1 id="2-服务端配置"><a href="#2-服务端配置" class="headerlink" title="2. 服务端配置"></a>2. 服务端配置</h1><p>1, 本次教程选择的面板为<a href="https://github.com/sprov065" target="_blank" rel="noopener">sprov065</a>@github用户的<a href="https://github.com/sprov065/v2-ui" target="_blank" rel="noopener">v2-ui</a> </p>
<pre><code>(1). 可视化操作，查看方便、学习门槛较低
(2). 由于是网页端所以管理会比较方便
(3). 该面板可以配置多用户</code></pre><h2 id="2-1-安装-amp-升级"><a href="#2-1-安装-amp-升级" class="headerlink" title="2.1 安装&amp;升级"></a>2.1 安装&amp;升级</h2><p>1, 安裝v2ray</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bash &lt;(curl -Ls https:&#x2F;&#x2F;blog.sprov.xyz&#x2F;v2-ui.sh)</span><br></pre></td></tr></table></figure>

<h2 id="2-2-設置"><a href="#2-2-設置" class="headerlink" title="2.2 設置"></a>2.2 設置</h2><p>1, 输入v2-ui，进入面板设置</p>
<img src="https://cdn.jsdelivr.net/gh/xiongJum/Picture/scr/03.png" style="zoom:50%;" />

<p>2， 查看或者重新设置面板的端口号</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查找v2-ui的服务进程</span></span><br><span class="line">ps -ef | grep v2-ui</span><br><span class="line"><span class="meta">#</span><span class="bash"> 根据PID查找端口号</span></span><br><span class="line">netstat -nap | grep [PID]</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/xiongJum/Picture/Scr/03.png" alt=""></p>
<h2 id="2-3-通過瀏覽器設置代理"><a href="#2-3-通過瀏覽器設置代理" class="headerlink" title="2.3 通過瀏覽器設置代理"></a>2.3 通過瀏覽器設置代理</h2><p>1, 输入当前服务器IP:端口 和账号密码admin，进入设置面板</p>
<p><img src="https://cdn.jsdelivr.net/gh/xiongJum/Picture/Scr/04.png" alt=""></p>
<p>1, 点击账号列表，点击左上角的+号，进入添加账号页面，备注为非填项，其余默认即可，可以按照自己的需求进行修改，本次教程选择的协议为kcp<br>2, kcp消耗流量比较多，但延迟较低，对于延迟较高的IP，选择kcp会一定程度上改善网络环境<br>3, 如果想选择其余协议，可以参考<a href="https://toutyrater.github.io/advanced/wss_and_web.html" target="_blank" rel="noopener">Blog</a><br>4, 若想使用Nginx+w2+TLS进行网络代理，本教程中协议传输配置选择w2，不要选择TLS。TLS在Nginx中配置即可，但客户端中要选择TLS，端口为Nginx中代理的端口，非在本面板中设置的端口</p>
<p><img src="https://cdn.jsdelivr.net/gh/xiongJum/Picture/Scr/05.png" alt=""></p>
<p>点击添加-二维码-复制连接，即可获得v2Ray的连接</p>
<h1 id="3-客户端配置"><a href="#3-客户端配置" class="headerlink" title="3. 客户端配置"></a>3. 客户端配置</h1><h2 id="3-1-下载地址"><a href="#3-1-下载地址" class="headerlink" title="3.1 下载地址"></a>3.1 下载地址</h2><p>PC端：<a href="https://github.com/2dust/v2rayN/releases" target="_blank" rel="noopener">windows</a>、<a href="https://github.com/Cenmrev/V2RayX/releases" target="_blank" rel="noopener">MacOS</a><br>移动端：<a href="https://github.com/2dust/v2rayNG/releases" target="_blank" rel="noopener">Android</a></p>
<h2 id="3-2-配置：windows"><a href="#3-2-配置：windows" class="headerlink" title="3.2 配置：windows"></a>3.2 配置：windows</h2><p>1, 下载并解压<a href="https://github.com/2dust/v2rayN/releases/download/3.19/v2rayN.zip" target="_blank" rel="noopener">v2RayN</a>和<a href="https://github.com/2dust/v2rayN/releases/download/3.19/v2rayN-Core.zip" target="_blank" rel="noopener">v2rayN-Core</a><br>2, 点击v2rayN.exe文件，右击右下角的v2rayN的图标选择{从剪贴板导入批量Url}<br>3, 双击右下角的v2ray图标进入显示面板，可以发现有刚刚导入的链接<br>4, 右击右下角的图标选择{Http代理-PAC模式}</p>
<h1 id="4-扩展"><a href="#4-扩展" class="headerlink" title="4. 扩展"></a>4. 扩展</h1><h2 id="4-1-模式说明"><a href="#4-1-模式说明" class="headerlink" title="4.1 模式说明"></a>4.1 模式说明</h2><p>1, 全局是代理所有的网络包括局域网和国内的网络如百度，和国外的网络如Google<br>2, PAC是通过配置文件选择代理部分网络<br>3, v2ray支持GFWfilt地址和本地pac文件同时生效，若GFWList地址中没有代理你需要的网络，你可以在用户PAC设置中手动添加要代理的ip或者域名<br><img src="https://cdn.jsdelivr.net/gh/xiongJum/Picture//Scr/08.png" alt=""></p>
<h2 id="4-2-設置PAC代理"><a href="#4-2-設置PAC代理" class="headerlink" title="4.2 設置PAC代理"></a>4.2 設置PAC代理</h2><p>1, pixiv的PAC代理地址</p>
<ul>
<li><a href="http://www.pixiv.net" target="_blank" rel="noopener">www.pixiv.net</a>,</li>
<li>api.booth.pm,(存疑)</li>
<li>i.pximg.net,</li>
</ul>
<h2 id="4-3-局域网代理配置（如switch配置）"><a href="#4-3-局域网代理配置（如switch配置）" class="headerlink" title="4.3 局域网代理配置（如switch配置）"></a>4.3 局域网代理配置（如switch配置）</h2><p>1, 双击v2ray-参数设置，进入设置页面，点击基础设置查看本地监听端口<br>2, http代理默认即可，你也可以根据自己的选择进行不同的配置<br>3, 本地会开启两个端口号（设置的端口号X和X+1）<br>4, 按下快捷键win+R，在运行输入框中输入cmd<br>5, 在cmd界面输入ipconfig<br>   <img src="https://cdn.jsdelivr.net/gh/xiongJum/Picture//Scr/09.png" alt=""></p>
<p>6,在要代理的机器中（如switch）ip设置为上图的ipv4、端口号为设置的端口号+1</p>
<hr>
<h1 id="4-引申文檔"><a href="#4-引申文檔" class="headerlink" title="4. 引申文檔"></a>4. 引申文檔</h1><p><a href="https://selierlin.github.io/v2ray/" target="_blank" rel="noopener">V2Ray 配置指南</a></p>
]]></content>
      <tags>
        <tag>代理</tag>
        <tag>V2ray</tag>
        <tag>梯子</tag>
      </tags>
  </entry>
  <entry>
    <title>jupyterlab</title>
    <url>/2022/01/18/tools_jupyter/</url>
    <content><![CDATA[<p>JupyterLab 是 Project Jupyter 的下一代基于 Web 的用户界面。<br>JupyterLab 使您能够以灵活、集成和可扩展的方式处理文档和活动，例如 Jupyter 笔记本、文本编辑器、终端和自定义组件.</p>
<p>以下适用于 jupyter3.0 </p>
<a id="more"></a>

<h1 id="1-安装jypyter"><a href="#1-安装jypyter" class="headerlink" title="1 安装jypyter"></a>1 安装jypyter</h1><h2 id="1-1-准备隔离的环境"><a href="#1-1-准备隔离的环境" class="headerlink" title="1.1 准备隔离的环境"></a>1.1 准备隔离的环境</h2><ol>
<li>创建 python 虚拟环境</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python3 -m venv jupyter</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>进入虚拟环境</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> jupyter/bin/activate</span><br></pre></td></tr></table></figure>

<h2 id="1-2-安装-jupyterlab"><a href="#1-2-安装-jupyterlab" class="headerlink" title="1.2 安装 jupyterlab"></a>1.2 安装 jupyterlab</h2><h3 id="1-2-1-使用-pip-安装本体"><a href="#1-2-1-使用-pip-安装本体" class="headerlink" title="1.2.1 使用 pip 安装本体"></a>1.2.1 使用 pip 安装本体</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用 pip 安装</span></span><br><span class="line">pip install jupyterlab</span><br></pre></td></tr></table></figure>

<p>如果使用 <em>pip install –user</em> 安装， 需要将 <em>jupyter lab</em> 加入至环境变量中去，<br><em>export PATH=”&amp;HOME/.local/bin:&amp;PATH”</em></p>
<h3 id="1-2-2-本地化和语言"><a href="#1-2-2-本地化和语言" class="headerlink" title="1.2.2 本地化和语言"></a>1.2.2 本地化和语言</h3><p>从 3.0 版本开始，JupyterLab 提供了设置用户界面显示语言的能力。</p>
<h4 id="语言包"><a href="#语言包" class="headerlink" title="语言包"></a>语言包</h4><p>显示新的语言，您需要安装语言包，访问<a href="https://github.com/jupyterlab/language-packs/tree/master/language-packs" target="_blank" rel="noopener">语言包列表</a> </p>
<h4 id="安装语言包"><a href="#安装语言包" class="headerlink" title="安装语言包"></a>安装语言包</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install jupyterlab-language-pack-zh-CN</span><br></pre></td></tr></table></figure>

<p>点击 Settings &gt;&gt; Language 更改显示语言, 并点击 Ok 确认更改语言，重新载入或者刷新页面即可显示此示例中的简体中文。</p>
<h3 id="1-2-3-安装-nodejs"><a href="#1-2-3-安装-nodejs" class="headerlink" title="1.2.3 安装 nodejs"></a>1.2.3 安装 nodejs</h3><p><a href="https://nodejs.org/zh-cn/" target="_blank" rel="noopener">Node.js</a>® 是一个基于 Chrome V8 引擎 的 JavaScript 运行时环境。</p>
<h4 id="Ubuntu-下安装-nodejs-1"><a href="#Ubuntu-下安装-nodejs-1" class="headerlink" title="Ubuntu 下安装 nodejs [1]"></a>Ubuntu 下安装 nodejs [1]</h4><p>可以从 Ubuntu 软件软件源中安装 Node.js 和 npm，但是此方法安装的 node.js 版本过低，故采用第二种方法</p>
<h5 id="从-NodeSource-中安装-Node-js-和-npm"><a href="#从-NodeSource-中安装-Node-js-和-npm" class="headerlink" title="从 NodeSource 中安装 Node.js 和 npm"></a>从 NodeSource 中安装 Node.js 和 npm</h5><ol>
<li>使用 sudo 用户身份运行下面的命令，下载并执行 NodeSource 安装脚本</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo curl -sL https://deb.nodesource.com/setup_14.x | sudo -E bash -</span><br></pre></td></tr></table></figure>

<p>这个脚本将会添加 NodeSource 的签名 key 到你的系统，创建一个 apt 源文件，安装必备的软件包，并且刷新 apt 缓存。<br>如果你需要另外的 Node.js 版本，例如12.x，将setup_14.x修改为setup_12.x</p>
<ol start="2">
<li>NodeSource 源启用成功后，安装 Node.js 和 npm</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install nodejs</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>验证 Node.js 和 npm 是否正确安装。打印它们的版本号：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm --version</span><br><span class="line">node --version</span><br></pre></td></tr></table></figure>

<h4 id="Arch-下安装-nodejs-2"><a href="#Arch-下安装-nodejs-2" class="headerlink" title="Arch 下安装 nodejs [2]"></a>Arch 下安装 nodejs [2]</h4><p>在 Arch Linux 下安装 Node.js 非常的简单, 只需要运行 <strong>sudo pacman -S nodejs npm</strong> 即可。<br>使用 Arch Linux 仓库中 Node.js 长期支持版本（LTS） 的包， 防止 node.js 不兼容部署在旧版本中的代码。</p>
<ol>
<li>安装 lts(长期支持版) node.js</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo pacman -Ss nodejs-lts</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">community/nodejs-lts-erbium 12.22.8-1</span><br><span class="line">    Evented I/O <span class="keyword">for</span> V8 javascript (LTS release: Erbium)</span><br><span class="line">community/nodejs-lts-fermium 14.18.2-1</span><br><span class="line">    Evented I/O <span class="keyword">for</span> V8 javascript (LTS release: Fermium)</span><br><span class="line">community/nodejs-lts-gallium 16.13.1-1</span><br><span class="line">    Evented I/O <span class="keyword">for</span> V8 javascript (LTS release: Gallium)</span><br><span class="line"></span><br><span class="line">sudo pacman -S nodejs-lts-gallium</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>验证 Node.js 和 npm 是否正确安装。打印它们的版本号：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm --version</span><br><span class="line">node --version</span><br></pre></td></tr></table></figure>

<h1 id="2-安装-jupyterlab-扩展"><a href="#2-安装-jupyterlab-扩展" class="headerlink" title="2 安装 jupyterlab 扩展"></a>2 安装 jupyterlab 扩展</h1><h2 id="2-1-jupyterlab-lsp"><a href="#2-1-jupyterlab-lsp" class="headerlink" title="2.1 jupyterlab-lsp"></a>2.1 <a href="https://github.com/jupyter-lsp/jupyterlab-lsp" target="_blank" rel="noopener">jupyterlab-lsp</a></h2><p>Language Server Protocol integration for Jupyter(Lab)。<br>提供语言的自动补全功能</p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install <span class="string">'jupyterlab&gt;=3.0.0,&lt;4.0.0a0'</span> jupyterlab-lsp</span><br></pre></td></tr></table></figure>

<h3 id="为选择的语言安装-LSP-服务器"><a href="#为选择的语言安装-LSP-服务器" class="headerlink" title="为选择的语言安装 LSP 服务器"></a>为选择的语言安装 LSP 服务器</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install <span class="string">'python-lsp-server[all]'</span></span><br></pre></td></tr></table></figure>

<h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><h4 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h4><p>将鼠标悬停在任何一段代码上， 如果出现下滑线，您可以按下 Ctrl 以获取带有函数/类签名、模块文档或语言服务器（或其他信息工具）的提示信息</p>
<h4 id="诊断"><a href="#诊断" class="headerlink" title="诊断"></a>诊断</h4><p>严重错误带有红色下滑线，警告为橙色。将鼠标悬停在带有下滑线上可以查看更加详细的信息</p>
<h2 id="2-2-jupyterlab-kite"><a href="#2-2-jupyterlab-kite" class="headerlink" title="2.2 jupyterlab-kite"></a>2.2 <a href="https://github.com/kiteco/jupyterlab-kite" target="_blank" rel="noopener">jupyterlab-kite</a></h2><p>Kite 是一个 AI 驱动的编程助手，可帮助您在 JupyterLab 中编写 Python 代码。Kite 通过节省击键并在正确的时间向您显示正确的信息来帮助您更快地编写代码。在<a href="https://kite.com/integrations/jupyter/了解更多关于" target="_blank" rel="noopener">https://kite.com/integrations/jupyter/了解更多关于</a> Kite 如何增强 JupyterLab 编辑器功能的信息。</p>
<p><strong>安装 Kite 需要 CPU 支持 AVX</strong>， 详情请参考 <a href="https://help.kite.com/article/101-kite-requires-avx-support" target="_blank" rel="noopener">https://help.kite.com/article/101-kite-requires-avx-support</a></p>
<h3 id="在-Linux-下安装"><a href="#在-Linux-下安装" class="headerlink" title="在 Linux 下安装"></a>在 Linux 下安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bash -c <span class="string">"<span class="variable">$(wget -q -O - https://linux.kite.com/dls/linux/current)</span>"</span></span><br><span class="line"></span><br><span class="line">pip install <span class="string">"jupyterlab-kite&gt;=2.0.2"</span></span><br></pre></td></tr></table></figure>


<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>[1] <a href="https://developer.aliyun.com/article/760687" target="_blank" rel="noopener">阿里云社区</a></p>
<p>[2] <a href="https://zzz.buzz/zh/" target="_blank" rel="noopener">zzz.buzz</a></p>
]]></content>
      <tags>
        <tag>Python</tag>
        <tag>ide</tag>
        <tag>jupyter</tag>
        <tag>tools</tag>
      </tags>
  </entry>
  <entry>
    <title>VIM 插件管理器-Vundle</title>
    <url>/2021/11/27/tools_vim01/</url>
    <content><![CDATA[<p>Vim 是一个高度可配置的文本编辑器，旨在高效地创建和更改任何类型的文本。它作为“vi”和“vim”包含在大多数 类UNIX 和Linux 中。</p>
<a id="more"></a>
<h1 id="1-安装插件管理器"><a href="#1-安装插件管理器" class="headerlink" title="1. 安装插件管理器"></a>1. 安装插件管理器</h1><h2 id="1-1-下载-Vundle"><a href="#1-1-下载-Vundle" class="headerlink" title="1.1 下载 Vundle"></a>1.1 下载 Vundle</h2><ol>
<li>Vundle插件也是提供一个Vundle.vim文件，其下载地址为 <a href="https://github.com/VundleVim/Vundle.vim.git" target="_blank" rel="noopener">Vim bundle</a> 然后将下载后的文件存放到 ~/.vim/bundle </li>
<li>或者可以直接从 Github 上拉取文件<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;VundleVim&#x2F;Vundle.vim.git ~&#x2F;.vim&#x2F;bundle&#x2F;Vundle.vim</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="1-2-配置-Vundle"><a href="#1-2-配置-Vundle" class="headerlink" title="1.2 配置 Vundle"></a>1.2 配置 Vundle</h2><ol>
<li>修改 Vim 的配置文件 ~/.vimrc, 若没有此文件可以直接进行创建， 以下是配置文件。</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">set nocompatible               &quot;去除VIM一致性，必须</span><br><span class="line">filetype off                   </span><br><span class="line"></span><br><span class="line">set rtp+&#x3D;~&#x2F;.vim&#x2F;bundle&#x2F;Vundle.vim &quot;设置包括vundle和初始化相关的运行时路径</span><br><span class="line"></span><br><span class="line">call vundle#begin()</span><br><span class="line">&quot;在此增加其他插件，安装的插件需要放在vundle#begin和vundle#end之间&quot;</span><br><span class="line">&quot;安装github上的插件格式为 Plugin &#39;用户名&#x2F;插件仓库名&#39;&quot;</span><br><span class="line"></span><br><span class="line">Plugin &#39;VundleVim&#x2F;Vundle.vim&#39;  &quot;启用vundle管理插件，必须&quot;</span><br><span class="line"></span><br><span class="line">call vundle#end()           </span><br><span class="line"></span><br><span class="line">filetype plugin indent on     &quot;加载vim自带和插件相应的语法和文件类型相关脚本，必须</span><br></pre></td></tr></table></figure>

<h2 id="1-3-安装-Vundle"><a href="#1-3-安装-Vundle" class="headerlink" title="1.3 安装 Vundle"></a>1.3 安装 Vundle</h2><ol>
<li>需要打开配置文件 ~/.vimrc， 在命令模式下输入 <strong>:PluginInstall</strong></li>
<li>或者在终端命令行下通过命令 <strong>vim + PluginInstall + qall(用户名/插件仓库名)</strong> 直接安装</li>
</ol>
<h2 id="1-4-使用-Vundle-修改插件"><a href="#1-4-使用-Vundle-修改插件" class="headerlink" title="1.4 使用 Vundle 修改插件"></a>1.4 使用 Vundle 修改插件</h2><ol>
<li>安装插件， 同1.3</li>
<li>删除插件，编辑 Vim 配置文件 .vimrc, 删除想要移除插件所对应的 Plugin 一行， 然后打开 vim 在 vim命令行模式中执行命令 <strong>:BundleClean</strong></li>
<li>其余操作方法可以见<a href="https://github.com/VundleVim/Vundle.vim/blob/v0.10.2/doc/vundle.txt#L319-L360" target="_blank" rel="noopener">原文档</a></li>
</ol>
<h1 id="2-Markdown-扩展插件"><a href="#2-Markdown-扩展插件" class="headerlink" title="2. Markdown 扩展插件"></a>2. Markdown 扩展插件</h1><h2 id="2-1-vim-markdown"><a href="#2-1-vim-markdown" class="headerlink" title="2.1 vim-markdown"></a>2.1 vim-markdown</h2><p>原始 Markdown 的语法高亮、匹配规则和映射, 项目地址<a href="https://github.com/plasticboy/vim-markdown" target="_blank" rel="noopener">vim-markdown</a></p>
<h3 id="2-1-1-安装"><a href="#2-1-1-安装" class="headerlink" title="2.1.1 安装"></a>2.1.1 安装</h3><ol>
<li>使用 Vundle 安装，将以下两行添加至您的 .vimrc 文件中<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#39; 安装 vim-markdown</span><br><span class="line">Plugin &#39;godlygeek&#x2F;tabular&#39;         &#39;依赖</span><br><span class="line">Plugin &#39;plasticboy&#x2F;vim-markdown&#39;   &#39;本体</span><br></pre></td></tr></table></figure>
保存后，直接在 .vimrc 文件的命令行模式键入命令 :PluginInstall</li>
</ol>
<h3 id="2-1-2-基本用法"><a href="#2-1-2-基本用法" class="headerlink" title="2.1.2 基本用法"></a>2.1.2 基本用法</h3><ol>
<li>使用 :help fold-expr 和 :help fold-commands 了解详情</li>
<li>默认情况下为标题启用折叠</li>
</ol>
<ul>
<li>zr 降低整个缓冲区的折叠级别 1~6，即六级标题</li>
<li>zR 打开所有的折叠</li>
<li>zm 增加折叠级别</li>
<li>zM 折叠所有</li>
<li>za 展开当前光标所在的位置</li>
<li>zc 折叠光标所在的位置</li>
<li>zA 递归展开</li>
<li>zC 递归折叠</li>
</ul>
<h2 id="2-2-markdown-preview"><a href="#2-2-markdown-preview" class="headerlink" title="2.2 markdown-preview"></a>2.2 markdown-preview</h2><p>通过浏览器实时预览 Markdown 文件</p>
<h3 id="2-2-1-安装"><a href="#2-2-1-安装" class="headerlink" title="2.2.1 安装"></a>2.2.1 安装</h3><ol>
<li>打开 .vimrc 添加以下几行文本<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Plugin &#39;iamcco&#x2F;markdown-preview.nvim&#39;</span><br></pre></td></tr></table></figure></li>
<li>然后在命令行模式中运行<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">:source %</span><br><span class="line">:PluginInstall</span><br><span class="line">:call mkdp#util#install()</span><br></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
      <tags>
        <tag>tools</tag>
        <tag>vim</tag>
        <tag>编辑器</tag>
        <tag>插件</tag>
        <tag>Vundle</tag>
      </tags>
  </entry>
</search>
