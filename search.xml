<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Ocean 主題配置</title>
    <url>/2021/10/29/Hexo%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>Ocean 是基于 Hexo 默认主题 landscape 的功能，设计的一款支持移动设备的主题，并且集成了 Gitalk 与 Valine 评论功能。</p>
<p>如果你喜欢 Ocean 可以从 <a href="https://github.com/zhwangart/hexo-theme-ocean" target="_blank" rel="noopener">GitHub</a> 下载，主题默认使用 Logo 是 Hexo 的 Logo，更换 Logo 路径在 ocean/source/images/hexo.svg ，注意它还有一个反色版 hexo-inverted.svg ，如果你更改了文件名，那么还需要在 ocean/_config.yml 做对应的修改。</p>
<p>详细文档见 <a href="https://zhwangart.com/2018/11/30/Ocean/" target="_blank" rel="noopener">Ocean 文档</a>，以下是个人的需要的配置</p>
<a id="more"></a>


<h1 id="1-安装"><a href="#1-安装" class="headerlink" title="1. 安装"></a>1. 安装</h1><p>下载安装</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span> https://github.com/zhwangart/hexo-theme-ocean.git themes/ocean</span></span><br></pre></td></tr></table></figure>

<p>更新</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cd themes&#x2F;ocean</span><br><span class="line">$ git pull</span><br></pre></td></tr></table></figure>

<h1 id="2-配置"><a href="#2-配置" class="headerlink" title="2. 配置"></a>2. 配置</h1><h2 id="2-1-添加页面"><a href="#2-1-添加页面" class="headerlink" title="2.1 添加页面"></a>2.1 添加页面</h2><p>Ocean 默认在主题配置文件中配置相册和关于的链接， 但是主题中实际上并没有此页面，点击会提示 404 。可以按照需要进行删除和安装。</p>
<h3 id="2-1-1-安装存在格式的页面"><a href="#2-1-1-安装存在格式的页面" class="headerlink" title="2.1.1 安装存在格式的页面"></a>2.1.1 安装存在格式的页面</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo new page gallery    &#x2F;&#x2F; 创建相册页面</span><br><span class="line">hexo new page about      &#x2F;&#x2F; 创建关于页面</span><br><span class="line">hexo new page tags       &#x2F;&#x2F; 创建标签页面</span><br><span class="line">hexo new page categories &#x2F;&#x2F; 创建分类页面</span><br><span class="line">hexo new page favorites  &#x2F;&#x2F; 创建收藏页面</span><br></pre></td></tr></table></figure>

<p>主题会根据不同的页面定义不同的模板(theme/layout/), 需要在 index.md 文件中的 Front-matter 区域标注 layout， 以 Tags 页面为例：</p>
<p>1，位置处在 source/tag/index.md</p>
<p>2，Markdown</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 标签</span><br><span class="line">date: 2021-10-31</span><br><span class="line">type: tags</span><br><span class="line">layout: "tags"</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<p>3，配置后需要在 themes/ocean/_config.yml 文件中的 menu 下新增页面， 如 about 。</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">menu:</span><br><span class="line"><span class="code">    关于: about/</span></span><br></pre></td></tr></table></figure>

<h4 id="2-1-1-1-增加收藏页面"><a href="#2-1-1-1-增加收藏页面" class="headerlink" title="2.1.1.1 增加收藏页面"></a>2.1.1.1 增加收藏页面</h4><ol>
<li><p>新增一个收藏页面</p>
</li>
<li><p>修改 navbar.styl 文件中的 favorites 展示图标，注意顺序。</p>
</li>
<li><p>编辑 favorites/index.md 文件</p>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">### 样机 Mockups</span><br><span class="line"></span><br><span class="line">&lt;div class&#x3D;&quot;card-quote&quot;&gt;</span><br><span class="line"></span><br><span class="line">![Graphics](&#x2F;images&#x2F;logos&#x2F;lstoreLogo.svg)</span><br><span class="line">#### Graphics</span><br><span class="line">高质量的样机素材</span><br><span class="line">[https:&#x2F;&#x2F;www.ls.graphics](https:&#x2F;&#x2F;www.ls.graphics)</span><br><span class="line"></span><br><span class="line">![sketchsheets](&#x2F;images&#x2F;logos&#x2F;sketchLogo.svg)</span><br><span class="line">#### Sketchsheets</span><br><span class="line">Sketch 稿件的样机素材</span><br><span class="line">[https:&#x2F;&#x2F;sketchsheets.com](https:&#x2F;&#x2F;sketchsheets.com)</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<h2 id="2-2-插件"><a href="#2-2-插件" class="headerlink" title="2.2  插件"></a>2.2  插件</h2><h3 id="2-2-1-开启插件"><a href="#2-2-1-开启插件" class="headerlink" title="2.2.1 开启插件"></a>2.2.1 开启插件</h3><h4 id="2-2-1-1-本地检索-hexo-generator-search"><a href="#2-2-1-1-本地检索-hexo-generator-search" class="headerlink" title="2.2.1.1  本地检索 hexo-generator-search"></a>2.2.1.1  本地检索 <a href="https://github.com/wzpan/hexo-generator-search" target="_blank" rel="noopener">hexo-generator-search</a></h4><p>1，安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure>

<p>2，配置</p>
<p>2.1，Hexo 的配置文件 _config.yml 添加插件配置</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 本地搜索</span></span><br><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span></span><br><span class="line">  <span class="attr">content:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h4 id="2-2-1-2-博客文章置顶-hexo-generator-index-pin-top"><a href="#2-2-1-2-博客文章置顶-hexo-generator-index-pin-top" class="headerlink" title="2.2.1.2 博客文章置顶 hexo-generator-index-pin-top"></a>2.2.1.2 博客文章置顶 <a href="https://github.com/netcan/hexo-generator-index-pin-top" target="_blank" rel="noopener">hexo-generator-index-pin-top</a></h4><p>1，安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm uninstall hexo-generator-index --save</span><br><span class="line">npm install hexo-generator-index-pin-top --save</span><br></pre></td></tr></table></figure>

<p>2，在需要置顶文章的 Front-matter 区域加上 top: ture， 即可开启文章置顶</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title : Ocean 配置</span><br><span class="line">top: ture</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<h3 id="2-2-2-修改配置文件"><a href="#2-2-2-修改配置文件" class="headerlink" title="2.2.2 修改配置文件"></a>2.2.2 修改配置文件</h3><h4 id="2-2-2-1-文章封面图"><a href="#2-2-2-1-文章封面图" class="headerlink" title="2.2.2.1 文章封面图"></a>2.2.2.1 文章封面图</h4><p>1，添加</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title:  Ocean 配置</span><br><span class="line">photos: [</span><br><span class="line">        [&quot;&#x2F;images&#x2F;相机.jpg&quot;], &#x2F;&#x2F; themes&#x2F;ocean&#x2F;source&#x2F;images 目录下</span><br><span class="line">        [&quot;img_url&quot;] &#x2F;&#x2F; 使用 http 链接</span><br><span class="line">        ]</span><br><span class="line">---</span><br></pre></td></tr></table></figure>
<p><em>设置 Hexo 博客的封面图，而不是博客的配图</em></p>
<h4 id="2-2-2-2-Toc-文章目录"><a href="#2-2-2-2-Toc-文章目录" class="headerlink" title="2.2.2.2 Toc 文章目录"></a>2.2.2.2 Toc 文章目录</h4><p>1，配置文件路径为 ocean/_config.yml</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Toc 文章目录</span><br><span class="line">toc: true</span><br></pre></td></tr></table></figure>

<p>2，開啓 Toc 后, 在文章 Front-matter 中設置 toc 進行部分關閉。</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: Toc 文章目录</span><br><span class="line">toc: false</span><br><span class="line">---</span><br></pre></td></tr></table></figure>
<p><em>使用 <a href="http://tscanlin.github.io/tocbot/" target="_blank" rel="noopener">Tocbot</a> 解析内容中的标题标签（h1~h6）并插入目录。</em>  </p>
<h4 id="2-2-2-3-修改導航欄圖標"><a href="#2-2-2-3-修改導航欄圖標" class="headerlink" title="2.2.2.3 修改導航欄圖標"></a>2.2.2.3 修改導航欄圖標</h4><p>1，修改主页、相册等图标，需要修改 css 文件，其所在位置在目录 source/css/_partial/navbar.styl 中， 修改时需要注意对应的顺序<br>2，修改 icon，需要替换 themes/ocean/source/favicon.ico 图片文件</p>
<h4 id="2-2-2-4-刪除鏈接文字的下劃綫"><a href="#2-2-2-4-刪除鏈接文字的下劃綫" class="headerlink" title="2.2.2.4 刪除鏈接文字的下劃綫"></a>2.2.2.4 刪除鏈接文字的下劃綫</h4><p>1，配置文件的路勁為 ocean/source/css/style.styl。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">a</span></span><br><span class="line">  <span class="selector-tag">color</span> <span class="selector-tag">link-color</span></span><br><span class="line">  &amp;<span class="selector-pseudo">:hover</span></span><br><span class="line">    <span class="selector-tag">color</span> <span class="selector-tag">link-hover-color</span></span><br><span class="line">  &amp;<span class="selector-pseudo">:active</span></span><br><span class="line">    <span class="selector-tag">color</span> <span class="selector-tag">link-active-color</span></span><br><span class="line">  &amp;<span class="selector-class">.disabled</span></span><br><span class="line">    <span class="selector-tag">color</span> <span class="selector-tag">disabled-color</span></span><br><span class="line"></span><br><span class="line">//  为</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span></span><br><span class="line">  <span class="selector-tag">color</span> <span class="selector-tag">link-color</span></span><br><span class="line">  <span class="selector-tag">text-decoration</span> <span class="selector-tag">none</span></span><br><span class="line">  &amp;<span class="selector-pseudo">:hover</span></span><br><span class="line">    <span class="selector-tag">color</span> <span class="selector-tag">link-hover-color</span></span><br><span class="line">    <span class="selector-tag">text-decoration</span> <span class="selector-tag">none</span></span><br><span class="line">  &amp;<span class="selector-pseudo">:active</span></span><br><span class="line">    <span class="selector-tag">color</span> <span class="selector-tag">link-active-color</span></span><br><span class="line">  &amp;<span class="selector-class">.disabled</span></span><br><span class="line">    <span class="selector-tag">color</span> <span class="selector-tag">disabled-color</span></span><br></pre></td></tr></table></figure>

<h4 id="2-2-2-5-配置語言"><a href="#2-2-2-5-配置語言" class="headerlink" title="2.2.2.5 配置語言"></a>2.2.2.5 配置語言</h4><p>1，配置文件的目錄為 _config.yml。</p>
<ul>
<li>language 的值为空时默认为 en</li>
<li>language 的配置文件位置为 themes/ocean/languages/</li>
</ul>
<p><em>若本主題的導航文字，需要直接修改主题配置文件（_config.yml）中的 menu</em></p>
<h4 id="2-2-2-6-取消文章的分享鏈接"><a href="#2-2-2-6-取消文章的分享鏈接" class="headerlink" title="2.2.2.6 取消文章的分享鏈接"></a>2.2.2.6 取消文章的分享鏈接</h4><p>1，配置文件的路勁為 themes\ocean\layout_partial\footer.ejs。注釋以下代碼</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 显示分享按钮</span></span><br><span class="line"><span class="comment">      &lt;a data-url="&lt;%- post.permalink %&gt;" data-id="&lt;%= post._id %&gt;" class="article-share-link"&gt;</span></span><br><span class="line"><span class="comment">        &lt;%= __('share') %&gt;</span></span><br><span class="line"><span class="comment">      &lt;/a&gt;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure>




]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Ocean</tag>
        <tag>Hexo 主题</tag>
      </tags>
  </entry>
  <entry>
    <title>Locust</title>
    <url>/2020/05/28/Locust/</url>
    <content><![CDATA[<p>locast 是一種易於使用、可編寫脚本且可擴展的性能測試工具。</p>
<p>在常規 Python 代碼中定義用戶的行爲。</p>
<p>開始使用 <a href="https://docs.locust.io/en/stable/installation.html#installation" target="_blank" rel="noopener">Local</a></p>
<a id="more"></a>
<h1 id="1-安裝"><a href="#1-安裝" class="headerlink" title="1. 安裝"></a>1. 安裝</h1><p>1, 安裝Locast</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip3 install locast</span><br></pre></td></tr></table></figure>
<p>2, 驗證安裝是否成功, 若安裝失敗，請查看<a href="https://github.com/locustio/locust/wiki/Installation" target="_blank" rel="noopener">Wiki</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">locust -V</span><br></pre></td></tr></table></figure>


<h1 id="2-locust快速入门"><a href="#2-locust快速入门" class="headerlink" title="2. locust快速入门"></a>2. locust快速入门</h1><h2 id="2-1-简单的locust的执行文件"><a href="#2-1-简单的locust的执行文件" class="headerlink" title="2.1 简单的locust的执行文件"></a>2.1 简单的locust的执行文件</h2><p>1, 編寫簡單的執行文檔</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># mylocast.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> locust <span class="keyword">import</span> HttpUser, task, between</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">updateVesion</span><span class="params">(Httpset)</span>:</span></span><br><span class="line">    <span class="comment"># 模拟每个用户在每个人执行后等待1~2s的等待时间</span></span><br><span class="line">    wait_time =between(<span class="number">1</span>,<span class="number">2</span>) </span><br><span class="line">  </span><br><span class="line">    <span class="comment"># 若在类中申明了host属性，则不需要再命令行中另行申明--host,若在命令行中另行申明了-host，则不再使用该host属性</span></span><br><span class="line">    host = <span class="string">'http://118.190.124.69:7080'</span></span><br><span class="line"><span class="meta">    @task</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">updateTest</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.client.port(url,data)</span><br><span class="line">        self.client.get(url)</span><br></pre></td></tr></table></figure>
<p>2, 在命令行执行locust文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">locust -f mylocut.py</span><br></pre></td></tr></table></figure>

<p>ps: 若执行文件没有申明host或想覆盖执行文件中的host</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">locust -f mylocut.py --host&#x3D;http:&#x2F;&#x2F;118.190.124.69:7080</span><br></pre></td></tr></table></figure>

<h2 id="2-2-设置执行效率"><a href="#2-2-设置执行效率" class="headerlink" title="2.2 设置执行效率"></a>2.2 设置执行效率</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> locust <span class="keyword">import</span> HttpUser, task, between, constant</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">updateVesion</span><span class="params">(HttpUser)</span>:</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 模拟用户在执行完操作后等待1s的时间</span></span><br><span class="line">    wait_time = constant(<span class="number">1</span>)</span><br><span class="line">    <span class="comment"># 执行多个locust类时，可设置weight,数字越高代表执行率越高，3是1的三倍效率</span></span><br><span class="line">    weight = <span class="number">3</span></span><br><span class="line"><span class="meta">    @task(1)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">updateTest</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 常用的移动端头部信息</span></span><br><span class="line">        headers = &#123;<span class="string">"Content-Type"</span>: <span class="string">"application/json"</span>&#125;</span><br><span class="line">        url = <span class="string">"/city-api/system/app_version/check/v2?token=tangsx"</span></span><br><span class="line">        data = &#123;</span><br><span class="line">                <span class="string">"MOBILE_MODEL"</span>:<span class="number">1</span>,</span><br><span class="line">                <span class="string">"VERSION"</span>:<span class="string">"1.1.1"</span>,</span><br><span class="line">                <span class="string">"OAUTH_NONCE"</span>:<span class="string">"761e9187-8877-4cd3-952e-08ae1b78bc41"</span></span><br><span class="line">                &#125;</span><br><span class="line">        self.client.post(url=url, json=data, headers=headers)</span><br><span class="line">	<span class="comment"># task(number),模拟用户的执行效率，如login是updateVesion的3倍执行效率</span></span><br><span class="line"><span class="meta">    @task(3)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(self)</span>:</span></span><br><span class="line">        login_url = <span class="string">"/city-api/user/login?token=tangsx"</span></span><br><span class="line">        headers = &#123;<span class="string">"Content-Type"</span>: <span class="string">"application/json"</span>&#125;</span><br><span class="line">        login_data = &#123;<span class="string">"USERNAME"</span>:<span class="string">"17134025282"</span>,</span><br><span class="line">                    <span class="string">"PASSWORD_MD5"</span>:<span class="string">"cffbad68bb97a6c3f943538f119c992c"</span>&#125;</span><br><span class="line">        self.client.post(url=login_url,</span><br><span class="line">                json=login_data, headers=headers)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">loginTest</span><span class="params">(HttpUser)</span>:</span></span><br><span class="line">    </span><br><span class="line">    wait_time = between(<span class="number">1.3</span>, <span class="number">2.1</span>)</span><br><span class="line">    weight = <span class="number">1</span></span><br><span class="line"><span class="meta">    @task</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">logout</span><span class="params">(self)</span>:</span></span><br><span class="line">        headers = &#123;<span class="string">"Content-Type"</span>: <span class="string">"application/json"</span>&#125;</span><br><span class="line">        logout_url = <span class="string">"/city-api/wx/logout?token=tangsx"</span></span><br><span class="line">        logout_data = &#123;<span class="string">"USERNAME"</span>:<span class="string">"17134025282"</span>&#125;</span><br><span class="line">     	self.client.post(url=logout_url, json=logout_data, headers=headers)</span><br></pre></td></tr></table></figure>

<h2 id="2-3-代码优化-嵌套"><a href="#2-3-代码优化-嵌套" class="headerlink" title="2.3 代码优化(嵌套)"></a>2.3 代码优化(嵌套)</h2><p>1, 一般浏览网页时会一级级的向下点击，为模拟用户的真实操作，可以使用TaskSet进行嵌套处理</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> locust <span class="keyword">import</span> HttpUser, task, between, TaskSet</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">logIn</span><span class="params">(TaskSet)</span>:</span></span><br><span class="line">    </span><br><span class="line"><span class="meta">    @task</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(self)</span>:</span></span><br><span class="line">        headers = &#123;<span class="string">"Content-Type"</span>: <span class="string">"application/json"</span>&#125;</span><br><span class="line">        login_url = <span class="string">"/city-api/user/login?token=tangsx"</span></span><br><span class="line">        login_data = &#123;<span class="string">"USERNAME"</span>:<span class="string">"17134025282"</span>,</span><br><span class="line">                      <span class="string">"PASSWORD_MD5"</span>:<span class="string">"cffbad68bb97a6c3f943538f119c992c"</span>&#125;</span><br><span class="line">        self.client.post(url=login_url,</span><br><span class="line">                json=login_data, headers=headers)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">update</span><span class="params">(TaskSet)</span>:</span></span><br><span class="line">    tasks = [logIn]</span><br><span class="line">    </span><br><span class="line"><span class="meta">    @task</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">updateTest</span><span class="params">(self)</span>:</span></span><br><span class="line">        headers = &#123;<span class="string">"Content-Type"</span>: <span class="string">"application/json"</span>&#125;</span><br><span class="line">        url = <span class="string">"/city-api/system/app_version/check/v2?token=tangsx"</span></span><br><span class="line">        data = &#123;</span><br><span class="line">                <span class="string">"MOBILE_MODEL"</span>:<span class="number">1</span>,</span><br><span class="line">                <span class="string">"VERSION"</span>:<span class="string">"1.1.1"</span>,</span><br><span class="line">                <span class="string">"OAUTH_NONCE"</span>:<span class="string">"761e9187-8877-4cd3-952e-08ae1b78bc41"</span></span><br><span class="line">                &#125;</span><br><span class="line">        self.client.post(url=url, json=data, headers=headers)</span><br><span class="line">        </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">runLog</span><span class="params">(HttpUser)</span>:</span></span><br><span class="line">    <span class="comment"># tasks是python的可调用函数，他们接受一个参数——正在执行任务的TaskSet类实例</span></span><br><span class="line">    </span><br><span class="line">    tasks = [logOut]</span><br><span class="line">    wait_time = between(<span class="number">1</span>,<span class="number">2</span>)</span><br></pre></td></tr></table></figure>

<h2 id="2-4-两个Locust类并行，并设置测试比例"><a href="#2-4-两个Locust类并行，并设置测试比例" class="headerlink" title="2.4 两个Locust类并行，并设置测试比例"></a>2.4 两个Locust类并行，并设置测试比例</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> locust <span class="keyword">import</span> HttpUser, task, between, TaskSet</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">logIn</span><span class="params">(TaskSet)</span>:</span></span><br><span class="line">    </span><br><span class="line"><span class="meta">    @task</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(self)</span>:</span></span><br><span class="line">        headers = &#123;<span class="string">"Content-Type"</span>: <span class="string">"application/json"</span>&#125;</span><br><span class="line">        login_url = <span class="string">"/city-api/user/login?token=tangsx"</span></span><br><span class="line">        login_data = &#123;<span class="string">"USERNAME"</span>:<span class="string">"17134025282"</span>,</span><br><span class="line">                      <span class="string">"PASSWORD_MD5"</span>:<span class="string">"cffbad68bb97a6c3f943538f119c992c"</span>&#125;</span><br><span class="line">        self.client.post(url=login_url,</span><br><span class="line">                json=login_data, headers=headers)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">update</span><span class="params">(TaskSet)</span>:</span></span><br><span class="line">    </span><br><span class="line"><span class="meta">    @task</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">updateTest</span><span class="params">(self)</span>:</span></span><br><span class="line">        headers = &#123;<span class="string">"Content-Type"</span>: <span class="string">"application/json"</span>&#125;</span><br><span class="line">        url = <span class="string">"/city-api/system/app_version/check/v2?token=tangsx"</span></span><br><span class="line">        data = &#123;</span><br><span class="line">                <span class="string">"MOBILE_MODEL"</span>:<span class="number">1</span>,</span><br><span class="line">                <span class="string">"VERSION"</span>:<span class="string">"1.1.1"</span>,</span><br><span class="line">                <span class="string">"OAUTH_NONCE"</span>:<span class="string">"761e9187-8877-4cd3-952e-08ae1b78bc41"</span></span><br><span class="line">                &#125;</span><br><span class="line">        self.client.post(url=url, json=data, headers=headers)</span><br><span class="line">        </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">runLog</span><span class="params">(HttpUser)</span>:</span></span><br><span class="line">    <span class="comment"># tasks是python的可调用函数，他们接受一个参数——正在执行任务的TaskSet类实例</span></span><br><span class="line">    </span><br><span class="line">    tasks = &#123;logIn:<span class="number">3</span>, update: <span class="number">1</span>&#125;</span><br><span class="line">    wait_time = between(<span class="number">1</span>,<span class="number">2</span>)</span><br></pre></td></tr></table></figure>

<h1 id="3-命令行"><a href="#3-命令行" class="headerlink" title="3. 命令行"></a>3. 命令行</h1><h2 id="3-1-无web-UI-运行Locust"><a href="#3-1-无web-UI-运行Locust" class="headerlink" title="3.1 无web_UI 运行Locust"></a>3.1 无web_UI 运行Locust</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">locust -f [文件名] --host[网址] --headless [无Web_UI] -u [模拟用户数] -r [用户孵化数] -t [运行时间]</span><br><span class="line">"""若执行文件写明host、模拟用户数以及用户孵化数，这该参数为选填项"""</span><br><span class="line"><span class="meta">#</span><span class="bash"> -r [用户孵化数]：真实模拟的用户， 无web_ui下必填参数</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -t [运行时间] 单位时(h)、分(m)、秒(s), 选择项，若需要定时关闭可以设置该参数，该参数需要关联[--headless]</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> --headless 无Web_UI下的决定参数</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -u 非web_UI 下必填参数</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 选填项</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> --csv=[文件名]， 以csv格式储存当前测试数据</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -L [<span class="built_in">log</span>日志]， 级别为[DEBUG/INFO/WARNING/ERROR/CRITICAL], 默认为INFO</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> --logfile=[文件名] <span class="built_in">log</span>日志的储存路径，若没有设置则在stdout/stderr</span></span><br></pre></td></tr></table></figure>

<h2 id="3-2-自定义csv的写入速度"><a href="#3-2-自定义csv的写入速度" class="headerlink" title="3.2 自定义csv的写入速度"></a>3.2 自定义csv的写入速度</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> locust.stats</span><br><span class="line">locust.stats.CSV_STATS_INTERVAL_SEC = <span class="number">5</span> <span class="comment"># 默认为2s</span></span><br></pre></td></tr></table></figure>



<h2 id="多机器分布测试"><a href="#多机器分布测试" class="headerlink" title="多机器分布测试"></a>多机器分布测试</h2><p>1, 主机和分机需要在同一个局域网下，或者设置的ip为外网<br>2, 主机只显示测试数据，不执行性能测试，且主机和分机的执行文件需要一致<br>3, 主机的执行的命令行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Locust -f [文件名] --master</span><br><span class="line"><span class="meta">#</span><span class="bash"> 可选参数</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> --master-bind-host = [IP] 将主机绑定到特定的网络上，若不填写则为本机默认的ipv4网络</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> --master-bind-prot = [port] 设置主机的监听端口，默认为5557， 会占用两个端口，为指定端口+1和指定端口</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> --expect-workers = [数量] 等待X个分机连接后，进行测试（命令行模式下使用）</span></span><br></pre></td></tr></table></figure>

<p>4, 分机执行的命令行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">locust -f [文件名] --worker</span><br><span class="line"><span class="meta">#</span><span class="bash"> --master-host = [ip] 值和主机设置的值一致；必填</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> --master-port = [port] 值和主机设置的值一致；若主机没有特殊指定，则分机不需要特殊设置</span></span><br></pre></td></tr></table></figure>

<h1 id="4-提高Http请求性能"><a href="#4-提高Http请求性能" class="headerlink" title="4. 提高Http请求性能"></a>4. 提高Http请求性能</h1><h2 id="4-1-通过FastHttpLocust提高Locust的Http请求性能"><a href="#4-1-通过FastHttpLocust提高Locust的Http请求性能" class="headerlink" title="4.1 通过FastHttpLocust提高Locust的Http请求性能"></a>4.1 通过FastHttpLocust提高Locust的Http请求性能</h2><p>1, 通常情况下我们只需要使用requests来实现HTTP请求，若执行脚本时花费了大量的CPU时间，可以切换到FastHttpLocust</p>
<p>2, 安装 geventhttplocust 的python包</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip3 install geventhttpclient</span><br></pre></td></tr></table></figure>

<p>3, 或 使用清华源 加快下载速度</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip3 install -i https:&#x2F;&#x2F;pypi.tuna.tsinghua.edu.cn&#x2F;simple geventhttpclient</span><br></pre></td></tr></table></figure>

<h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> locust <span class="keyword">import</span> TaskSet, task, between</span><br><span class="line"><span class="keyword">from</span> locust.contrib.fasthttp <span class="keyword">import</span> FastHttpLocust</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyTaskSet</span><span class="params">(TaskSet)</span>:</span></span><br><span class="line"><span class="meta">    @task</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(self)</span>:</span></span><br><span class="line">        response = self.client.get(<span class="string">"/"</span>)</span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyLocust</span><span class="params">(FastHttpLocust)</span>:</span></span><br><span class="line">    tasks = [MyTaskSet]</span><br><span class="line">    wait_time = between(<span class="number">1</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>注意：FastHttpLocust可能无法完全替代HttpLocust。</li>
</ul>
<hr>
<h1 id="5，参考文件"><a href="#5，参考文件" class="headerlink" title="5，参考文件"></a>5，参考文件</h1><p>1, <a href="https://www.axihe.com/tools/locust/home.html" target="_blank" rel="noopener">阿西河博客</a><br>2, <a href="https://docs.locust.io/" target="_blank" rel="noopener">Locust IO文档</a></p>
]]></content>
      <categories>
        <category>測試</category>
        <category>性能測試</category>
      </categories>
      <tags>
        <tag>并發</tag>
        <tag>性能測試</tag>
        <tag>Http</tag>
      </tags>
  </entry>
  <entry>
    <title>PlantUML</title>
    <url>/2020/06/30/PlantUML/</url>
    <content><![CDATA[<p>–基于vscIDE编辑器的PLantUML模块。</p>
<p>1, 本流程图是通过使用代码行(伪代码)进行实现<br>2, 需要Java、需要IDE：<a href="https://code.visualstudio.com/" target="_blank" rel="noopener">Visual Studio Code</a><br>3, 如果需要画时序图和活动图以外的流程图，需要安装grephviz-dot<br>4, 本教程或则记录仅为活动图<br>5, 本次不是完整活动图记录，若需要别的条件或关键词，可以通过附录链接，跳转到官方文档</p>
<a id="more"></a>
<h1 id="1-开始"><a href="#1-开始" class="headerlink" title="1. 开始"></a>1. 开始</h1><p>1, @startuml 和 @enduml 为开始和结束流程<br>2, start 和 stop为开始和结束，end表现为另种结束icon<br>3, if、elseif、和else为条件语句。else只能连续出现一次<br>4, endif 设置多个分支</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@startuml [Test测试]</span></span><br><span class="line"><span class="keyword">if</span>(线路判断规则) then(按照机具上传方向) </span><br><span class="line">    <span class="keyword">if</span>(上下车方向是否相同) then(Y)</span><br><span class="line">        <span class="keyword">if</span>(上车站点是否大于下车站点) then(N)</span><br><span class="line">            :定为一条行程，线路方向和站点序号为机具上传的方向;</span><br><span class="line">            stop</span><br><span class="line">        <span class="keyword">else</span>(Y)</span><br><span class="line">            <span class="keyword">if</span>(上车站点是否等于下车站点) then(Y)</span><br><span class="line">                :定为一条线路，线路方向和序号为机具上传的;</span><br><span class="line">                stop</span><br><span class="line">            <span class="keyword">else</span>(N)</span><br><span class="line">                <span class="keyword">if</span>(上车站点大于下车站点的扣费规则) then(扣除最低票价(有优惠))</span><br><span class="line">                    :定为一条行程，线路方向和站点序号为机具上传;</span><br><span class="line">                    stop</span><br><span class="line">                <span class="keyword">else</span>(扣除最低票价(无优惠))</span><br><span class="line">                    :定为一条行程，线路方向和站点序号为机具上传;</span><br><span class="line">                    stop</span><br><span class="line">                endif</span><br><span class="line">            endif</span><br><span class="line">        endif</span><br><span class="line">    <span class="keyword">else</span>(Y)</span><br><span class="line">        <span class="keyword">if</span>(上车站点是否小于下车站点) then(Y)</span><br><span class="line">            :定为一条行程，上下车为机具上传的方向和站点，扣除正常的区间票价;</span><br><span class="line">            stop</span><br><span class="line">        <span class="keyword">else</span>(N)</span><br><span class="line">            <span class="keyword">if</span>(上车站点是否等于下车站点) then(Y)</span><br><span class="line">                :定为一条行程上下车为机具上传的方向和站点，扣除线路最低票价;</span><br><span class="line">                stop</span><br><span class="line">            <span class="keyword">else</span>(N)</span><br><span class="line">                :定为一条行程，扣除方向的最低区间票价;</span><br><span class="line">                stop</span><br><span class="line">            endif</span><br><span class="line">        endif</span><br><span class="line">    endif</span><br><span class="line"><span class="keyword">else</span>(根据上传站点序号进行判断)</span><br><span class="line">    :此处省略一万字.....;</span><br><span class="line">    stop</span><br><span class="line"><span class="meta">@enduml</span></span><br></pre></td></tr></table></figure>

<h1 id="2-説明"><a href="#2-説明" class="headerlink" title="2. 説明"></a>2. 説明</h1><p>1, 缩进不会影响实际的表现，缩进只是本人习惯和方便查看分支<br>2, 查看实时预览图片使用 atl+d组合键<br>3, 文件后缀使用 wad文件或别的后缀名</p>
<h1 id="3-參考文檔"><a href="#3-參考文檔" class="headerlink" title="3. 參考文檔"></a>3. 參考文檔</h1><p><a href="https://plantuml.com/zh/" target="_blank" rel="noopener">plantuml</a></p>
]]></content>
      <tags>
        <tag>vscode</tag>
        <tag>工具</tag>
        <tag>流程图</tag>
        <tag>沒用的知識</tag>
      </tags>
  </entry>
  <entry>
    <title>V2ray搭建教程</title>
    <url>/2020/07/05/V2ray/</url>
    <content><![CDATA[<p>V2Ray 是一个与 Shadowsocks 类似的代理软件，可以用来科学上网（翻墙）学习国外先进科学技术。</p>
<a id="more"></a>

<h1 id="1-服务器"><a href="#1-服务器" class="headerlink" title="1. 服务器"></a>1. 服务器</h1><p>1, 可以使用<a href="https://www.linode.com/" target="_blank" rel="noopener">linode</a> 或者<a href="https://bandwagonhost.cn/" target="_blank" rel="noopener">搬瓦工</a>vps服务器</p>
<p>2, 本次推荐Google Cloud(谷歌云)，搭建v2ray或者其余学习用途</p>
<p>3, <img src="https://cdn.jsdelivr.net/gh/xiongJum/Picture/img/scr_GoogleCloud.png" alt=""></p>
<pre><code>(1). 优点

+   也无需担心和AWS一样会莫名其妙的扣费，在没有升级为付费用户之前是不会扣除信用卡的金额
+   新用户会赠送等同于$300 的当地货币使用，有效期为12个月
+   有香港等亚太地区的服务器，使用延迟会好上不少

(2). 缺点

+   搭建过程中需要使用魔法上网</code></pre><p>4, 本教程暂不介绍服务器申请<br>5, 也可以使用別的國外服務器</p>
<h1 id="2-服务端配置"><a href="#2-服务端配置" class="headerlink" title="2. 服务端配置"></a>2. 服务端配置</h1><p>1, 本次教程选择的面板为<a href="https://github.com/sprov065" target="_blank" rel="noopener">sprov065</a>@github用户的<a href="https://github.com/sprov065/v2-ui" target="_blank" rel="noopener">v2-ui</a> </p>
<pre><code>(1). 可视化操作，查看方便、学习门槛较低
(2). 由于是网页端所以管理会比较方便
(3). 该面板可以配置多用户</code></pre><h2 id="2-1-安装-amp-升级"><a href="#2-1-安装-amp-升级" class="headerlink" title="2.1 安装&amp;升级"></a>2.1 安装&amp;升级</h2><p>1, 安裝v2ray</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bash &lt;(curl -Ls https:&#x2F;&#x2F;blog.sprov.xyz&#x2F;v2-ui.sh)</span><br></pre></td></tr></table></figure>

<h2 id="2-2-設置"><a href="#2-2-設置" class="headerlink" title="2.2 設置"></a>2.2 設置</h2><p>1, 输入v2-ui，进入面板设置</p>
<img src="https://cdn.jsdelivr.net/gh/xiongJum/Picture/scr/03.png" style="zoom:50%;" />

<p>2， 查看或者重新设置面板的端口号</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查找v2-ui的服务进程</span></span><br><span class="line">ps -ef | grep v2-ui</span><br><span class="line"><span class="meta">#</span><span class="bash"> 根据PID查找端口号</span></span><br><span class="line">netstat -nap | grep [PID]</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/xiongJum/Picture/Scr/03.png" alt=""></p>
<h2 id="2-3-通過瀏覽器設置代理"><a href="#2-3-通過瀏覽器設置代理" class="headerlink" title="2.3 通過瀏覽器設置代理"></a>2.3 通過瀏覽器設置代理</h2><p>1, 输入当前服务器IP:端口 和账号密码admin，进入设置面板</p>
<p><img src="https://cdn.jsdelivr.net/gh/xiongJum/Picture/Scr/04.png" alt=""></p>
<p>1, 点击账号列表，点击左上角的+号，进入添加账号页面，备注为非填项，其余默认即可，可以按照自己的需求进行修改，本次教程选择的协议为kcp<br>2, kcp消耗流量比较多，但延迟较低，对于延迟较高的IP，选择kcp会一定程度上改善网络环境<br>3, 如果想选择其余协议，可以参考<a href="https://toutyrater.github.io/advanced/wss_and_web.html" target="_blank" rel="noopener">Blog</a><br>4, 若想使用Nginx+w2+TLS进行网络代理，本教程中协议传输配置选择w2，不要选择TLS。TLS在Nginx中配置即可，但客户端中要选择TLS，端口为Nginx中代理的端口，非在本面板中设置的端口</p>
<p><img src="https://cdn.jsdelivr.net/gh/xiongJum/Picture/Scr/05.png" alt=""></p>
<p>点击添加-二维码-复制连接，即可获得v2Ray的连接</p>
<h1 id="3-客户端配置"><a href="#3-客户端配置" class="headerlink" title="3. 客户端配置"></a>3. 客户端配置</h1><h2 id="3-1-下载地址"><a href="#3-1-下载地址" class="headerlink" title="3.1 下载地址"></a>3.1 下载地址</h2><p>PC端：<a href="https://github.com/2dust/v2rayN/releases" target="_blank" rel="noopener">windows</a>、<a href="https://github.com/Cenmrev/V2RayX/releases" target="_blank" rel="noopener">MacOS</a><br>移动端：<a href="https://github.com/2dust/v2rayNG/releases" target="_blank" rel="noopener">Android</a></p>
<h2 id="3-2-配置：windows"><a href="#3-2-配置：windows" class="headerlink" title="3.2 配置：windows"></a>3.2 配置：windows</h2><p>1, 下载并解压<a href="https://github.com/2dust/v2rayN/releases/download/3.19/v2rayN.zip" target="_blank" rel="noopener">v2RayN</a>和<a href="https://github.com/2dust/v2rayN/releases/download/3.19/v2rayN-Core.zip" target="_blank" rel="noopener">v2rayN-Core</a><br>2, 点击v2rayN.exe文件，右击右下角的v2rayN的图标选择{从剪贴板导入批量Url}<br>3, 双击右下角的v2ray图标进入显示面板，可以发现有刚刚导入的链接<br>4, 右击右下角的图标选择{Http代理-PAC模式}</p>
<h1 id="4-扩展"><a href="#4-扩展" class="headerlink" title="4. 扩展"></a>4. 扩展</h1><h2 id="4-1-模式说明"><a href="#4-1-模式说明" class="headerlink" title="4.1 模式说明"></a>4.1 模式说明</h2><p>1, 全局是代理所有的网络包括局域网和国内的网络如百度，和国外的网络如Google<br>2, PAC是通过配置文件选择代理部分网络<br>3, v2ray支持GFWfilt地址和本地pac文件同时生效，若GFWList地址中没有代理你需要的网络，你可以在用户PAC设置中手动添加要代理的ip或者域名<br><img src="https://cdn.jsdelivr.net/gh/xiongJum/Picture//Scr/08.png" alt=""></p>
<h2 id="4-2-設置PAC代理"><a href="#4-2-設置PAC代理" class="headerlink" title="4.2 設置PAC代理"></a>4.2 設置PAC代理</h2><p>1, pixiv的PAC代理地址</p>
<ul>
<li><a href="http://www.pixiv.net" target="_blank" rel="noopener">www.pixiv.net</a>,</li>
<li>api.booth.pm,(存疑)</li>
<li>i.pximg.net,</li>
</ul>
<h2 id="4-3-局域网代理配置（如switch配置）"><a href="#4-3-局域网代理配置（如switch配置）" class="headerlink" title="4.3 局域网代理配置（如switch配置）"></a>4.3 局域网代理配置（如switch配置）</h2><p>1, 双击v2ray-参数设置，进入设置页面，点击基础设置查看本地监听端口<br>2, http代理默认即可，你也可以根据自己的选择进行不同的配置<br>3, 本地会开启两个端口号（设置的端口号X和X+1）<br>4, 按下快捷键win+R，在运行输入框中输入cmd<br>5, 在cmd界面输入ipconfig<br>   <img src="https://cdn.jsdelivr.net/gh/xiongJum/Picture//Scr/09.png" alt=""></p>
<p>6,在要代理的机器中（如switch）ip设置为上图的ipv4、端口号为设置的端口号+1</p>
<hr>
<h1 id="4-引申文檔"><a href="#4-引申文檔" class="headerlink" title="4. 引申文檔"></a>4. 引申文檔</h1><p><a href="https://selierlin.github.io/v2ray/" target="_blank" rel="noopener">V2Ray 配置指南</a></p>
]]></content>
      <tags>
        <tag>vpn</tag>
        <tag>V2ray</tag>
        <tag>梯子</tag>
      </tags>
  </entry>
  <entry>
    <title>web 端自動化測試</title>
    <url>/2020/06/29/web%E7%AB%AF%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E8%84%9A%E6%9C%AC/</url>
    <content><![CDATA[<p>Selenium 是支持 web 浏览器自动化的一系列工具和库的综合性项目，它提供了扩展来模拟用户与浏览器的交互，用于扩展浏览器分配的分发服务器， 以及用于实现 <a href="https://www.w3.org/TR/webdriver/" target="_blank" rel="noopener">W3C WebDriver</a> 规范的基础结构， 该规范允许您为所有主要 Web 浏览器编写可互换的代码.</p>
<p>Selenium 汇集了浏览器供应商，工程师和爱好者，以进一步围绕 Web 平台自动化进行公开讨论。 该项目组织了一次年度会议，以教学和培养社区.</p>
<p>Selenium 的核心是 <a href="https://www.selenium.dev/zh-cn/documentation/webdriver/" target="_blank" rel="noopener">WebDriver</a>，这是一个编写指令集的接口，可以在许多浏览器中互换运行</p>
<a id="more"></a>


<h1 id="1-准备"><a href="#1-准备" class="headerlink" title="1. 准备"></a>1. 准备</h1><p>1, 下载selenium库</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip3 install selenium</span><br></pre></td></tr></table></figure>
<p>ps 若下载时间过慢，可以跟换国内pip源进行下载</p>
<p>2, 下载浏览器驱动，下面用例以火狐浏览器举例</p>
<p>将<a href="http://chromedriver.chromium.org/downloads" target="_blank" rel="noopener">chrome</a>驱动放在目录 [python的安装目录]\Python\Python(版本号)下，或者放在执行和执行文件同路径下</p>
<h1 id="2-編寫脚本文件"><a href="#2-編寫脚本文件" class="headerlink" title="2. 編寫脚本文件"></a>2. 編寫脚本文件</h1><h2 id="2-1-编写基礎的web自动化脚本"><a href="#2-1-编写基礎的web自动化脚本" class="headerlink" title="2.1 编写基礎的web自动化脚本"></a>2.1 编写基礎的web自动化脚本</h2><p>1, 編寫执行脚本文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">seleniumTest</span><span class="params">(unittest.TestCase)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setUp</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 添加驱动，设置隐形等待时间、最大化浏览器窗口、输入测试地址</span></span><br><span class="line">        self.driver = webdriver.Chrome()	</span><br><span class="line">        self.driver.implicitly_wait(<span class="number">10</span>)</span><br><span class="line">        self.driver.maximize_window()</span><br><span class="line">        self.driver.get(<span class="string">"http://118.190.124.69:8080/bts-2.4.3/"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_login</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 查找账号、密码输入框，并输入内容</span></span><br><span class="line">        self.driver.find_element_by_id(<span class="string">"username"</span>).send_keys(<span class="string">'xiongceshi'</span>)</span><br><span class="line">        self.driver.find_element_by_id(<span class="string">"password"</span>).send_keys(<span class="string">"xiongceshi121"</span>)</span><br><span class="line">        <span class="comment"># 查找并点击登录按钮</span></span><br><span class="line">        self.driver.find_element_by_id(<span class="string">"login_submit"</span>).click()</span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">tearDown</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 关闭浏览器并退出脚本</span></span><br><span class="line">        self.driver.quit()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    <span class="comment"># 运行全部以test_开头的方法，vrrbosity为打印等级，默认为2，exit为退出条件，默认为True</span></span><br><span class="line">    unittest.main(verbosity=<span class="number">2</span>, exit = <span class="literal">False</span>)</span><br></pre></td></tr></table></figure>

<p>2, 执行脚本文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">test_login (__main__.seleniumTest) ... ok</span><br><span class="line">-----------------------------------------------------------------------------------------</span><br><span class="line">Ran 1 test in 12.749s</span><br><span class="line"></span><br><span class="line">OK</span><br></pre></td></tr></table></figure>

<h2 id="2-2-增加断言，判断是否符合测试要求"><a href="#2-2-增加断言，判断是否符合测试要求" class="headerlink" title="2.2 增加断言，判断是否符合测试要求"></a>2.2 增加断言，判断是否符合测试要求</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">seleniumTest</span><span class="params">(unittest.TestCase)</span>:</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setUp</span><span class="params">(cls)</span>:</span></span><br><span class="line">        cls.driver = webdriver.Firefox()	</span><br><span class="line">        cls.driver.implicitly_wait(<span class="number">10</span>)</span><br><span class="line">        cls.driver.maximize_window()</span><br><span class="line">        cls.driver.get(<span class="string">"http://118.190.124.69:8080/bts-2.4.3/"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_a_login</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""正确的账号密码进行登录"""</span></span><br><span class="line">        -------skip  </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_b_login</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""错误的账号密码进行登录，并判断提示文案是否正确"""</span>       </span><br><span class="line">        self.driver.find_element_by_id(<span class="string">"username"</span>).send_keys(<span class="string">'错误账号'</span>)</span><br><span class="line">        self.driver.find_element_by_id(<span class="string">"password"</span>).send_keys(<span class="string">"错误密码"</span>)</span><br><span class="line">        self.driver.find_element_by_id(<span class="string">"login_submit"</span>).click()</span><br><span class="line">        </span><br><span class="line">        <span class="string">"""查找错误提示文案，并判断文案是否错误"""</span></span><br><span class="line">        <span class="comment"># 设置显式等待时间，强制等待2秒查找元素</span></span><br><span class="line">        errorMsg = WebDriverWait(self.driver, <span class="number">2</span>) .until \</span><br><span class="line">        	(EC.visibility_of_element_located((By.ID,<span class="string">"errorMsg"</span>))).text</span><br><span class="line">        errorText = <span class="string">'账户或密码错误，请重新输入呀！'</span></span><br><span class="line">        <span class="comment"># 断言，比较两者的的字符串是否一致，若一致则为True，不一致则为Flase并抛出错误</span></span><br><span class="line">        self.assertEqual(errorMsg, errorText, <span class="string">'提示文案错误'</span>)</span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tearDown</span><span class="params">(cls)</span>:</span></span><br><span class="line">        cls.driver.quit()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    unittest.main(verbosity=<span class="number">2</span>, exit = <span class="literal">False</span>)</span><br></pre></td></tr></table></figure>

<p>执行测试结果</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">test_a_login (__main__.seleniumTest)</span><br><span class="line">正确的账号密码进行登录 ... ok</span><br><span class="line">test_b_login (__main__.seleniumTest)</span><br><span class="line">错误的账号密码进行登录，并判断提示文案是否正确 ... FAIL</span><br><span class="line"></span><br><span class="line">======================================================================</span><br><span class="line">FAIL: test_b_login (__main__.seleniumTest)</span><br><span class="line">错误的账号密码进行登录，并判断提示文案是否正确</span><br><span class="line">----------------------------------------------------------------------</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File "c:\Users\jum\Desktop\临时文件夹\changzhou\changzhou_run\testEdit.py", line 27, in test_b_login</span><br><span class="line">    self.assertEqual(errorMsg, errorText, '提示文案错误')</span><br><span class="line">AssertionError: '账户或密码错误，请重新输入' != '账户或密码错误，请重新输入呀！'</span><br><span class="line">+ 账户或密码错误，请重新输入！ : 提示文案错误</span><br><span class="line"></span><br><span class="line">----------------------------------------------------------------------</span><br><span class="line">Ran 2 tests in 41.063s</span><br><span class="line"></span><br><span class="line">FAILED (failures=1)</span><br></pre></td></tr></table></figure>

<h2 id="2-3-增加功能，截取产生有bug的界面"><a href="#2-3-增加功能，截取产生有bug的界面" class="headerlink" title="2.3 增加功能，截取产生有bug的界面"></a>2.3 增加功能，截取产生有bug的界面</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">--------------------skip---------------------------------------</span><br><span class="line">        <span class="comment"># 判断文案是否错误，并截取用例执行错误时的界面</span></span><br><span class="line">        errorText = <span class="string">'账户或密码错误，请重新输入！'</span>     </span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 错误代码块，当try为True时，跳过except，当try为Flase时，执行except</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.assertEqual(errorMsg, errorText)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="comment"># 截取当前界面，字符串中的内容为保存路径</span></span><br><span class="line">            self.driver.save_screenshot(<span class="string">'./test.png'</span>)</span><br><span class="line">            <span class="comment"># 断言，无条件的创造失败，字符串为错误说明</span></span><br><span class="line">            self.fail(<span class="string">"登录失败时，提示文案错误"</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tearDown</span><span class="params">(cls)</span>:</span></span><br><span class="line">        cls.driver.quit()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    unittest.main(verbosity=<span class="number">2</span>, exit = <span class="literal">False</span>)</span><br></pre></td></tr></table></figure>

<h1 id="3-优化代码结构，产生测试报告"><a href="#3-优化代码结构，产生测试报告" class="headerlink" title="3. 优化代码结构，产生测试报告"></a>3. 优化代码结构，产生测试报告</h1><p>1, 文件1，储存配置以及通用方法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># seleniumconfig.py</span></span><br><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">seleniumConfig</span><span class="params">(unittest.TestCase)</span>:</span></span><br><span class="line">	<span class="string">"""储存重复的方法，以及通用配置"""</span></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setUp</span><span class="params">(cls)</span>:</span></span><br><span class="line">        cls.driver = webdriver.Firefox()	</span><br><span class="line">        cls.driver.implicitly_wait(<span class="number">10</span>)</span><br><span class="line">        cls.driver.maximize_window()</span><br><span class="line">        cls.driver.get(<span class="string">"http://118.190.124.69:8080/bts-2.4.3/"</span>)</span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tearDown</span><span class="params">(cls)</span>:</span></span><br><span class="line">        <span class="comment"># 关闭浏览器并退出脚本</span></span><br><span class="line">        cls.driver.quit()  </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">find_element_try</span><span class="params">(self, real, demand, explana)</span>:</span></span><br><span class="line">        <span class="string">"""判断实际内容和需求是否一致，若不一致则截取图片，并返回错误说明"""</span></span><br><span class="line">		<span class="keyword">try</span>:</span><br><span class="line">            self.assertEqual(real, demand)</span><br><span class="line">		<span class="keyword">except</span>:</span><br><span class="line">            self.fail(explana)</span><br><span class="line">            self.driver.save_screenshot(<span class="string">'./test.png'</span>)   </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">find_element_wait</span><span class="params">(self, wait_time, type_element, element)</span>:</span></span><br><span class="line">        <span class="string">"""检查元素是否存在，若不存在则截取图片并返回错误说明"""</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">return</span> WebDriverWait(self.driver, wait_time).until \</span><br><span class="line">                (EC.visibility_of_element_located((type_element,element)))</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            self.fail(<span class="string">"&#123;&#125;查找失败，请检查元素是否正确或产品出现缺陷"</span>.format(element))</span><br></pre></td></tr></table></figure>

<p>2, 设计测试流程、设计测试用例</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># seleniumtest.py</span></span><br><span class="line"><span class="keyword">from</span> seleniumconfig <span class="keyword">import</span> seleniumConfig</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">seleniumTest</span><span class="params">(seleniumConfig)</span>:</span></span><br><span class="line">	<span class="string">"""设计118环境web端登录的测试用例"""</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_a_login</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""正确的账号密码进行登录"""</span></span><br><span class="line">        -------skip  </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_b_login</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""错误的账号密码进行登录，并判断提示文案是否正确"""</span></span><br><span class="line">        self.driver.find_element_by_id(<span class="string">"username"</span>).send_keys(<span class="string">'错误账号'</span>)</span><br><span class="line">        self.driver.find_element_by_id(<span class="string">"password"</span>).send_keys(<span class="string">"错误密码"</span>)</span><br><span class="line">        self.driver.find_element_by_id(<span class="string">"login_submit"</span>).click()</span><br><span class="line">        <span class="comment"># 获取错误提示文案</span></span><br><span class="line">        errorMsg = self.find_element_wait(<span class="number">2</span>,By.ID,<span class="string">"errorMsg"</span>).text</span><br><span class="line">        errorText = <span class="string">'账户或密码错误，请重新输入！'</span></span><br><span class="line">        explana = <span class="string">'登录失败时，提示文案错误'</span>      </span><br><span class="line">       <span class="comment"># 判断错误提示文案和需求是否一致</span></span><br><span class="line">        self.find_element_try(errorMsg, errorText, explana)</span><br></pre></td></tr></table></figure>

<h1 id="4-生成测试报告"><a href="#4-生成测试报告" class="headerlink" title="4. 生成测试报告"></a>4. 生成测试报告</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># seleniumrun.py</span></span><br><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="keyword">import</span> HTMLTestRunner</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> seleniumtest <span class="keyword">import</span> seleniumTest</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取测试用例，创建测试套件(若有多份测试用例，可以创建多份测试套件)</span></span><br><span class="line">web_login = unittest.TestLoader().loadTestsFromTestCase(seleniumTest)</span><br><span class="line">kts_login = unittest.TestSuite([web_login])</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string"># 若有多份测试用例时</span></span><br><span class="line"><span class="string">import seleniumtestone import seleniumTestOne</span></span><br><span class="line"><span class="string">import seleniumtestone import seleniumTestTwo</span></span><br><span class="line"><span class="string">web_logout = unittest.TestLoader().loadTestsFromTestCase(seleniumTestOne)</span></span><br><span class="line"><span class="string">web_log = unittest.TestLoader().loadTestsFromTestCase(seleniumTestTwo)</span></span><br><span class="line"><span class="string">kts_login = unittest.TestSuite([web_login, web_logout, web_log])</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#设置报告的写入路径和名称</span></span><br><span class="line">dir = os.getcwd()</span><br><span class="line">nowTime = time.strftime(<span class="string">'%Y%m%d%H%M%S'</span>,time.localtime(time.time()))</span><br><span class="line">outPath = <span class="string">'./outFile/webTestReport&#123;&#125;.html'</span>.format(nowTime)</span><br><span class="line">outFile = open(dir + outPath, <span class="string">'wb'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建测试内容，执行测试套件</span></span><br><span class="line">runner = HTMLTestRunner.HTMLTestRunner(</span><br><span class="line">    stream= outFile,</span><br><span class="line">    title= <span class="string">'测试报告'</span>,</span><br><span class="line">    description= <span class="string">'WEB支撑平台测试_UI自动化回归测试'</span>,</span><br><span class="line">    verbosity=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">runner.run(kts_login)</span><br><span class="line"><span class="comment"># 不生成测试报告</span></span><br><span class="line"><span class="comment"># unittest.TextTestRunner(verbosity=2).run(kts_login)</span></span><br></pre></td></tr></table></figure>

<p>执行测试用例，获取测试报告</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">py seleniumrun.py</span><br><span class="line"><span class="meta">#</span><span class="bash"> ps如果执行失败请检查缩进是否正常，以及文件是否创建</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>測試</category>
        <category>自動化測試</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>selenium</tag>
        <tag>web 自動化測試</tag>
      </tags>
  </entry>
</search>
