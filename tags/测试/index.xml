<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>测试 on LongLit</title>
    <link>https://xiongjum.github.io/tags/%E6%B5%8B%E8%AF%95/</link>
    <description>Recent content in 测试 on LongLit</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <copyright>© LongLit</copyright>
    <lastBuildDate>Sun, 26 Dec 2021 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://xiongjum.github.io/tags/%E6%B5%8B%E8%AF%95/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>接口自动化测试</title>
      <link>https://xiongjum.github.io/post/code/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95-%E6%8E%A5%E5%8F%A3/</link>
      <pubDate>Sun, 26 Dec 2021 00:00:00 +0000</pubDate>
      <guid>https://xiongjum.github.io/post/code/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95-%E6%8E%A5%E5%8F%A3/</guid>
      <description>准备 准备库 requests 和 unittest&#xA;pip install requests 编写测试脚本 封装公共参数 封装公共参数，重复调取结果，减少代码的编写量，降低理解难度。&#xA;设置接口的必填参数，并使用 *args 传入接口的非必填参数；使用 **kwargs 设置一些条件。 可以将一些公共参数写入到单独的文件中，使用时引用即可；一些隐私的数据可以写入到#环境变量中中，如测试 api 或者测试账号。&#xA;import requests import unittest class RequestTest(unittest.TestCase): # 封装公共参数 def common(self, name, password, *args, **kwargs): url = f&amp;#34;{config.ENVIRONMENT}/auth/login&amp;#34; param = {&amp;#34;name&amp;#34;:name, &amp;#34;password&amp;#34;:password,} if args: # 如果 args 不为空 则将参数传入添加到请求参数中 for arg in args: param.update(**arg) self.response = requests.post(url, headers=self.headers, json=param, verify=False,) # 如果 kwargs 不为 False 则进行相应的操作 if kwargs: for key, value in kwargs.</description>
    </item>
    <item>
      <title>Selenium</title>
      <link>https://xiongjum.github.io/post/code/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95-selenium/</link>
      <pubDate>Mon, 29 Jun 2020 09:00:00 +0000</pubDate>
      <guid>https://xiongjum.github.io/post/code/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95-selenium/</guid>
      <description>&lt;p&gt;Selenium 是支持 web 浏览器自动化的一系列工具和库的综合性项目，它提供了扩展来模拟用户与浏览器的交互，用于扩展浏览器分配的分发服务器， 以及用于实现 &lt;a href=&#34;https://www.w3.org/TR/webdriver/&#34;&gt;W3C WebDriver&lt;/a&gt; 规范的基础结构， 该规范允许您为所有主要 Web 浏览器编写可互换的代码.&lt;/p&gt;&#xA;&lt;p&gt;Selenium 汇集了浏览器供应商，工程师和爱好者，以进一步围绕 Web 平台自动化进行公开讨论。 该项目组织了一次年度会议，以教学和培养社区.&lt;/p&gt;&#xA;&lt;p&gt;Selenium 的核心是 &lt;a href=&#34;https://www.selenium.dev/zh-cn/documentation/webdriver/&#34;&gt;WebDriver&lt;/a&gt;，这是一个编写指令集的接口，可以在许多浏览器中互换运行&lt;/p&gt;</description>
    </item>
    <item>
      <title>Locust</title>
      <link>https://xiongjum.github.io/post/code/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95-locust/</link>
      <pubDate>Thu, 28 May 2020 00:00:00 +0000</pubDate>
      <guid>https://xiongjum.github.io/post/code/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95-locust/</guid>
      <description>&lt;p&gt;locast 是一種易於使用、可編寫脚本且可擴展的性能測試工具。&lt;/p&gt;&#xA;&lt;p&gt;在常規 Python 代碼中定義用戶的行爲。&lt;/p&gt;&#xA;&lt;p&gt;開始使用 &lt;a href=&#34;https://locust.io/&#34;&gt;Local&lt;/a&gt;&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
